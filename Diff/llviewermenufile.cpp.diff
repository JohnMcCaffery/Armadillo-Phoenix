diff --git a/Source/indra/newview/llviewermenufile.cpp b/Source/indra/newview/llviewermenufile.cpp
index 519010d..cb5d535 100644
--- a/Source/indra/newview/llviewermenufile.cpp
+++ b/Source/indra/newview/llviewermenufile.cpp
@@ -34,6 +34,7 @@
 #include "llfilepicker.h"
 #include "llfloaterreg.h"
 #include "llbuycurrencyhtml.h"
+#include "llfloatermap.h"
 #include "llfloatermodelpreview.h"
 #include "llfloatersnapshot.h"
 #include "llimage.h"
@@ -79,7 +80,10 @@
 #include <boost/tokenizer.hpp>
 
 #include "llinventorydefines.h"
-#include "llimfloatercontainer.h"
+// <FS:Ansariel> [FS communication UI]
+//#include "llimfloatercontainer.h"
+#include "fsfloaterimcontainer.h"
+// </FS:Ansariel> [FS communication UI]
 
 
 class LLFileEnableUpload : public view_listener_t
@@ -395,10 +399,92 @@ const std::string upload_pick(void* data)
 // <FS:CR Threaded Filepickers>
 #endif
 
-static void show_floater_callback(const std::string& floater, const std::string& filename)
+// <FS:Ansariel> Add back validation checks for threaded filepickers
+//static void show_floater_callback(const std::string& floater, const std::string& filename)
+static void show_floater_callback(const std::string& floater, const std::string& filename, LLFilePicker::ELoadFilter type)
+// </FS:Ansariel>
 {
 	if (!filename.empty() && !floater.empty())
 	{
+		// <FS:Ansariel> Add back validation checks for threaded filepickers;
+		//               Copied from upload_pick()
+		std::string ext = gDirUtilp->getExtension(filename);
+
+		//strincmp doesn't like NULL pointers
+		if (ext.empty())
+		{
+			std::string short_name = gDirUtilp->getBaseFileName(filename);
+		
+			// No extension
+			LLSD args;
+			args["FILE"] = short_name;
+			LLNotificationsUtil::add("NoFileExtension", args);
+			return;
+		}
+		else
+		{
+			//so there is an extension
+			//loop over the valid extensions and compare to see
+			//if the extension is valid
+
+			//now grab the set of valid file extensions
+			std::string valid_extensions = build_extensions_string(type);
+
+			BOOL ext_valid = FALSE;
+		
+			typedef boost::tokenizer<boost::char_separator<char> > tokenizer;
+			boost::char_separator<char> sep(" ");
+			tokenizer tokens(valid_extensions, sep);
+			tokenizer::iterator token_iter;
+
+			//now loop over all valid file extensions
+			//and compare them to the extension of the file
+			//to be uploaded
+			for( token_iter = tokens.begin();
+				 token_iter != tokens.end() && ext_valid != TRUE;
+				 ++token_iter)
+			{
+				const std::string& cur_token = *token_iter;
+
+				if (cur_token == ext || cur_token == "*.*")
+				{
+					//valid extension
+					//or the acceptable extension is any
+					ext_valid = TRUE;
+				}
+			}//end for (loop over all tokens)
+
+			if (ext_valid == FALSE)
+			{
+				//should only get here if the extension exists
+				//but is invalid
+				LLSD args;
+				args["EXTENSION"] = ext;
+				args["VALIDS"] = valid_extensions;
+				LLNotificationsUtil::add("InvalidFileExtension", args);
+				return;
+			}
+		}//end else (non-null extension)
+
+		//valid file extension
+	
+		//now we check to see
+		//if the file is actually a valid image/sound/etc.
+		if (type == LLFilePicker::FFLOAD_WAV)
+		{
+			// pre-qualify wavs to make sure the format is acceptable
+			std::string error_msg;
+			if (check_for_invalid_wav_formats(filename,error_msg))
+			{
+				llinfos << error_msg << ": " << filename << llendl;
+				LLSD args;
+				args["FILE"] = filename;
+				LLNotificationsUtil::add( error_msg, args );
+				return;
+			}
+		}//end if a wave/sound file
+		// </FS:Ansariel>
+
 		LLFloaterReg::showInstance(floater, LLSD(filename));
 	}
 }
@@ -430,7 +516,7 @@ class LLFileUploadImage : public view_listener_t
 		//{
 		//	LLFloaterReg::showInstance("upload_image", LLSD(filename));
 		//}
-		(new LLGenericLoadFilePicker(LLFilePicker::FFLOAD_IMAGE, boost::bind(&show_floater_callback,"upload_image",_1)))->getFile();
+		(new LLGenericLoadFilePicker(LLFilePicker::FFLOAD_IMAGE, boost::bind(&show_floater_callback, "upload_image", _1, LLFilePicker::FFLOAD_IMAGE)))->getFile();
 // </FS:CR Threaded Filepickers>
 		return TRUE;
 	}
@@ -460,7 +546,7 @@ class LLFileUploadSound : public view_listener_t
 		//{
 		//	LLFloaterReg::showInstance("upload_sound", LLSD(filename));
 		//}
-		(new LLGenericLoadFilePicker(LLFilePicker::FFLOAD_WAV, boost::bind(&show_floater_callback,"upload_sound",_1)))->getFile();
+		(new LLGenericLoadFilePicker(LLFilePicker::FFLOAD_WAV, boost::bind(&show_floater_callback, "upload_sound", _1, LLFilePicker::FFLOAD_WAV)))->getFile();
 // </FS:CR Threaded Filepickers>
 		return true;
 	}
@@ -569,7 +655,7 @@ class LLFileEnableCloseWindow : public view_listener_t
 {
 	bool handleEvent(const LLSD& userdata)
 	{
-		bool new_value = NULL != LLFloater::getClosableFloaterFromFocus();
+		bool new_value = NULL != gFloaterView->getFrontmostClosableFloater();
 		return new_value;
 	}
 };
@@ -579,7 +665,10 @@ class LLFileCloseWindow : public view_listener_t
 	bool handleEvent(const LLSD& userdata)
 	{
 		// If the IM container is focused, try to close the selected tab instead of the container -KC
-		LLIMFloaterContainer* im_container = LLIMFloaterContainer::getInstance();
+		// <FS:Ansariel> [FS communication UI]
+		//LLIMFloaterContainer* im_container = LLIMFloaterContainer::getInstance();
+		FSFloaterIMContainer* im_container = FSFloaterIMContainer::getInstance();
+		// </FS:Ansariel> [FS communication UI]
 		if (im_container && im_container->hasFocus())
 		{
 			LLFloater* floater = im_container->getActiveFloater();
@@ -613,8 +702,7 @@ class LLFileCloseWindow : public view_listener_t
 			}
 		}
 		
-		LLFloater::closeFocusedFloater();
-
+		LLFloater::closeFrontmostFloater();
 		return true;
 	}
 };
@@ -623,7 +711,7 @@ class LLFileEnableCloseAllWindows : public view_listener_t
 {
 	bool handleEvent(const LLSD& userdata)
 	{
-		bool open_children = gFloaterView->allChildrenClosed();
+		bool open_children = gFloaterView->allChildrenClosed() && !LLFloaterSnapshot::getInstance()->isInVisibleChain();
 		return !open_children;
 	}
 };
@@ -634,7 +722,7 @@ class LLFileCloseAllWindows : public view_listener_t
 	{
 		bool app_quitting = false;
 		gFloaterView->closeAllChildren(app_quitting);
-
+		LLFloaterSnapshot::getInstance()->closeFloater(app_quitting);
 		return true;
 	}
 };
@@ -1295,12 +1383,14 @@ void upload_new_resource(
 	if( LLAssetType::AT_TEXTURE == asset_type )
 	{
 		LLViewerStats::getInstance()->incStat(LLViewerStats::ST_UPLOAD_TEXTURE_COUNT );
+// <FS:CR> Temporary Texture Uploads
 		temp_upload = gSavedSettings.getBOOL("TemporaryUpload");
 		if (temp_upload)
 		{
 			name = "[temp] " + name;
+			gSavedSettings.setBOOL("TemporaryUpload", FALSE);
 		}
-		gSavedSettings.setBOOL("TemporaryUpload", FALSE);
+// </FS:CR>
 	}
 	else
 	if( LLAssetType::AT_ANIMATION == asset_type)
