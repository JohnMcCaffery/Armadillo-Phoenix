diff --git a/Source/indra/newview/fslslbridge.cpp b/Source/indra/newview/fslslbridge.cpp
index 066eed1..f06f036 100644
--- a/Source/indra/newview/fslslbridge.cpp
+++ b/Source/indra/newview/fslslbridge.cpp
@@ -4,7 +4,7 @@
  *
  * $LicenseInfo:firstyear=2011&license=fsviewerlgpl$
  * Phoenix Firestorm Viewer Source Code
- * Copyright (C) 2011-2012, The Phoenix Viewer Project, Inc.
+ * Copyright (C) 2011-2012, The Phoenix Firestorm Project, Inc.
  * 
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -20,7 +20,8 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  * 
- * The Phoenix Viewer Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * The Phoenix Firestorm Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * http://www.firestormviewer.org
  * $/LicenseInfo$
  */
 
@@ -47,11 +48,12 @@
 #include "llfoldertype.h"
 #include "llhttpclient.h"
 #include "llassetuploadresponders.h"
-// #include "llnearbychatbar.h"		// <FS:Zi> Dead code
 #include "llnotificationmanager.h"
 #include "llviewerobject.h"
 #include "llappearancemgr.h"
+#include "lltrans.h"
 #include "aoengine.h"
+#include "fscommon.h"
 
 #include <boost/regex.hpp>
 #include <string>
@@ -59,20 +61,13 @@
 #include <streambuf>
 
 
-//<FS_AO:Appears unused>
-//#define phoenix_folder_name "#Phoenix"
-
-#define LIB_ROCK_NAME "Rock - medium, round"
-
-//#define ROOT_FIRESTORM_FOLDER "#Firestorm"	//moved to llinventoryfunctions to synch with the AO object
 #define FS_BRIDGE_FOLDER "#LSL Bridge"
-#define FS_BRIDGE_NAME "#Firestorm LSL Bridge v"
 #define FS_BRIDGE_CONTAINER_FOLDER "Landscaping"
 #define FS_BRIDGE_MAJOR_VERSION 2
-#define FS_BRIDGE_MINOR_VERSION 3
+#define FS_BRIDGE_MINOR_VERSION 4
 #define FS_MAX_MINOR_VERSION 99
 
-//current script version is 2.0
+//current script version is 2.4
 const std::string UPLOAD_SCRIPT_CURRENT = "EBEDD1D2-A320-43f5-88CF-DD47BBCA5DFB.lsltxt";
 
 //
@@ -89,7 +84,7 @@ public:
 	virtual bool operator()(LLInventoryCategory* cat,
 							LLInventoryItem* item)
 	{
-		if(item)
+		if (item)
 		{
 			return (item->getName() == sName);
 		}
@@ -103,7 +98,7 @@ private:
 //
 // Bridge functionality
 //
-FSLSLBridge :: FSLSLBridge():
+FSLSLBridge::FSLSLBridge():
 					mBridgeCreating(false),
 					mpBridge(NULL),
 					mIsFirstCallDone(false)
@@ -122,31 +117,44 @@ FSLSLBridge :: FSLSLBridge():
 	//mpBridge = NULL;
 }
 
-FSLSLBridge :: ~FSLSLBridge()
+FSLSLBridge::~FSLSLBridge()
 {
 }
 
-bool FSLSLBridge :: lslToViewer(std::string message, LLUUID fromID, LLUUID ownerID)
+bool FSLSLBridge::lslToViewer(std::string message, LLUUID fromID, LLUUID ownerID)
 {
 	if (!gSavedSettings.getBOOL("UseLSLBridge"))
+	{
 		return false;
+	}
 
 	lldebugs << message << llendl;
 	
 	//<FS:TS> FIRE-962: Script controls for built-in AO
 	if ((message[0]) != '<')
+	{
 		return false; 		// quick exit if no leading <
+	}
 	S32 closebracket = message.find('>');
 	S32 firstblank = message.find(' ');
 	S32 tagend;
 	if (closebracket == std::string::npos)
+	{
 		tagend = firstblank;
+	}
 	else if (firstblank == std::string::npos)
+	{
 		tagend = closebracket;
-	else tagend = (closebracket < firstblank) ? closebracket : firstblank;
+	}
+	else
+	{
+		tagend = (closebracket < firstblank) ? closebracket : firstblank;
+	}
 	if (tagend == std::string::npos)
+	{
 		return false;
-	std::string tag = message.substr(0,tagend+1);
+	}
+	std::string tag = message.substr(0, tagend + 1);
 	std::string ourBridge = gSavedPerAccountSettings.getString("FSLSLBridgeUUID");
 	//</FS:TS> FIRE-962
 	
@@ -227,20 +235,22 @@ bool FSLSLBridge :: lslToViewer(std::string message, LLUUID fromID, LLUUID owner
 	
 	//<FS:TS> FIRE-962: Script controls for built-in AO
 	if (fromID != mBridgeUUID)
+	{
 		return false;		// ignore if not from the bridge
+	}
 	if (tag == "<clientAO ")
 	{
 		status = true;
-		S32 valuepos = message.find("state=")+6;
+		S32 valuepos = message.find("state=") + 6;
 		if (valuepos != std::string::npos)
 		{
-			if (message.substr(valuepos,2) == "on")
+			if (message.substr(valuepos, 2) == "on")
 			{
-				gSavedPerAccountSettings.setBOOL("UseAO",TRUE);
+				gSavedPerAccountSettings.setBOOL("UseAO", TRUE);
 			}
-			else if (message.substr(valuepos,3) == "off")
+			else if (message.substr(valuepos, 3) == "off")
 			{
-				gSavedPerAccountSettings.setBOOL("UseAO",FALSE);
+				gSavedPerAccountSettings.setBOOL("UseAO", FALSE);
 			}
 		}
 	}
@@ -248,50 +258,60 @@ bool FSLSLBridge :: lslToViewer(std::string message, LLUUID fromID, LLUUID owner
 	return status;
 }
 
-bool FSLSLBridge :: viewerToLSL(std::string message, FSLSLBridgeRequestResponder *responder)
+bool FSLSLBridge::viewerToLSL(std::string message, FSLSLBridgeRequestResponder* responder)
 {
 	if (!gSavedSettings.getBOOL("UseLSLBridge"))
+	{
 		return false;
+	}
 
 	if (responder == NULL)
+	{
 		responder = new FSLSLBridgeRequestResponder();
+	}
 	LLHTTPClient::post(mCurrentURL, LLSD(message), responder);
 
 	return true;
 }
 
-bool FSLSLBridge :: updateBoolSettingValue(std::string msgVal)
+bool FSLSLBridge::updateBoolSettingValue(std::string msgVal)
 {
 	std::string boolVal = "0";
 
 	if (gSavedSettings.getBOOL(msgVal))
+	{
 		boolVal = "1";
+	}
 
-	return viewerToLSL( msgVal+"|"+boolVal, new FSLSLBridgeRequestResponder());
+	return viewerToLSL(msgVal + "|" + boolVal, new FSLSLBridgeRequestResponder());
 }
 
-bool FSLSLBridge :: updateBoolSettingValue(std::string msgVal, bool contentVal)
+bool FSLSLBridge::updateBoolSettingValue(std::string msgVal, bool contentVal)
 {
 	std::string boolVal = "0";
 
 	if (contentVal)
+	{
 		boolVal = "1";
+	}
 
-	return viewerToLSL( msgVal+"|"+boolVal, new FSLSLBridgeRequestResponder());
+	return viewerToLSL(msgVal + "|" + boolVal, new FSLSLBridgeRequestResponder());
 }
 
 //
 //Bridge initialization
 //
-void FSLSLBridge :: recreateBridge()
+void FSLSLBridge::recreateBridge()
 {
 	if (!gSavedSettings.getBOOL("UseLSLBridge"))
+	{
 		return;
+	}
 
 	if (gSavedSettings.getBOOL("NoInventoryLibrary"))
 	{
 		llwarns << "Asked to create bridge, but we don't have a library. Aborting." << llendl;
-		reportToNearbyChat("Firestorm could not create an LSL bridge. Please enable your library and relog");
+		reportToNearbyChat(LLTrans::getString("fsbridge_no_library"));
 		mBridgeCreating = false;
 		return;
 	}
@@ -299,7 +319,7 @@ void FSLSLBridge :: recreateBridge()
 	if (mBridgeCreating)
 	{
 		llwarns << "Bridge creation already in progress, aborting new attempt." << llendl;
-		reportToNearbyChat("Bridge creation in process, can't start another. Please wait a few minutes.");
+		reportToNearbyChat(LLTrans::getString("fsbridge_already_creating"));
 		return;
 	}
 
@@ -319,15 +339,17 @@ void FSLSLBridge :: recreateBridge()
 	initCreationStep();
 }
 
-void FSLSLBridge :: initBridge()
+void FSLSLBridge::initBridge()
 {
 	if (!gSavedSettings.getBOOL("UseLSLBridge"))
+	{
 		return;
+	}
 
 	if (gSavedSettings.getBOOL("NoInventoryLibrary"))
 	{
 		llwarns << "Asked to create bridge, but we don't have a library. Aborting." << llendl;
-		reportToNearbyChat("Firestorm could not create an LSL bridge. Please enable your library and relog");
+		reportToNearbyChat(LLTrans::getString("fsbridge_no_library"));
 		mBridgeCreating = false;
 		return;
 	}
@@ -348,9 +370,9 @@ void FSLSLBridge :: initBridge()
 
 
 // Gets called by the Init, when inventory loaded.
-void FSLSLBridge :: startCreation()
+void FSLSLBridge::startCreation()
 {
-	if( !isAgentAvatarValid() )
+	if (!isAgentAvatarValid())
 	{
 		llwarns << "AgentAvatar is not valid" << llendl;
 		return;
@@ -392,16 +414,16 @@ void FSLSLBridge :: startCreation()
 	}
 }
 
-void FSLSLBridge :: initCreationStep()
+void FSLSLBridge::initCreationStep()
 {
 	mBridgeCreating = true;
 	//announce yourself
-	reportToNearbyChat("Creating the bridge. This might take a few moments, please wait");
+	reportToNearbyChat(LLTrans::getString("fsbridge_creating"));
 
 	createNewBridge();
 }
 
-void FSLSLBridge :: createNewBridge() 
+void FSLSLBridge::createNewBridge()
 {
 	//check if user has a bridge
 	LLUUID catID = findFSCategory();
@@ -415,7 +437,7 @@ void FSLSLBridge :: createNewBridge()
 		//copy the library item to inventory and put it on 
 		LLPointer<LLInventoryCallback> cb = new FSLSLBridgeRezCallback();
 		llinfos << "Cloning a new Bridge container from the Library..." << llendl;
-		copy_inventory_item(gAgent.getID(),libRock->getPermissions().getOwner(),libRock->getUUID(),catID,mCurrentFullName,cb);
+		copy_inventory_item(gAgent.getID(), libRock->getPermissions().getOwner(), libRock->getUUID(), catID, mCurrentFullName, cb);
 	}
 	else
 	{
@@ -426,7 +448,7 @@ void FSLSLBridge :: createNewBridge()
 	}
 }
 
-void FSLSLBridge :: processAttach(LLViewerObject *object, const LLViewerJointAttachment *attachment)
+void FSLSLBridge::processAttach(LLViewerObject* object, const LLViewerJointAttachment* attachment)
 {
 	llinfos << "Entering processAttach, checking the bridge container - gInventory.isInventoryUsable=" << gInventory.isInventoryUsable()<< llendl;
 
@@ -435,19 +457,19 @@ void FSLSLBridge :: processAttach(LLViewerObject *object, const LLViewerJointAtt
 		llwarns << "Bridge not created. Our bridge container attachment isn't named correctly." << llendl;
 		if (mBridgeCreating)
 		{
-			reportToNearbyChat("Bridge not created. Our bridge isn't named correctly. Please try recreating your bridge.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_failure_creation_bad_name"));
 			mBridgeCreating = false; //in case we interrupted the creation
 		}
 		return;
 	}
 
-	LLViewerInventoryItem *fsObject = gInventory.getItem(object->getAttachmentItemID());
+	LLViewerInventoryItem* fsObject = gInventory.getItem(object->getAttachmentItemID());
 	if (fsObject == NULL) //just in case
 	{
 		llwarns << "Bridge container is still NULL in inventory. Aborting." << llendl;
 		if (mBridgeCreating)
 		{
-			reportToNearbyChat("Bridge not created. Our bridge couldn't be found in inventory. Please try recreating your bridge.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_failure_creation_null"));
 			mBridgeCreating = false; //in case we interrupted the creation
 		}
 		return;
@@ -459,7 +481,7 @@ void FSLSLBridge :: processAttach(LLViewerObject *object, const LLViewerJointAtt
 		{
 			LLVOAvatarSelf::detachAttachmentIntoInventory(fsObject->getUUID());
 			llwarns << "Attempt to attach to bridge point an object other than current bridge" << llendl;
-			reportToNearbyChat("Bridge not attached. This is not the current bridge version. Please try recreating your bridge.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_failure_attach_wrong_object"));
 			if (mBridgeCreating)
 			{
 				mBridgeCreating = false; //in case we interrupted the creation
@@ -475,7 +497,7 @@ void FSLSLBridge :: processAttach(LLViewerObject *object, const LLViewerJointAtt
 			llwarns << "Bridge container isn't in the correct inventory location. Detaching it and aborting." << llendl;
 			if (mBridgeCreating)
 			{
-				reportToNearbyChat("Bridge not created. Our bridge wasn't found in the right inventory location. Please try recreating your bridge.");
+				reportToNearbyChat(LLTrans::getString("fs_bridge_failure_attach_wrong_location"));
 				mBridgeCreating = false; //in case we interrupted the creation
 			}
 			return;
@@ -492,7 +514,7 @@ void FSLSLBridge :: processAttach(LLViewerObject *object, const LLViewerJointAtt
 		llwarns << "Something unknown just got attached to bridge point, detaching and aborting." << llendl;
 		if (mBridgeCreating)
 		{
-			reportToNearbyChat("Bridge not created, something else was using the bridge attachment point. Please try recreating your bridge.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_failure_attach_point_in_use"));
 			mBridgeCreating = false; //in case we interrupted the creation
 		}
 		LLVOAvatarSelf::detachAttachmentIntoInventory(mpBridge->getUUID());
@@ -552,20 +574,28 @@ void FSLSLBridge::inventoryChanged(LLViewerObject* object,
 
 			if (item->getType() == LLAssetType::AT_LSL_TEXT)
 			{
-				if (item->getCreatorUUID() == gAgent.getID()) 
+				if (item->getCreatorUUID() == gAgent.getID())
+				{
 					isOurScript = true;
+				}
 				else //problem, not our script
+				{
 					llwarns << "The bridge inventory contains a script not created by user." << llendl;
+				}
 			}
 		}
 		if (count == 1 && isOurScript) //We attached a valid bridge. Run along.
+		{
 			return;
+		}
 		else 
 		{
-			reportToNearbyChat("The bridge inventory contains unexpected items.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_warning_unexpected_items"));
 			llwarns << "The bridge inventory contains items other than bridge script." << llendl;
 			if (!isOurScript)	//some junk but no valid script? Unlikely to happen, but lets add script anyway.
+			{
 				mBridgeCreating = true;
+			}
 			else //Let the script disable competitors 
 			{
 				return;
@@ -573,9 +603,11 @@ void FSLSLBridge::inventoryChanged(LLViewerObject* object,
 		}
 	}
 	else
+	{
 		llwarns << "Bridge not empty, but we're unable to retrieve contents." << llendl;
+	}
 
-		//modify the rock size and texture
+	//modify the rock size and texture
 	if (mBridgeCreating)
 	{
 		configureBridgePrim(object);
@@ -584,7 +616,7 @@ void FSLSLBridge::inventoryChanged(LLViewerObject* object,
 
 void FSLSLBridge::configureBridgePrim(LLViewerObject* object)
 {
-	if( !isBridgeValid() )
+	if (!isBridgeValid())
 	{
 		llwarns << "Bridge not valid" << llendl;
 		return;
@@ -606,7 +638,7 @@ void FSLSLBridge::configureBridgePrim(LLViewerObject* object)
 	create_script_inner(object);
 }
 
-void FSLSLBridge :: processDetach(LLViewerObject *object, const LLViewerJointAttachment *attachment)
+void FSLSLBridge::processDetach(LLViewerObject* object, const LLViewerJointAttachment* attachment)
 {
 	llinfos << "Entering processDetach" << llendl;
 
@@ -616,7 +648,7 @@ void FSLSLBridge :: processDetach(LLViewerObject *object, const LLViewerJointAtt
 		return;
 	}
 
-	LLViewerInventoryItem *fsObject = gInventory.getItem(object->getAttachmentItemID());
+	LLViewerInventoryItem* fsObject = gInventory.getItem(object->getAttachmentItemID());
 	if (fsObject == NULL) //just in case
 	{
 		llwarns << "Couldn't detach bridge. inventory object was NULL." << llendl;
@@ -633,11 +665,11 @@ void FSLSLBridge :: processDetach(LLViewerObject *object, const LLViewerJointAtt
 	if (mpBridge != NULL && mpBridge->getUUID() == fsObject->getUUID()) 
 	{
 		mpBridge = NULL;
-		reportToNearbyChat("Bridge detached.");
+		reportToNearbyChat(LLTrans::getString("fsbridge_detached"));
 		mIsFirstCallDone = false;
 		if (mBridgeCreating)
 		{
-			reportToNearbyChat("Bridge has not finished creating, you might need to recreate it before using.");
+			reportToNearbyChat(LLTrans::getString("fsbridge_warning_not_finished"));
 			mBridgeCreating = false; //in case we interrupted the creation
 		}
 	}
@@ -645,7 +677,7 @@ void FSLSLBridge :: processDetach(LLViewerObject *object, const LLViewerJointAtt
 	llinfos << "processDetach Finished" << llendl;
 }
 
-void FSLSLBridge :: setupBridgePrim(LLViewerObject *object)
+void FSLSLBridge::setupBridgePrim(LLViewerObject* object)
 {
 	lldebugs << "Entering bridge container setup..." << llendl;
 
@@ -679,15 +711,14 @@ void FSLSLBridge :: setupBridgePrim(LLViewerObject *object)
 	lldebugs << "End bridge container setup." << llendl;
 }
 
-void FSLSLBridge :: create_script_inner(LLViewerObject* object)
+void FSLSLBridge::create_script_inner(LLViewerObject* object)
 {
-	if( !isBridgeValid() )
+	if (!isBridgeValid())
 	{
 		llwarns << "Bridge no valid" << llendl;
 		return;
 	}
 
-
 	LLUUID catID = findFSCategory();
 
 	LLPointer<LLInventoryCallback> cb = new FSLSLBridgeScriptCallback();
@@ -708,14 +739,14 @@ void FSLSLBridge :: create_script_inner(LLViewerObject* object)
 //
 // Bridge rez callback
 //
-FSLSLBridgeRezCallback :: FSLSLBridgeRezCallback()
+FSLSLBridgeRezCallback::FSLSLBridgeRezCallback()
 {
 }
-FSLSLBridgeRezCallback :: ~FSLSLBridgeRezCallback()
+FSLSLBridgeRezCallback::~FSLSLBridgeRezCallback()
 {
 }
 
-void FSLSLBridgeRezCallback :: fire(const LLUUID& inv_item)
+void FSLSLBridgeRezCallback::fire(const LLUUID& inv_item)
 {
 	// this is the first attach - librock got copied and worn on hand - but the ID is now real.
 	if ((FSLSLBridge::instance().getBridge() != NULL) || inv_item.isNull() || !FSLSLBridge::instance().getBridgeCreating())
@@ -724,7 +755,7 @@ void FSLSLBridgeRezCallback :: fire(const LLUUID& inv_item)
 		return;
 	}
 
-	if( gAgentAvatarp.isNull() )
+	if (!isAgentAvatarValid())
 	{
 		llwarns << "Agent is 0, bailing out" << llendl;
 		return;
@@ -739,11 +770,13 @@ void FSLSLBridgeRezCallback :: fire(const LLUUID& inv_item)
 		FSLSLBridge::instance().setupBridgePrim(obj);
 	}
 	else
+	{
 		llinfos << "Bridge object not found yet, keep going" << llendl;
+	}
 
 	//detach from default and put on the right point
 	LLVOAvatarSelf::detachAttachmentIntoInventory(inv_item);
-	LLViewerInventoryItem *item = gInventory.getItem(inv_item);
+	LLViewerInventoryItem* item = gInventory.getItem(inv_item);
 
 	//from this point on, this is our bridge - accept no substitutes!
 	FSLSLBridge::instance().setBridge(item);
@@ -756,10 +789,10 @@ void FSLSLBridgeRezCallback :: fire(const LLUUID& inv_item)
 //
 // Bridge script creation callback
 //
-FSLSLBridgeScriptCallback :: FSLSLBridgeScriptCallback()
+FSLSLBridgeScriptCallback::FSLSLBridgeScriptCallback()
 {
 }
-FSLSLBridgeScriptCallback :: ~FSLSLBridgeScriptCallback()
+FSLSLBridgeScriptCallback::~FSLSLBridgeScriptCallback()
 {
 }
 
@@ -778,28 +811,33 @@ void FSLSLBridgeScriptCallback::fire(const LLUUID& inv_item)
 		return;
 	}
 	
-	if( gAgentAvatarp.isNull() )
+	if (!isAgentAvatarValid())
 	{
 		llwarns << "Agent is 0, bailing out" << llendl;
 		return;
 	}
 
-
 	gInventory.updateItem(item);
 	gInventory.notifyObservers();
 
-	LLViewerObject* obj( 0 );
+	LLViewerObject* obj(NULL);
 
-	if( FSLSLBridge::instance().isBridgeValid() )
+	if (FSLSLBridge::instance().isBridgeValid())
+	{
 		obj = gAgentAvatarp->getWornAttachment(FSLSLBridge::instance().getBridge()->getUUID());
+	}
 	else
+	{
 		llwarns << "Bridge non valid" << llendl;
+	}
 
 	//caps import 
 	std::string url;
 	
-	if( gAgent.getRegion() )
+	if (gAgent.getRegion())
+	{
 		url = gAgent.getRegion()->getCapability("UpdateScriptAgent");
+	}
 
 	std::string isMono = "mono";  //could also be "lsl2"
 	if (!url.empty() && obj != NULL)  
@@ -814,8 +852,10 @@ void FSLSLBridgeScriptCallback::fire(const LLUUID& inv_item)
 	{
 		//can't complete bridge creation - detach and remove object, remove script
 		//try to clean up and go away. Fail.
-		if( FSLSLBridge::instance().isBridgeValid() )
+		if (FSLSLBridge::instance().isBridgeValid())
+		{
 			LLVOAvatarSelf::detachAttachmentIntoInventory(FSLSLBridge::instance().getBridge()->getUUID());
+		}
 	
 		FSLSLBridge::instance().cleanUpBridge();
 		//also clean up script remains
@@ -831,31 +871,34 @@ std::string FSLSLBridgeScriptCallback::prepUploadFile()
 	std::string fName = gDirUtilp->getExpandedFilename(LL_PATH_FS_RESOURCES, UPLOAD_SCRIPT_CURRENT);
 	std::string fNew = gDirUtilp->getExpandedFilename(LL_PATH_CACHE,UPLOAD_SCRIPT_CURRENT);
 
-	LLFILE *fpIn = LLFile::fopen( fName, "rt" );
-	fseek( fpIn, 0, SEEK_END );
-	long lSize = ftell( fpIn );
-	rewind( fpIn );
+	LLFILE* fpIn = LLFile::fopen(fName, "rt");
+	fseek(fpIn, 0, SEEK_END);
+	long lSize = ftell(fpIn);
+	rewind(fpIn);
 
 	std::vector< char > vctData;
-	vctData.resize( lSize+1, 0 );
-	if( lSize != fread( &vctData[0], 1, lSize, fpIn ) )
+	vctData.resize(lSize + 1, 0);
+	if (lSize != fread(&vctData[0], 1, lSize, fpIn))
+	{
 		llwarns << "Size mismatch during read" << llendl;
+	}
 
-	LLFile::close( fpIn );
+	LLFile::close(fpIn);
 
 	std::string bridgeScript( (char const*)&vctData[0] );
 
 	std::string bridgekey = "BRIDGEKEY";
 	std::string newauth = LLUUID::generateNewID().asString();
-	bridgeScript.replace(bridgeScript.find(bridgekey),bridgekey.length(),newauth);
-	gSavedPerAccountSettings.setString("FSLSLBridgeUUID",newauth);
+	bridgeScript.replace(bridgeScript.find(bridgekey), bridgekey.length(), newauth);
+	gSavedPerAccountSettings.setString("FSLSLBridgeUUID", newauth);
 
-	LLFILE *fpOut = LLFile::fopen( fNew, "wt" );
+	LLFILE *fpOut = LLFile::fopen(fNew, "wt");
 
-	if( bridgeScript.size() != fwrite( bridgeScript.c_str(), 1, bridgeScript.size(), fpOut ) )
+	if (bridgeScript.size() != fwrite(bridgeScript.c_str(), 1, bridgeScript.size(), fpOut))
+	{
 		llwarns << "Size mismatch during write" << llendl;
-	LLFile::close( fpOut );
-
+	}
+	LLFile::close(fpOut);
 
 	return fNew;
 }
@@ -868,7 +911,7 @@ void FSLSLBridge :: checkBridgeScriptName(std::string fileName)
 		return;
 	}
 
-	if( !isBridgeValid() )
+	if (!isBridgeValid())
 	{
 		llwarns << "Bridge not valid (anymore)" << llendl;
 		cleanUpBridge();
@@ -876,7 +919,7 @@ void FSLSLBridge :: checkBridgeScriptName(std::string fileName)
 	}
 
 	//need to parse out the last length of a GUID and compare to saved possible names.
-	std::string fileOnly = fileName.substr(fileName.length()-UPLOAD_SCRIPT_CURRENT.length(), UPLOAD_SCRIPT_CURRENT.length());
+	std::string fileOnly = fileName.substr(fileName.length() - UPLOAD_SCRIPT_CURRENT.length(), UPLOAD_SCRIPT_CURRENT.length());
 
 	if (fileOnly == UPLOAD_SCRIPT_CURRENT)
 	{
@@ -890,7 +933,7 @@ void FSLSLBridge :: checkBridgeScriptName(std::string fileName)
 		}
 		//registerVOInventoryListener(obj, NULL);
 		obj->saveScript(gInventory.getItem(mScriptItemID), TRUE, false);
-		FSLSLBridgeCleanupTimer *objTimer = new FSLSLBridgeCleanupTimer((F32)1.0);
+		FSLSLBridgeCleanupTimer* objTimer = new FSLSLBridgeCleanupTimer((F32)1.0);
 		objTimer->startTimer();
 		//obj->doInventoryCallback();
 		//requestVOInventory();
@@ -904,25 +947,27 @@ BOOL FSLSLBridgeCleanupTimer::tick()
 	return TRUE;
 }
 
-void FSLSLBridge :: cleanUpBridge()
+void FSLSLBridge::cleanUpBridge()
 {
 	//something unexpected went wrong. Try to clean up and not crash.
 	llwarns << "Bridge object not found. Can't proceed with creation, exiting." << llendl;
-	reportToNearbyChat("Bridge object not found. Can't proceed with creation, exiting.");
+	reportToNearbyChat(LLTrans::getString("fsbridge_failure_not_found"));
 
-	if( isBridgeValid() )
+	if (isBridgeValid())
+	{
 		gInventory.purgeObject(mpBridge->getUUID());
+	}
 
 	gInventory.notifyObservers();
 	mpBridge = NULL;
 	mBridgeCreating = false;
 }
 
-void FSLSLBridge :: finishBridge()
+void FSLSLBridge::finishBridge()
 {
 	//announce yourself
 	llinfos << "Bridge created." << llendl;
-	reportToNearbyChat("Bridge created.");
+	reportToNearbyChat(LLTrans::getString("fsbridge_created"));
 
 	mBridgeCreating = false;
 	mIsFirstCallDone = false;
@@ -933,31 +978,33 @@ void FSLSLBridge :: finishBridge()
 //
 // Helper functions
 ///
-bool FSLSLBridge :: isItemAttached(LLUUID iID)
+bool FSLSLBridge::isItemAttached(LLUUID iID)
 {
 	return (isAgentAvatarValid() && gAgentAvatarp->isWearingAttachment(iID));
 }
 
-LLUUID FSLSLBridge :: findFSCategory()
+LLUUID FSLSLBridge::findFSCategory()
 {
 	if (!mBridgeFolderID.isNull())
+	{
 		return mBridgeFolderID;
+	}
 
 	LLUUID fsCatID;
 	LLUUID bridgeCatID;
 
 	fsCatID = gInventory.findCategoryByName(ROOT_FIRESTORM_FOLDER);
-	if(!fsCatID.isNull())
+	if (!fsCatID.isNull())
 	{
 		LLInventoryModel::item_array_t* items;
 		LLInventoryModel::cat_array_t* cats;
 		gInventory.getDirectDescendentsOf(fsCatID, cats, items);
-		if(cats)
+		if (cats)
 		{
 			S32 count = cats->count();
-			for(S32 i = 0; i < count; ++i)
+			for (S32 i = 0; i < count; ++i)
 			{
-				if(cats->get(i)->getName() == FS_BRIDGE_FOLDER)
+				if (cats->get(i)->getName() == FS_BRIDGE_FOLDER)
 				{
 					bridgeCatID = cats->get(i)->getUUID();
 				}
@@ -997,7 +1044,7 @@ LLUUID FSLSLBridge::findFSBridgeContainerCategory()
 		if (cats)
 		{
 			S32 count = cats->count();
-			for(S32 i = 0; i < count; ++i)
+			for (S32 i = 0; i < count; ++i)
 			{
 				if (cats->get(i)->getName() == "Objects")
 				{
@@ -1031,7 +1078,7 @@ LLUUID FSLSLBridge::findFSBridgeContainerCategory()
 	return LLUUID();
 }
 
-LLViewerInventoryItem* FSLSLBridge :: findInvObject(std::string obj_name, LLUUID catID, LLAssetType::EType type)
+LLViewerInventoryItem* FSLSLBridge::findInvObject(std::string obj_name, LLUUID catID, LLAssetType::EType type)
 {
 	LLViewerInventoryCategory::cat_array_t cats;
 	LLViewerInventoryItem::item_array_t items;
@@ -1040,12 +1087,12 @@ LLViewerInventoryItem* FSLSLBridge :: findInvObject(std::string obj_name, LLUUID
 	LLUUID itemID;
 	NameCollectFunctor namefunctor(obj_name);
 
-	gInventory.collectDescendentsIf(catID,cats,items,FALSE,namefunctor);
+	gInventory.collectDescendentsIf(catID, cats, items, FALSE, namefunctor);
 
 	for (S32 iIndex = 0; iIndex < items.count(); iIndex++)
 	{
 		const LLViewerInventoryItem* itemp = items.get(iIndex);
-		if (!itemp->getIsLinkType()  && (itemp->getType() == LLAssetType::AT_OBJECT))
+		if (!itemp->getIsLinkType() && (itemp->getType() == LLAssetType::AT_OBJECT))
 		{
 			itemID = itemp->getUUID();
 			break;
@@ -1060,30 +1107,11 @@ LLViewerInventoryItem* FSLSLBridge :: findInvObject(std::string obj_name, LLUUID
 	return NULL;
 }
 
-void FSLSLBridge :: reportToNearbyChat(std::string message)
-// AO small utility method for chat alerts.
-{	
-	LLChat chat;
-	chat.mText = message;
-	chat.mSourceType = CHAT_SOURCE_SYSTEM;
-	LLSD args;
-	args["type"] = LLNotificationsUI::NT_NEARBYCHAT;
-	LLNotificationsUI::LLNotificationManager* notification_manager = LLNotificationsUI::LLNotificationManager::getInstance();
-	if (notification_manager)
-	{
-		notification_manager->onChat(chat, args);
-	}
-	else
-	{
-		llwarns << "Tried to write notification to chat, but LLNotificationManager was NULL!" << llendl;
-	}
-}
-
-void FSLSLBridge :: cleanUpBridgeFolder(std::string nameToCleanUp)
+void FSLSLBridge::cleanUpBridgeFolder(std::string nameToCleanUp)
 {
 	llinfos << "Cleaning leftover scripts and bridges for folder " << nameToCleanUp << llendl;
 	
-	if( !isBridgeValid() )
+	if (!isBridgeValid())
 	{
 		llwarns << "Bridge no valid" << llendl;
 		return;
@@ -1096,12 +1124,12 @@ void FSLSLBridge :: cleanUpBridgeFolder(std::string nameToCleanUp)
 	//find all bridge and script duplicates and delete them
 	//NameCollectFunctor namefunctor(mCurrentFullName);
 	NameCollectFunctor namefunctor(nameToCleanUp);
-	gInventory.collectDescendentsIf(catID,cats,items,FALSE,namefunctor);
+	gInventory.collectDescendentsIf(catID, cats, items, FALSE, namefunctor);
 
 	for (S32 iIndex = 0; iIndex < items.count(); iIndex++)
 	{
 		const LLViewerInventoryItem* itemp = items.get(iIndex);
-		if (!itemp->getIsLinkType()  && (itemp->getUUID() != mpBridge->getUUID()))
+		if (!itemp->getIsLinkType() && (itemp->getUUID() != mpBridge->getUUID()))
 		{
 			gInventory.purgeObject(itemp->getUUID());
 		}
@@ -1109,24 +1137,28 @@ void FSLSLBridge :: cleanUpBridgeFolder(std::string nameToCleanUp)
 	gInventory.notifyObservers();
 }
 
-void FSLSLBridge :: cleanUpBridgeFolder()
+void FSLSLBridge::cleanUpBridgeFolder()
 {
 	cleanUpBridgeFolder(mCurrentFullName);
 }
 
-void FSLSLBridge :: cleanUpOldVersions()
+void FSLSLBridge::cleanUpOldVersions()
 {
 	std::string mProcessingName;
 
-	for(int i = 1; i <= FS_BRIDGE_MAJOR_VERSION; i++)
+	for (S32 i = 1; i <= FS_BRIDGE_MAJOR_VERSION; i++)
 	{
-		int minor_tip;
-		if (i < FS_BRIDGE_MAJOR_VERSION) 
+		S32 minor_tip;
+		if (i < FS_BRIDGE_MAJOR_VERSION)
+		{
 			minor_tip = FS_MAX_MINOR_VERSION;
+		}
 		else
+		{
 			minor_tip = FS_BRIDGE_MINOR_VERSION;
+		}
 
-		for (int j = 0; j < minor_tip; j++)
+		for (S32 j = 0; j < minor_tip; j++)
 		{
 			std::stringstream sstr;
 	
@@ -1141,7 +1173,7 @@ void FSLSLBridge :: cleanUpOldVersions()
 	}
 }
 
-bool FSLSLBridge :: isOldBridgeVersion(LLInventoryItem *item)
+bool FSLSLBridge::isOldBridgeVersion(LLInventoryItem* item)
 {
 	//if (!item)
 	//	return false;
@@ -1166,7 +1198,7 @@ bool FSLSLBridge :: isOldBridgeVersion(LLInventoryItem *item)
 	return false;
 }
 
-void FSLSLBridge :: detachOtherBridges()
+void FSLSLBridge::detachOtherBridges()
 {
 	LLUUID catID = findFSCategory();
 	LLViewerInventoryCategory::cat_array_t cats;
