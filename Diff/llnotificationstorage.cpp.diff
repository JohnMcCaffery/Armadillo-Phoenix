diff --git a/Source/indra/newview/llnotificationstorage.cpp b/Source/indra/newview/llnotificationstorage.cpp
index 0996f54..d876cef 100644
--- a/Source/indra/newview/llnotificationstorage.cpp
+++ b/Source/indra/newview/llnotificationstorage.cpp
@@ -85,6 +85,11 @@ bool LLPersistentNotificationStorage::onPersistentChannelChanged(const LLSD& pay
 	return false;
 }
 
+// Storing or loading too many persistent notifications will severely hurt 
+// viewer load times, possibly to the point of failing to log in. Example case
+// from MAINT-994 is 821 notifications. 
+static const S32 MAX_PERSISTENT_NOTIFICATIONS = 250;
+
 void LLPersistentNotificationStorage::saveNotifications()
 {
 	// TODO - think about save optimization.
@@ -115,6 +120,13 @@ void LLPersistentNotificationStorage::saveNotifications()
 		}
 
 		data.append(notification->asLLSD());
+
+		if (data.size() >= MAX_PERSISTENT_NOTIFICATIONS)
+		{
+			llwarns << "Too many persistent notifications."
+					<< " Saved " << MAX_PERSISTENT_NOTIFICATIONS << " of " << history_channel->size() << " persistent notifications." << llendl;
+			break;
+		}
 	}
 
 	LLPointer<LLSDFormatter> formatter = new LLSDXMLFormatter();
@@ -125,9 +137,6 @@ void LLPersistentNotificationStorage::loadNotifications()
 {
 	LLResponderRegistry::registerResponders();
 
-	LLNotifications::instance().getChannel("Persistent")->
-		connectChanged(boost::bind(&LLPersistentNotificationStorage::onPersistentChannelChanged, this, _1));
-
 	llifstream notify_file(mFileName.c_str());
 	if (!notify_file.is_open())
 	{
@@ -159,7 +168,7 @@ void LLPersistentNotificationStorage::loadNotifications()
 		findChannelByID(LLUUID(gSavedSettings.getString("NotificationChannelUUID"))));
 
 	LLNotifications& instance = LLNotifications::instance();
-
+	S32 processed_notifications = 0;
 	LLNotificationWellWindow::getInstance()->lockWindowUpdate();
 
 	for (LLSD::array_const_iterator notification_it = data.beginArray();
@@ -167,25 +176,44 @@ void LLPersistentNotificationStorage::loadNotifications()
 		++notification_it)
 	{
 		LLSD notification_params = *notification_it;
-		LLNotificationPtr notification(new LLNotification(notification_params));
 
-		LLNotificationResponderPtr responder(LLResponderRegistry::
-			createResponder(notification_params["name"], notification_params["responder"]));
-		notification->setResponseFunctor(responder);
+		if (instance.templateExists(notification_params["name"].asString()))
+		{
+			LLNotificationPtr notification(new LLNotification(notification_params));
 
-		instance.add(notification);
+			LLNotificationResponderPtr responder(LLResponderRegistry::
+				createResponder(notification_params["name"], notification_params["responder"]));
+			notification->setResponseFunctor(responder);
 
-		// hide script floaters so they don't confuse the user and don't overlap startup toast
-		LLScriptFloaterManager::getInstance()->setFloaterVisible(notification->getID(), false);
+			instance.add(notification);
 
-		if(notification_channel)
+			// hide script floaters so they don't confuse the user and don't overlap startup toast
+			LLScriptFloaterManager::getInstance()->setFloaterVisible(notification->getID(), false);
+
+			if(notification_channel)
+			{
+				// hide saved toasts so they don't confuse the user
+				notification_channel->hideToast(notification->getID());
+			}
+		}
+		else
+		{
+			llwarns << "Failed to find template for persistent notification " << notification_params["name"].asString() << llendl;
+		}
+
+		++processed_notifications;
+		if (processed_notifications >= MAX_PERSISTENT_NOTIFICATIONS)
 		{
-			// hide saved toasts so they don't confuse the user
-			notification_channel->hideToast(notification->getID());
+			llwarns << "Too many persistent notifications."
+					<< " Processed " << MAX_PERSISTENT_NOTIFICATIONS << " of " << data.size() << " persistent notifications." << llendl;
+			break;
 		}
 	}
 
 	LLNotificationWellWindow::getInstance()->unlockWindowUpdate();
+
+	LLNotifications::instance().getChannel("Persistent")->
+		connectChanged(boost::bind(&LLPersistentNotificationStorage::onPersistentChannelChanged, this, _1));
 }
 
 //////////////////////////////////////////////////////////////////////////
