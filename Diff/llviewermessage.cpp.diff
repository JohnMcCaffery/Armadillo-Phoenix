diff --git a/Source/indra/newview/llviewermessage.cpp b/Source/indra/newview/llviewermessage.cpp
index 0f4fa06..25eec1a 100644
--- a/Source/indra/newview/llviewermessage.cpp
+++ b/Source/indra/newview/llviewermessage.cpp
@@ -94,6 +94,7 @@
 #include "llviewermenu.h"
 #include "llviewerinventory.h"
 #include "llviewerjoystick.h"
+#include "llviewerremotecontrol.h"
 #include "llviewernetwork.h" // <FS:AW opensim currency support>
 #include "llviewerobjectlist.h"
 #include "llviewerparcelmgr.h"
@@ -6146,6 +6147,78 @@ void process_set_follow_cam_properties(LLMessageSystem *mesgsys, void **user_dat
 //end Ventrella 
 
 
+void process_set_window(LLMessageSystem *msg, void ** window)
+{
+	LLMatrix4 mat;
+	LLVector4 r1;
+	LLVector4 r2;
+	LLVector4 r3;
+	LLVector4 r4;
+
+	msg->getVector4("Window", "MatR1", r1);
+	msg->getVector4("Window", "MatR2", r2);
+	msg->getVector4("Window", "MatR3", r3);
+	msg->getVector4("Window", "MatR4", r4);
+	mat.initRows(r1, r2, r3, r4);
+
+	LLVector3 diag(r1.mV[0], r2.mV[1], r3.mV[2]);
+	LLVector3 other(r1.mV[2], r2.mV[2], r3.mV[3]);
+
+	gSavedSettings.setVector3("PerspectiveMatrixDiagonal", diag);
+	gSavedSettings.setVector3("PerspectiveMatrixOther", other);
+
+	LLVector3 position;
+	LLVector3 positionDelta;
+	LLVector3 lookAt;
+	LLVector3 lookAtDelta;
+	msg->getVector3("Window", "Position", position);
+	msg->getVector3("Window", "PositionDelta", positionDelta);
+	msg->getVector3("Window", "LookAt", lookAt);
+	msg->getVector3("Window", "LookAtDelta", lookAtDelta);
+
+	U32 tickLength;
+	msg->getU32("Window", "TickLength", tickLength);
+
+	LLUUID		source_id;
+	msg->getUUID("Window", "Source", source_id);
+	
+	LLViewerCamera::setManualProjectionMatrixSet(true);
+	LLViewerCamera::setManualProjectionMatrix(mat);
+
+	LLViewerObject* objectp = gObjectList.findObject(source_id);
+	if (objectp)
+	{
+		objectp->setFlagsWithoutUpdate(FLAGS_CAMERA_SOURCE, TRUE);
+	}
+	LLFollowCamMgr::setWindow(source_id, position, positionDelta, lookAt, lookAtDelta, tickLength);
+}
+
+void process_clear_window(LLMessageSystem *mesgsys, void **user_data)
+{
+	LLUUID		source_id;
+
+	mesgsys->getUUIDFast(_PREHASH_ObjectData, _PREHASH_ObjectID, source_id);
+
+	LLFollowCamMgr::removeScriptFollowCam(source_id);
+	LLViewerCamera::setManualProjectionMatrixSet(false);
+}
+
+void process_remote_control(LLMessageSystem *msg, void **user_data) {
+	LLVector3 delta;
+	F32 pitch;
+	F32 yaw;
+
+	msg->getVector3("Delta", "Position", delta);
+	msg->getF32("Delta", "Pitch", pitch);
+	msg->getF32("Delta", "Yaw", yaw);
+
+	LLViewerRemoteControl::getInstance()->Update(delta, pitch, yaw);
+}
+
+void process_clear_remote_control(LLMessageSystem *mesgys, void **user_data) {
+	LLViewerRemoteControl::getInstance()->Reset();
+}
+
 // Culled from newsim lltask.cpp
 void process_name_value(LLMessageSystem *mesgsys, void **user_data)
 {
