diff --git a/Source/indra/newview/llagent.cpp b/Source/indra/newview/llagent.cpp
index bb4747d..2463345 100644
--- a/Source/indra/newview/llagent.cpp
+++ b/Source/indra/newview/llagent.cpp
@@ -35,6 +35,7 @@
 #include "llagentlistener.h"
 #include "llagentwearables.h"
 #include "llagentui.h"
+#include "llappearancemgr.h"
 #include "llanimationstates.h"
 #include "llcallingcard.h"
 #include "llcapabilitylistener.h"
@@ -56,12 +57,11 @@
 #include "llnavigationbar.h" // to show/hide navigation bar when changing mouse look state
 // <FS:Zi> Remove floating chat bar
 //#include "llnearbychatbar.h"
-#include "llnearbychathub.h"
+#include "fsnearbychathub.h"
 // </FS:Zi>
 #include "llspeakers.h"
 // [/SL:KB]
 #include "llnotificationsutil.h"
-#include "llpanelpathfindingrebakenavmesh.h"
 #include "llpaneltopinfobar.h"
 #include "llparcel.h"
 #include "llrendersphere.h"
@@ -115,7 +115,7 @@
 
 #include "boost/foreach.hpp" // <FS:LO> for boost::foreach
 
-using namespace LLVOAvatarDefines;
+using namespace LLAvatarAppearanceDefines;
 
 extern LLMenuBarGL* gMenuBarView;
 
@@ -609,7 +609,10 @@ void LLAgent::moveAt(S32 direction, bool reset)
 
 	if (reset)
 	{
-		gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+		//gAgentCamera.resetView();
+		gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 	}
 }
 
@@ -635,7 +638,10 @@ void LLAgent::moveAtNudge(S32 direction)
 		setControlFlags(AGENT_CONTROL_NUDGE_AT_NEG);
 	}
 
-	gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+	//gAgentCamera.resetView();
+	gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 }
 
 //-----------------------------------------------------------------------------
@@ -660,7 +666,10 @@ void LLAgent::moveLeft(S32 direction)
 		setControlFlags(AGENT_CONTROL_LEFT_NEG | AGENT_CONTROL_FAST_LEFT);
 	}
 
-	gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+	//gAgentCamera.resetView();
+	gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 }
 
 //-----------------------------------------------------------------------------
@@ -685,7 +694,10 @@ void LLAgent::moveLeftNudge(S32 direction)
 		setControlFlags(AGENT_CONTROL_NUDGE_LEFT_NEG);
 	}
 
-	gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+	//gAgentCamera.resetView();
+	gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 }
 
 //-----------------------------------------------------------------------------
@@ -705,7 +717,7 @@ void LLAgent::moveUp(S32 direction)
 	{
 		setControlFlags(AGENT_CONTROL_UP_POS | AGENT_CONTROL_FAST_UP);
 		// <FS:Ansariel> Chalice Yao's crouch toggle
-		gAgentCamera.resetView();
+		gAgentCamera.resetView(TRUE, FALSE, TRUE);
 		// </FS:Ansariel>
 	}
 	else if (direction < 0)
@@ -714,7 +726,7 @@ void LLAgent::moveUp(S32 direction)
 		// <FS:Ansariel> Chalice Yao's crouch toggle
 		if (!gSavedSettings.getBOOL("FSCrouchToggleStatus") || !gSavedSettings.getBOOL("FSCrouchToggle"))
 		{
-			gAgentCamera.resetView();
+			gAgentCamera.resetView(TRUE, FALSE, TRUE);
 		}
 		// </FS:Ansariel>
 	}
@@ -742,7 +754,10 @@ void LLAgent::moveYaw(F32 mag, bool reset_view)
 
     if (reset_view)
 	{
-        gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+		//gAgentCamera.resetView();
+        gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 	}
 }
 
@@ -866,13 +881,23 @@ void LLAgent::toggleFlying()
 		LLToolPie::instance().stopClickToWalk();
 	}
 
+	// <FS:Ansariel> Chalice Yao's crouch toggle
+	if (gSavedSettings.getBOOL("FSCrouchToggleStatus"))
+	{
+		gSavedSettings.setBOOL("FSCrouchToggleStatus", FALSE);
+	}
+	// </FS:Ansariel>
+
 	BOOL fly = !gAgent.getFlying();
 
 	gAgent.mMoveTimer.reset();
 	LLFirstUse::notMoving(false);
 
 	gAgent.setFlying( fly );
-	gAgentCamera.resetView();
+// <FS:CR> FIRE-8798: Option to prevent camera reset on movement
+	//gAgentCamera.resetView();
+	gAgentCamera.resetView(TRUE, FALSE, TRUE);
+// </FS:CR>
 }
 
 // static
@@ -906,6 +931,29 @@ void LLAgent::standUp()
 }
 
 
+void LLAgent::handleServerBakeRegionTransition(const LLUUID& region_id)
+{
+	llinfos << "called" << llendl;
+
+
+	// Old-style appearance entering a server-bake region.
+	if (isAgentAvatarValid() &&
+		!gAgentAvatarp->isUsingServerBakes() &&
+		(mRegionp->getCentralBakeVersion()>0))
+	{
+		llinfos << "update requested due to region transition" << llendl;
+		LLAppearanceMgr::instance().requestServerAppearanceUpdate();
+	}
+	// new-style appearance entering a non-bake region,
+	// need to check for existence of the baking service.
+	else if (isAgentAvatarValid() &&
+			 gAgentAvatarp->isUsingServerBakes() &&
+			 mRegionp->getCentralBakeVersion()==0)
+	{
+		gAgentAvatarp->checkForUnsupportedServerBakeAppearance();
+	}
+}
+
 //-----------------------------------------------------------------------------
 // setRegion()
 //-----------------------------------------------------------------------------
@@ -925,7 +973,7 @@ void LLAgent::setRegion(LLViewerRegion *regionp)
 		if (mRegionp)
 		{
 			// NaCl - Antispam Registry clear anti-spam queues when changing regions
-			NACLAntiSpamRegistry::purgeAllQueues();
+			NACLAntiSpamRegistry::instance().purgeAllQueues();
 			// NaCl End
 
 			// We've changed regions, we're now going to change our agent coordinate frame.
@@ -1008,6 +1056,19 @@ void LLAgent::setRegion(LLViewerRegion *regionp)
 	{
 		LLEnvManagerNew::instance().onRegionCrossing();
 	}
+
+	// If the newly entered region is using server bakes, and our
+	// current appearance is non-baked, request appearance update from
+	// server.
+	if (mRegionp->capabilitiesReceived())
+	{
+		handleServerBakeRegionTransition(mRegionp->getRegionID());
+	}
+	else
+	{
+		// Need to handle via callback after caps arrive.
+		mRegionp->setCapabilitiesReceivedCallback(boost::bind(&LLAgent::handleServerBakeRegionTransition,this,_1));
+	}
 }
 
 
@@ -1938,13 +1999,11 @@ void LLAgent::autoPilot(F32 *delta_yaw)
 
 		*delta_yaw = yaw;
 
-		// Compute when to start slowing down and when to stop
-		F32 stop_distance = mAutoPilotStopDistance;
+		// Compute when to start slowing down
 		F32 slow_distance;
 		if (getFlying())
 		{
 			slow_distance = llmax(6.f, mAutoPilotStopDistance + 5.f);
-			stop_distance = llmax(2.f, mAutoPilotStopDistance);
 		}
 		else
 		{
@@ -2143,7 +2202,7 @@ void LLAgent::startTyping()
 	}
 	// <FS:Zi> Remove floating chat bar
 	// LLNearbyChatBar::getInstance()->sendChatFromViewer("", CHAT_TYPE_START, FALSE);
-	LLNearbyChat::instance().sendChatFromViewer("", CHAT_TYPE_START, FALSE);
+	FSNearbyChat::instance().sendChatFromViewer("", CHAT_TYPE_START, FALSE);
 	// </FS:Zi>
 }
 
@@ -2158,7 +2217,7 @@ void LLAgent::stopTyping()
 		sendAnimationRequest(ANIM_AGENT_TYPE, ANIM_REQUEST_STOP);
 	// <FS:Zi> Remove floating chat bar
 	// LLNearbyChatBar::getInstance()->sendChatFromViewer("", CHAT_TYPE_STOP, FALSE);
-	LLNearbyChat::instance().sendChatFromViewer("", CHAT_TYPE_STOP, FALSE);
+	FSNearbyChat::instance().sendChatFromViewer("", CHAT_TYPE_STOP, FALSE);
 	// </FS:Zi>
 	}
 }
@@ -2225,7 +2284,7 @@ void LLAgent::endAnimationUpdateUI()
 		// <FS:Zi> Unhide chat bar, unless autohide is enabled
 		gSavedSettings.setBOOL("MouseLookEnabled",FALSE);
 		if(!gSavedSettings.getBOOL("AutohideChatBar"))
-			LLNearbyChat::instance().showDefaultChatBar(TRUE);
+			FSNearbyChat::instance().showDefaultChatBar(TRUE);
 		// </FS:Zi>
 
 		gToolBarView->setToolBarsVisible(true);
@@ -2250,7 +2309,6 @@ void LLAgent::endAnimationUpdateUI()
 		LLChicletBar::getInstance()->setVisible(TRUE);
 
 		LLPanelStandStopFlying::getInstance()->setVisible(TRUE);
-		LLPanelPathfindingRebakeNavmesh::getInstance()->setVisible(TRUE);
 
 		LLToolMgr::getInstance()->setCurrentToolset(gBasicToolset);
 
@@ -2356,6 +2414,12 @@ void LLAgent::endAnimationUpdateUI()
 	//---------------------------------------------------------------------
 	if (gAgentCamera.getCameraMode() == CAMERA_MODE_MOUSELOOK)
 	{
+
+		// <FS:PP> FIRE-8868: Show UI in mouselook
+		if(!gSavedSettings.getBOOL("FSShowInterfaceInMouselook"))
+		{
+		// </FS:PP>
+
 		// clean up UI
 		// first show anything hidden by UI toggle
 		gViewerWindow->setUIVisibility(TRUE);
@@ -2377,16 +2441,17 @@ void LLAgent::endAnimationUpdateUI()
 		LLChicletBar::getInstance()->setVisible(FALSE);
 
 		LLPanelStandStopFlying::getInstance()->setVisible(FALSE);
-		LLPanelPathfindingRebakeNavmesh::getInstance()->setVisible(FALSE);
 
 		// <FS:Zi> Hide chat bar in mouselook mode, unless there is text in it
 		gSavedSettings.setBOOL("MouseLookEnabled",TRUE);
-		if(LLNearbyChat::instance().defaultChatBarIsIdle())
-			LLNearbyChat::instance().showDefaultChatBar(FALSE);
+		if(FSNearbyChat::instance().defaultChatBarIsIdle())
+			FSNearbyChat::instance().showDefaultChatBar(FALSE);
 		// </FS:Zi>
 
 		// clear out camera lag effect
-		gAgentCamera.clearCameraLag();
+		// <FS:PP> Commented out and moved lower for FIRE-8868: Show UI in mouselook
+		// gAgentCamera.clearCameraLag();
+		// </FS:PP>
 
 		// JC - Added for always chat in third person option
 		gFocusMgr.setKeyboardFocus(NULL);
@@ -2395,10 +2460,12 @@ void LLAgent::endAnimationUpdateUI()
 
 		mViewsPushed = TRUE;
 
-		if (mMouselookModeInSignal)
-		{
-			(*mMouselookModeInSignal)();
-		}
+		// <FS:PP> Commented out and moved lower for FIRE-8868: Show UI in mouselook
+		// if (mMouselookModeInSignal)
+		// {
+		//	(*mMouselookModeInSignal)();
+		// }
+		// </FS:PP>
 
 		// hide all floaters except the mini map
 
@@ -2427,12 +2494,26 @@ void LLAgent::endAnimationUpdateUI()
 		gFloaterView->pushVisibleAll(FALSE, skip_list);
 #endif
 
+		// <FS:PP> FIRE-8868: Show UI in mouselook
+		gConsole->setVisible( TRUE );
+
+		} // Check ends here, anything below will be executed regardless of its state
+
+		gAgentCamera.clearCameraLag();
+
+		if (mMouselookModeInSignal)
+		{
+			(*mMouselookModeInSignal)();
+		}
+		// </FS:PP>
+
 		if( gMorphView )
 		{
 			gMorphView->setVisible(FALSE);
 		}
 
-		gConsole->setVisible( TRUE );
+		// <FS:PP> Commented out and moved few lines higher for FIRE-8868: Show UI in mouselook
+		// gConsole->setVisible( TRUE );
 
 		if (isAgentAvatarValid())
 		{
@@ -2589,7 +2670,7 @@ void LLAgent::setStartPosition( U32 location_id )
     if (isAgentAvatarValid())
     {
         // the z height is at the agent's feet
-        agent_pos.mV[VZ] -= 0.5f * gAgentAvatarp->mBodySize.mV[VZ];
+        agent_pos.mV[VZ] -= 0.5f * (gAgentAvatarp->mBodySize.mV[VZ] + gAgentAvatarp->mAvatarOffset.mV[VZ]);
     }
 
     agent_pos.mV[VX] = llclamp( agent_pos.mV[VX], INSET, REGION_WIDTH - INSET );
@@ -2816,7 +2897,7 @@ public:
 	virtual ~LLMaturityPreferencesResponder();
 
 	virtual void result(const LLSD &pContent);
-	virtual void error(U32 pStatus, const std::string& pReason);
+	virtual void errorWithContent(U32 pStatus, const std::string& pReason, const LLSD& pContent);
 
 protected:
 
@@ -2854,11 +2935,11 @@ void LLMaturityPreferencesResponder::result(const LLSD &pContent)
 	mAgent->handlePreferredMaturityResult(actualMaturity);
 }
 
-void LLMaturityPreferencesResponder::error(U32 pStatus, const std::string& pReason)
+void LLMaturityPreferencesResponder::errorWithContent(U32 pStatus, const std::string& pReason, const LLSD& pContent)
 {
 	llwarns << "while attempting to change maturity preference from '" << LLViewerRegion::accessToString(mPreviousMaturity)
-		<< "' to '" << LLViewerRegion::accessToString(mPreferredMaturity) << "', we got an error because '"
-		<< pReason << "' [status:" << pStatus << "]" << llendl;
+		<< "' to '" << LLViewerRegion::accessToString(mPreferredMaturity) << "', we got an error with [status:"
+		<< pStatus << "]: " << (pContent.isDefined() ? pContent : LLSD(pReason)) << llendl;
 	mAgent->handlePreferredMaturityError();
 }
 
@@ -3048,7 +3129,7 @@ void LLAgent::sendMaturityPreferenceToServer(U8 pPreferredMaturity)
 		// If we don't have a region, report it as an error
 		if (getRegion() == NULL)
 		{
-			responderPtr->error(0U, "region is not defined");
+			responderPtr->errorWithContent(0U, "region is not defined", LLSD());
 		}
 		else
 		{
@@ -3058,7 +3139,8 @@ void LLAgent::sendMaturityPreferenceToServer(U8 pPreferredMaturity)
 			// If the capability is not defined, report it as an error
 			if (url.empty())
 			{
-				responderPtr->error(0U, "capability 'UpdateAgentInformation' is not defined for region");
+				responderPtr->errorWithContent(0U, 
+							"capability 'UpdateAgentInformation' is not defined for region", LLSD());
 			}
 			else
 			{
@@ -3782,9 +3864,6 @@ class LLAgentGroupDataUpdateViewerNode : public LLHTTPNode
 				update_group_floaters(group.mID);
 			}
 		}
-
-		// <FS:Ansariel> Fire event for group title overview
-		gAgent.fireEvent(new LLOldEvents::LLEvent(&gAgent, "update grouptitle list"), "");
 	}
 };
 
@@ -4014,7 +4093,7 @@ void LLAgent::processAgentCachedTextureResponse(LLMessageSystem *mesgsys, void *
 		return;
 	}
 
-	if (isAgentAvatarValid() && !gAgentAvatarp->isUsingBakedTextures())
+	if (isAgentAvatarValid() && gAgentAvatarp->isEditingAppearance())
 	{
 		// ignore baked textures when in customize mode
 		return;
@@ -4038,7 +4117,7 @@ void LLAgent::processAgentCachedTextureResponse(LLMessageSystem *mesgsys, void *
 
 		if ((S32)texture_index < TEX_NUM_INDICES )
 		{	
-			const LLVOAvatarDictionary::TextureEntry *texture_entry = LLVOAvatarDictionary::instance().getTexture((ETextureIndex)texture_index);
+			const LLAvatarAppearanceDictionary::TextureEntry *texture_entry = LLAvatarAppearanceDictionary::instance().getTexture((ETextureIndex)texture_index);
 			if (texture_entry)
 			{
 				EBakedTextureIndex baked_index = texture_entry->mBakedTextureIndex;
@@ -4498,7 +4577,6 @@ void LLAgent::doTeleportViaLocation(const LLVector3d& pos_global)
 {
 	LLViewerRegion* regionp = getRegion();
 
-	// <FS:Ansariel> Possible crash fix
 	if (!regionp)
 	{
 		return;
@@ -4514,7 +4592,10 @@ void LLAgent::doTeleportViaLocation(const LLVector3d& pos_global)
 			(F32)(pos_global.mdV[VX] - region_origin.mdV[VX]),
 			(F32)(pos_global.mdV[VY] - region_origin.mdV[VY]),
 			(F32)(pos_global.mdV[VZ]));
-		teleportRequest(handle, pos_local);
+// <FS:CR> Aurora-sim var region teleports
+		//teleportRequest(handle, pos_local);
+		teleportRequest(info->getHandle(), pos_local);
+// </FS:CR>
 	}
 	else if(regionp && teleportCore(isLocal))
 	{
@@ -4570,6 +4651,11 @@ void LLAgent::doTeleportViaLocationLookAt(const LLVector3d& pos_global)
 	mbTeleportKeepsLookAt = true;
 	gAgentCamera.setFocusOnAvatar(FALSE, ANIMATE);	// detach camera form avatar, so it keeps direction
 	U64 region_handle = to_region_handle(pos_global);
+// <FS:CR> Aurora-sim var region teleports
+	LLSimInfo* simInfo = LLWorldMap::instance().simInfoFromHandle(region_handle);
+	if(simInfo)
+		region_handle = simInfo->getHandle();
+// </FS:CR>
 	LLVector3 pos_local = (LLVector3)(pos_global - from_region_handle(region_handle));
 	teleportRequest(region_handle, pos_local, getTeleportKeepsLookAt());
 
@@ -4737,27 +4823,87 @@ void LLAgent::requestLeaveGodMode()
 	sendReliableMessage();
 }
 
+// For debugging, trace agent state at times appearance message are sent out.
+void LLAgent::dumpSentAppearance(const std::string& dump_prefix)
+{
+	std::string outfilename = get_sequential_numbered_file_name(dump_prefix,".xml");
+
+	LLAPRFile outfile;
+	std::string fullpath = gDirUtilp->getExpandedFilename(LL_PATH_LOGS,outfilename);
+	outfile.open(fullpath, LL_APR_WB );
+
+	// <FS:ND> Remove LLVolatileAPRPool/apr_file_t and use FILE* instead
+	// apr_file_t* file = outfile.getFileHandle();
+	LLAPRFile::tFiletype* file = outfile.getFileHandle();
+	// </FS:ND>
+
+	if (!file)
+	{
+		return;
+	}
+	else
+	{
+		LL_DEBUGS("Avatar") << "dumping sent appearance message to " << fullpath << llendl;
+	}
+
+	LLVisualParam* appearance_version_param = gAgentAvatarp->getVisualParam(11000);
+	if (appearance_version_param)
+	{
+		F32 value = appearance_version_param->getWeight();
+		dump_visual_param(file, appearance_version_param, value);
+	}
+	for (LLAvatarAppearanceDictionary::Textures::const_iterator iter = LLAvatarAppearanceDictionary::getInstance()->getTextures().begin();
+		 iter != LLAvatarAppearanceDictionary::getInstance()->getTextures().end();
+		 ++iter)
+	{
+		const ETextureIndex index = iter->first;
+		const LLAvatarAppearanceDictionary::TextureEntry *texture_dict = iter->second;
+		if (texture_dict->mIsBakedTexture)
+		{
+			LLTextureEntry* entry = gAgentAvatarp->getTE((U8) index);
+			const LLUUID& uuid = entry->getID();
+			apr_file_printf( file, "\t\t<texture te=\"%i\" uuid=\"%s\"/>\n", index, uuid.asString().c_str());
+		}
+	}
+}
+
 //-----------------------------------------------------------------------------
 // sendAgentSetAppearance()
 //-----------------------------------------------------------------------------
 void LLAgent::sendAgentSetAppearance()
 {
-	if (!isAgentAvatarValid()) return;
-
-	if (gAgentQueryManager.mNumPendingQueries > 0 && (isAgentAvatarValid() && gAgentAvatarp->isUsingBakedTextures())) 
+	if (gAgentQueryManager.mNumPendingQueries > 0) 
 	{
 		return;
 	}
 
-	if (!gAgentWearables.changeInProgress())
+	if (!isAgentAvatarValid() || (getRegion() && getRegion()->getCentralBakeVersion())) return;
+
+	// At this point we have a complete appearance to send and are in a non-baking region.
+	// DRANO FIXME
+	//gAgentAvatarp->setIsUsingServerBakes(FALSE);
+	S32 sb_count, host_count, both_count, neither_count;
+	gAgentAvatarp->bakedTextureOriginCounts(sb_count, host_count, both_count, neither_count);
+	if (both_count != 0 || neither_count != 0)
 	{
-		// Change is fully resolved, can close some open phases.
-		gAgentAvatarp->getPhases().stopPhase("process_initial_wearables_update");
-		gAgentAvatarp->getPhases().stopPhase("wear_inventory_category");
+		llwarns << "bad bake texture state " << sb_count << "," << host_count << "," << both_count << "," << neither_count << llendl;
+	}
+	if (sb_count != 0 && host_count == 0)
+	{
+		gAgentAvatarp->setIsUsingServerBakes(true);
+	}
+	else if (sb_count == 0 && host_count != 0)
+	{
+		gAgentAvatarp->setIsUsingServerBakes(false);
+	}
+	else if (sb_count + host_count > 0)
+	{
+		llwarns << "unclear baked texture state, not sending appearance" << llendl;
+		return;
 	}
 	
-	gAgentAvatarp->sendAppearanceChangeMetrics();
-	LL_INFOS("Avatar") << gAgentAvatarp->avString() << "TAT: Sent AgentSetAppearance: " << gAgentAvatarp->getBakedStatusForPrintout() << LL_ENDL;
+
+	LL_DEBUGS("Avatar") << gAgentAvatarp->avString() << "TAT: Sent AgentSetAppearance: " << gAgentAvatarp->getBakedStatusForPrintout() << LL_ENDL;
 	//dumpAvatarTEs( "sendAgentSetAppearance()" );
 
 	LLMessageSystem* msg = gMessageSystem;
@@ -4771,11 +4917,7 @@ void LLAgent::sendAgentSetAppearance()
 	// NOTE -- when we start correcting all of the other Havok geometry 
 	// to compensate for the COLLISION_TOLERANCE ugliness we will have 
 	// to tweak this number again
-//	const LLVector3 body_size = gAgentAvatarp->mBodySize;
-// [RLVa:KB] - Checked: 2010-10-11 (RLVa-1.2.0e) | Added: RLVa-1.2.0e
-	LLVector3 body_size = gAgentAvatarp->mBodySize;
-	body_size.mV[VZ] += gSavedPerAccountSettings.getF32("AvatarZOffset");
-// [/RLVa:KB]
+	const LLVector3 body_size = gAgentAvatarp->mBodySize + gAgentAvatarp->mAvatarOffset;
 	msg->addVector3Fast(_PREHASH_Size, body_size);	
 
 	// To guard against out of order packets
@@ -4789,7 +4931,7 @@ void LLAgent::sendAgentSetAppearance()
 
 	for(U8 baked_index = 0; baked_index < BAKED_NUM_INDICES; baked_index++ )
 	{
-		const ETextureIndex texture_index = LLVOAvatarDictionary::bakedToLocalTextureIndex((EBakedTextureIndex)baked_index);
+		const ETextureIndex texture_index = LLAvatarAppearanceDictionary::bakedToLocalTextureIndex((EBakedTextureIndex)baked_index);
 
 		// if we're not wearing a skirt, we don't need the texture to be baked
 		if (texture_index == TEX_SKIRT_BAKED && !gAgentAvatarp->isWearingWearableType(LLWearableType::WT_SKIRT))
@@ -4800,19 +4942,30 @@ void LLAgent::sendAgentSetAppearance()
 		// IMG_DEFAULT_AVATAR means not baked. 0 index should be ignored for baked textures
 		if (!gAgentAvatarp->isTextureDefined(texture_index, 0))
 		{
+			LL_DEBUGS("Avatar") << "texture not current for baked " << (S32)baked_index << " local " << (S32)texture_index << llendl;
 			textures_current = FALSE;
 			break;
 		}
 	}
 
 	// only update cache entries if we have all our baked textures
+
+	// FIXME DRANO need additional check for not in appearance editing
+	// mode, if still using local composites need to set using local
+	// composites to false, and update mesh textures.
 	if (textures_current)
 	{
-		LL_INFOS("Avatar") << gAgentAvatarp->avString() << "TAT: Sending cached texture data" << LL_ENDL;
+		bool enable_verbose_dumps = gSavedSettings.getBOOL("DebugAvatarAppearanceMessage");
+		std::string dump_prefix = gAgentAvatarp->getFullname() + "_sent_appearance";
+		if (enable_verbose_dumps)
+		{
+			dumpSentAppearance(dump_prefix);
+		}
+		LL_DEBUGS("Avatar") << gAgentAvatarp->avString() << "TAT: Sending cached texture data" << LL_ENDL;
 		for (U8 baked_index = 0; baked_index < BAKED_NUM_INDICES; baked_index++)
 		{
 			BOOL generate_valid_hash = TRUE;
-			if (isAgentAvatarValid() && !gAgentAvatarp->isBakedTextureFinal((LLVOAvatarDefines::EBakedTextureIndex)baked_index))
+			if (isAgentAvatarValid() && !gAgentAvatarp->isBakedTextureFinal((LLAvatarAppearanceDefines::EBakedTextureIndex)baked_index))
 			{
 				generate_valid_hash = FALSE;
 				LL_DEBUGS("Avatar") << gAgentAvatarp->avString() << "Not caching baked texture upload for " << (U32)baked_index << " due to being uploaded at low resolution." << LL_ENDL;
@@ -4821,7 +4974,7 @@ void LLAgent::sendAgentSetAppearance()
 			const LLUUID hash = gAgentWearables.computeBakedTextureHash((EBakedTextureIndex) baked_index, generate_valid_hash);
 			if (hash.notNull())
 			{
-				ETextureIndex texture_index = LLVOAvatarDictionary::bakedToLocalTextureIndex((EBakedTextureIndex) baked_index);
+				ETextureIndex texture_index = LLAvatarAppearanceDictionary::bakedToLocalTextureIndex((EBakedTextureIndex) baked_index);
 				msg->nextBlockFast(_PREHASH_WearableData);
 				msg->addUUIDFast(_PREHASH_CacheID, hash);
 				msg->addU8Fast(_PREHASH_TextureIndex, (U8)texture_index);
@@ -4862,7 +5015,7 @@ void LLAgent::sendAgentSetAppearance()
 		}
 	}
 
-	llinfos << "Avatar XML num VisualParams transmitted = " << transmitted_params << llendl;
+	//llinfos << "Avatar XML num VisualParams transmitted = " << transmitted_params << llendl;
 	sendReliableMessage();
 }
 
