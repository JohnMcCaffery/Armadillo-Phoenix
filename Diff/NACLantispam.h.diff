diff --git a/Source/indra/newview/NACLantispam.h b/Source/indra/newview/NACLantispam.h
index f4b7840..50b0289 100644
--- a/Source/indra/newview/NACLantispam.h
+++ b/Source/indra/newview/NACLantispam.h
@@ -1,89 +1,117 @@
-#ifndef NACLANTISPAM_H
-#define NACLANTISPAM_H
-#include <boost/tr1/unordered_map.hpp>
-#include "stdtypes.h"
-#include "lluuid.h"
+#ifndef NACL_ANTISPAM_H
+#define NACL_ANTISPAM_H
+
+#include <boost/unordered_map.hpp>
+#include <boost/unordered_set.hpp>
+#include "llsingleton.h"
+
+typedef enum e_antispam_queue
+{
+	ANTISPAM_QUEUE_CHAT,
+	ANTISPAM_QUEUE_INVENTORY,
+	ANTISPAM_QUEUE_IM,
+	ANTISPAM_QUEUE_CALLING_CARD,
+	ANTISPAM_QUEUE_SOUND,
+	ANTISPAM_QUEUE_SOUND_PRELOAD,
+	ANTISPAM_QUEUE_SCRIPT_DIALOG,
+	ANTISPAM_QUEUE_TELEPORT,
+	ANTISPAM_QUEUE_MAX
+} EAntispamQueue;
+
 class NACLAntiSpamQueueEntry
 {
 	friend class NACLAntiSpamQueue;
 	friend class NACLAntiSpamRegistry;
+
 public:
 	U32 getEntryAmount();
 	U32 getEntryTime();
+
 protected:
 	NACLAntiSpamQueueEntry();
+
 	void clearEntry();
 	void updateEntryAmount();
 	void updateEntryTime();
 	bool getBlocked();
 	void setBlocked();
+
 private:
-	U32 entryAmount;
-	U32 entryTime;
-	bool blocked;
+	U32		mEntryAmount;
+	U32		mEntryTime;
+	bool	mBlocked;
 };
+
+typedef boost::unordered_map<LLUUID, NACLAntiSpamQueueEntry*, FSUUIDHash> spam_queue_entry_map_t;
+typedef boost::unordered_set<LLUUID, FSUUIDHash> collision_sound_set_t;
+
 class NACLAntiSpamQueue
 {
 	friend class NACLAntiSpamRegistry;
+
 public:
 	U32 getAmount();
 	U32 getTime();
+
 protected:
 	NACLAntiSpamQueue(U32 time, U32 amount);
+	~NACLAntiSpamQueue();
+
 	void setAmount(U32 amount);
 	void setTime(U32 time);
+
+	void blockEntry(const LLUUID& source);
+	S32 checkEntry(const LLUUID& source, U32 multiplier);
+
 	void clearEntries();
 	void purgeEntries();
-	void blockEntry(LLUUID& source);
-	int checkEntry(LLUUID& source, U32 multiplier);
+
 private:
-	std::tr1::unordered_map<std::string,NACLAntiSpamQueueEntry*> entries;
-	std::tr1::unordered_map<std::string,NACLAntiSpamQueueEntry*>::iterator it;
-	U32 queueAmount;
-	U32 queueTime;
+	spam_queue_entry_map_t	mEntries;
+	U32						mQueueAmount;
+	U32						mQueueTime;
 };
-class NACLAntiSpamRegistry
+
+class NACLAntiSpamRegistry : public LLSingleton<NACLAntiSpamRegistry>
 {
+	friend class LLSingleton<NACLAntiSpamRegistry>;
+
 public:
-	NACLAntiSpamRegistry(U32 time=2, U32 amount=10);
-	static void registerQueues(U32 time=2, U32 amount=10);
-	static void registerQueue(U32 name, U32 time, U32 amount);
-	static void setRegisteredQueueTime(U32 name, U32 time);
-	static void setRegisteredQueueAmount(U32 name,U32 amount);
-	static void setAllQueueTimes(U32 amount);
-	static void setAllQueueAmounts(U32 time);
-	static bool checkQueue(U32 name, LLUUID& source, U32 multiplier=1, bool silent=false);
-	static void clearRegisteredQueue(U32 name);
-	static void purgeRegisteredQueue(U32 name);
-	static void clearAllQueues();
-	static void purgeAllQueues();
-	static void setGlobalQueue(bool value);
-	static void setGlobalAmount(U32 amount);
-	static void setGlobalTime(U32 time);
-	static void blockOnQueue(U32 name,LLUUID& owner_id);
-	enum {
-		QUEUE_CHAT,
-		QUEUE_INVENTORY,
-		QUEUE_IM,
-		QUEUE_CALLING_CARD,
-		QUEUE_SOUND,
-		QUEUE_SOUND_PRELOAD,
-		QUEUE_SCRIPT_DIALOG,
-		QUEUE_TELEPORT,
-		QUEUE_MAX
-	};
+	void setGlobalQueue(bool value);
+	void setGlobalAmount(U32 amount);
+	void setGlobalTime(U32 time);
+	void setRegisteredQueueTime(EAntispamQueue queue, U32 time);
+	void setRegisteredQueueAmount(EAntispamQueue queue, U32 amount);
+	void setAllQueueTimes(U32 amount);
+	void setAllQueueAmounts(U32 time);
+
+	void blockOnQueue(EAntispamQueue queue, const LLUUID& source);
+	bool checkQueue(EAntispamQueue queue, const LLUUID& source, U32 multiplier = 1, bool silent = false);
+
+	void clearRegisteredQueue(EAntispamQueue queue);
+	void purgeRegisteredQueue(EAntispamQueue queue);
+	void clearAllQueues();
+	void purgeAllQueues();
+
+	bool isCollisionSound(const LLUUID& sound_id);
+
 private:
-	static const char* getQueueName(U32 queue_id);
-	static NACLAntiSpamQueue* queues[QUEUE_MAX];
-	static std::tr1::unordered_map<std::string,NACLAntiSpamQueueEntry*> globalEntries;
-	static std::tr1::unordered_map<std::string,NACLAntiSpamQueueEntry*>::iterator it2;
-	static U32 globalTime;
-	static U32 globalAmount;
-	static bool bGlobalQueue;
-
-	static int checkGlobalEntry(LLUUID& source, U32 multiplier);
-	static void clearGlobalEntries();
-	static void purgeGlobalEntries();
-	static void blockGlobalEntry(LLUUID& source);
+	NACLAntiSpamRegistry();
+	~NACLAntiSpamRegistry();
+
+	const char* getQueueName(EAntispamQueue queue);
+
+	void blockGlobalEntry(const LLUUID& source);
+	S32 checkGlobalEntry(const LLUUID& source, U32 multiplier);
+
+	void clearGlobalEntries();
+	void purgeGlobalEntries();
+
+	NACLAntiSpamQueue*		mQueues[ANTISPAM_QUEUE_MAX];
+	spam_queue_entry_map_t	mGlobalEntries;
+	U32						mGlobalTime;
+	U32						mGlobalAmount;
+	bool					mGlobalQueue;
+	collision_sound_set_t	mCollisionSounds;
 };
-#endif //NACLANTISPAM_H
+#endif // NACL_ANTISPAM_H
