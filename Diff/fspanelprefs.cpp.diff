diff --git a/Source/indra/newview/fspanelprefs.cpp b/Source/indra/newview/fspanelprefs.cpp
index 1c96f12..4589742 100644
--- a/Source/indra/newview/fspanelprefs.cpp
+++ b/Source/indra/newview/fspanelprefs.cpp
@@ -12,11 +12,16 @@
 #include "llvoavatar.h"
 #include "llvoavatarself.h"
 #include "llspinctrl.h"
+#include "lldiriterator.h"	// <FS:CR> for populating the cloud combo
+#include "lltexturectrl.h"
+#include "llinventorymodel.h"
 
 static LLRegisterPanelClassWrapper<PanelPreferenceFirestorm> t_pref_fs("panel_preference_firestorm");
 
 PanelPreferenceFirestorm::PanelPreferenceFirestorm() : LLPanelPreference()
 {
+	mCommitCallbackRegistrar.add("Perms.Copy",	boost::bind(&PanelPreferenceFirestorm::onCommitCopy, this));
+	mCommitCallbackRegistrar.add("Perms.Trans", boost::bind(&PanelPreferenceFirestorm::onCommitTrans, this));
 }
 
 BOOL PanelPreferenceFirestorm::postBuild()
@@ -35,32 +40,22 @@ BOOL PanelPreferenceFirestorm::postBuild()
 	getChild<LLUICtrl>("refresh_beams")->setCommitCallback(boost::bind(&PanelPreferenceFirestorm::refreshBeamLists, this));
 	getChild<LLUICtrl>("delete_beam")->setCommitCallback(boost::bind(&PanelPreferenceFirestorm::onBeamDelete, this));
 
-	//WS: Set the combo_box vars and refresh/reload them
-	m_UseLegacyClienttags = getChild<LLComboBox>("UseLegacyClienttags");		
-	m_ColorClienttags = getChild<LLComboBox>("ColorClienttags");		
-	m_ClientTagsVisibility = getChild<LLComboBox>("ClientTagsVisibility");	
-	refreshTagCombos();
-
-	// disable the prefs for features that are disabled by the global auto env being disabled
-	getChild<LLUICtrl>("UseEnvironmentFromRegionAlways")->setCommitCallback(boost::bind(&PanelPreferenceFirestorm::onUseEnvironmentFromRegionAlways, this));
-	// init the enable state of the related wl prefs
-	onUseEnvironmentFromRegionAlways();
+	populateCloudCombo();
+	
+	LLTextureCtrl* tex_ctrl = getChild<LLTextureCtrl>("texture control");
+	tex_ctrl->setCommitCallback(boost::bind(&PanelPreferenceFirestorm::onCommitTexture, this, _2));
+	tex_ctrl->setDefaultImageAssetID(LLUUID(gSavedSettings.getString("DefaultObjectTexture")));
 
 	return LLPanelPreference::postBuild();	
 }
 
 void PanelPreferenceFirestorm::apply()
 {
-	//WS: Apply the combo_boxes for tags
-	applyTagCombos();
-
 }
 
 
 void PanelPreferenceFirestorm::cancel()
 {
-	//WS: Refresh/Reload the Combo_boxes for tags to show the right setting.
-	refreshTagCombos();
 }
 
 
@@ -154,101 +149,73 @@ void PanelPreferenceFirestorm::onBeamDelete()
 	refreshBeamLists();
 }
 
-void PanelPreferenceFirestorm::onUseEnvironmentFromRegionAlways()
-{
-	const bool auto_env = gSavedSettings.getBOOL("UseEnvironmentFromRegionAlways");
-
-    getChild<LLUICtrl>("FSWLParcelEnabled")->setEnabled(auto_env);
-    getChild<LLUICtrl>("FSWLWhitelistFriends")->setEnabled(auto_env);
-    getChild<LLUICtrl>("FSWLWhitelistGroups")->setEnabled(auto_env);
-    getChild<LLUICtrl>("FSWLWhitelistAll")->setEnabled(auto_env);
-    getChild<LLUICtrl>("FSInterpolateParcelWL")->setEnabled(auto_env);
-}
-
-
-void PanelPreferenceFirestorm::refreshTagCombos()
-{	
-
-	//WS: Set the combo_boxes to the right value
-	U32 usel_u = gSavedSettings.getU32("FSUseLegacyClienttags");
-	U32 tagv_u = gSavedSettings.getU32("FSClientTagsVisibility2");
-	U32 tagc_u = gSavedSettings.getU32("FSColorClienttags");
 
+void PanelPreferenceFirestorm::populateCloudCombo()
+{
+	LLComboBox* cloud_combo = getChild<LLComboBox>("cloud_combo");
+	if(cloud_combo)
+	{
+		const std::string cloudDir(gDirUtilp->getExpandedFilename(LL_PATH_APP_SETTINGS, "windlight" + gDirUtilp->getDirDelimiter() + "clouds"));
 
-	std::string usel = llformat("%d",usel_u);
-	std::string tagv = llformat("%d",tagv_u);
-	std::string tagc = llformat("%d",tagc_u);
-	
-	m_UseLegacyClienttags->setCurrentByIndex(usel_u);
-	m_ColorClienttags->setCurrentByIndex(tagc_u);
-	m_ClientTagsVisibility->setCurrentByIndex(tagv_u);
-	
-	getChild<LLUICtrl>("usernamecolorswatch")->setValue(gSavedSettings.getColor4("FSColorUsernameColor").getValue());
-	getChild<LLUICtrl>("FSColorUsername_toggle")->setValue(gSavedSettings.getBOOL("FSColorUsername"));
-	getChild<LLUICtrl>("FSShowOwnTagColor_toggle")->setValue(gSavedSettings.getBOOL("FSShowOwnTagColor"));
-
-
-	LLColor4 tag_color = gSavedPerAccountSettings.getColor4("FirestormTagColor");
-	LLSD selectedColor("red"); // default case: red
-	if (tag_color==LLColor4::blue) selectedColor = LLSD("blue");
-	else if (tag_color==LLColor4::yellow) selectedColor = LLSD("yellow");
-	else if (tag_color==LLColor4::purple) selectedColor = LLSD("purple");
-	else if (tag_color==LLColor4((F32)0.99,(F32)0.56,(F32)0.65,(F32)1)) selectedColor = LLSD("pink");
-	else if (tag_color==LLColor4::white) selectedColor = LLSD("white");
-	else if (tag_color==LLColor4((F32)0.99,(F32)0.39,(F32)0.12,(F32)1)) selectedColor = LLSD("orange");
-	else if (tag_color==LLColor4::green) selectedColor = LLSD("green");
-
-	getChild<LLComboBox>("ClientTagColor")->setValue(selectedColor);
+		LLDirIterator dir_iter(cloudDir, "*.tga");
+		while (1)
+		{
+			std::string file;
+			if (!dir_iter.next(file))
+			{
+				break; // no more files
+			}
+			
+			cloud_combo->add(file);
+		}
+		cloud_combo->setSimple(gSavedSettings.getString("FSCloudTexture"));
+	}
 }
 
-
-void PanelPreferenceFirestorm::applyTagCombos()
+void PanelPreferenceFirestorm::onCommitTexture(const LLSD& data)
 {
-	//WS: If the user hits "apply" then write everything (if something changed) into the Debug Settings
-	bool change=false;
-	if(gSavedSettings.getU32("FSUseLegacyClienttags")!=m_UseLegacyClienttags->getCurrentIndex()
-		|| gSavedSettings.getU32("FSColorClienttags")!=m_ColorClienttags->getCurrentIndex()
-		|| gSavedSettings.getU32("FSClientTagsVisibility2")!=m_ClientTagsVisibility->getCurrentIndex()){
-
-		gSavedSettings.setU32("FSUseLegacyClienttags",m_UseLegacyClienttags->getCurrentIndex());
-		gSavedSettings.setU32("FSColorClienttags",m_ColorClienttags->getCurrentIndex());
-		gSavedSettings.setU32("FSClientTagsVisibility2",m_ClientTagsVisibility->getCurrentIndex());
+	LLTextureCtrl* texture_ctrl = getChild<LLTextureCtrl>("texture control");
+	if(!texture_ctrl) return;
+	if( !texture_ctrl->getTentative() )
+	{
+		// we grab the item id first, because we want to do a
+		// permissions check
+		LLUUID id = texture_ctrl->getImageItemID();
+		if(id.isNull())
+		{
+			id = texture_ctrl->getImageAssetID();
+		}
 		
-		//WS: Clear all nametags to make everything display properly!
-		change=true;
+		// Texture picker defaults aren't inventory items
+		// * Don't need to worry about permissions for them
+		LLViewerInventoryItem* item = gInventory.getItem(id);
+		if(item && !item->getPermissions().allowOperationBy(PERM_COPY, gAgent.getID()))
+		{
+			// Do not have permission to copy the texture.
+			return;
+		}
+
+		gSavedSettings.setString("FSDefaultObjectTexture", texture_ctrl->getImageAssetID().asString());
 	}
+}
 
-	if(LLColor4(getChild<LLUICtrl>("usernamecolorswatch")->getValue()) != gSavedSettings.getColor4("FSColorUsernameColor"))
+void PanelPreferenceFirestorm::onCommitCopy()
+{
+	// Implements fair use
+	BOOL copyable = gSavedSettings.getBOOL("NextOwnerCopy");
+	if(!copyable)
 	{
-		gSavedSettings.setColor4("FSColorUsernameColor",LLColor4(getChild<LLUICtrl>("usernamecolorswatch")->getValue()));
-		change=true;
-	}
-	if(getChild<LLUICtrl>("FSColorUsername_toggle")->getValue().asBoolean() != (LLSD::Boolean)gSavedSettings.getBOOL("FSColorUsername")){
-		gSavedSettings.setBOOL("FSColorUsername",getChild<LLUICtrl>("FSColorUsername_toggle")->getValue().asBoolean());
-		change=true;
-	}
-	if(getChild<LLUICtrl>("FSShowOwnTagColor_toggle")->getValue().asBoolean() != (LLSD::Boolean)gSavedSettings.getBOOL("FSShowOwnTagColor")){
-		gSavedSettings.setBOOL("FSShowOwnTagColor",getChild<LLUICtrl>("FSShowOwnTagColor_toggle")->getValue().asBoolean());
-		change=true;
+		gSavedSettings.setBOOL("NextOwnerTransfer", TRUE);
 	}
+	LLCheckBoxCtrl* xfer = getChild<LLCheckBoxCtrl>("next_owner_transfer");
+	xfer->setEnabled(copyable);
+}
 
-
-	LLColor4 tag_color=LLColor4::red;
-
-	std::string selectedColor(getChild<LLComboBox>("ClientTagColor")->getValue().asString());
-	if (selectedColor == "blue") tag_color = LLColor4::blue;
-	else if (selectedColor == "yellow") tag_color = LLColor4::yellow;
-	else if (selectedColor == "purple") tag_color = LLColor4::purple;
-	else if (selectedColor == "pink") tag_color = LLColor4((F32)0.99,(F32)0.56,(F32)0.65,(F32)1);
-	else if (selectedColor == "white") tag_color = LLColor4::white;
-	else if (selectedColor == "orange") tag_color = LLColor4((F32)0.99,(F32)0.39,(F32)0.12,(F32)1);
-	else if (selectedColor == "green") tag_color = LLColor4::green;
-
-	if(tag_color!=gSavedPerAccountSettings.getColor4("FirestormTagColor")){
-		gSavedPerAccountSettings.setColor4("FirestormTagColor",tag_color);
-		if(gAgentAvatarp.notNull())	gAgentAvatarp->forceBakeAllTextures(true);
-		if(gSavedSettings.getBOOL("FSShowOwnTagColor")) change=true;
+void PanelPreferenceFirestorm::onCommitTrans()
+{
+	BOOL transferable = gSavedSettings.getBOOL("NextOwnerTransfer");
+	if (!transferable)
+	{
+		gSavedSettings.setBOOL("NextOwnerCopy", TRUE);
 	}
-
-	if(change) LLVOAvatar::invalidateNameTags();
-}
+}
\ No newline at end of file
