diff --git a/Source/indra/newview/llviewershadermgr.cpp b/Source/indra/newview/llviewershadermgr.cpp
index df10d52..46e93c9 100644
--- a/Source/indra/newview/llviewershadermgr.cpp
+++ b/Source/indra/newview/llviewershadermgr.cpp
@@ -163,6 +163,7 @@ LLGLSLShader			gGlowProgram;
 LLGLSLShader			gGlowExtractProgram;
 LLGLSLShader			gPostColorFilterProgram;
 LLGLSLShader			gPostNightVisionProgram;
+LLGLSLShader			gVignettePost;	// <FS:CR> Import Vignette from Exodus
 
 // Deferred rendering shaders
 LLGLSLShader			gDeferredImpostorProgram;
@@ -529,9 +530,10 @@ void LLViewerShaderMgr::setShaders()
 			{
 				loaded = loadShadersInterface();
 			}
-			
+
 			if (loaded)
-			{
+
+		    {
 				loaded = loadTransformShaders();
 			}
 
@@ -745,6 +747,7 @@ void LLViewerShaderMgr::unloadShaders()
 
 	gPostColorFilterProgram.unload();
 	gPostNightVisionProgram.unload();
+	gVignettePost.unload();
 
 	gDeferredDiffuseProgram.unload();
 	gDeferredDiffuseAlphaMaskProgram.unload();
@@ -1054,6 +1057,18 @@ BOOL LLViewerShaderMgr::loadShadersEffects()
 		}
 	}
 	
+// <FS:CR> Import Vignette from Exodus
+	if (success)
+	{
+		gVignettePost.mName = "Exodus Vignette Post";
+		gVignettePost.mShaderFiles.clear();
+		gVignettePost.mShaderFiles.push_back(make_pair("post/exoPostBaseV.glsl", GL_VERTEX_SHADER_ARB));
+		gVignettePost.mShaderFiles.push_back(make_pair("post/exoVignetteF.glsl", GL_FRAGMENT_SHADER_ARB));
+		gVignettePost.mShaderLevel = mVertexShaderLevel[SHADER_EFFECT];
+		success = gVignettePost.createShader(NULL, NULL);
+	}
+// </FS:CR>
+	
 	return success;
 
 }
@@ -1412,10 +1427,21 @@ BOOL LLViewerShaderMgr::loadShadersDeferred()
 
 	if (success)
 	{
+		// <FS:Ansariel> Tofu's SSR
+		std::string frag = "deferred/softenLightF.glsl";
+		if (mVertexShaderLevel[SHADER_DEFERRED] == 2 && gSavedSettings.getBOOL("FSRenderSSR"))
+		{
+			frag = "deferred/softenLightSSRF.glsl";
+		}
+		// </FS:Ansariel>
+
 		gDeferredSoftenProgram.mName = "Deferred Soften Shader";
 		gDeferredSoftenProgram.mShaderFiles.clear();
 		gDeferredSoftenProgram.mShaderFiles.push_back(make_pair("deferred/softenLightV.glsl", GL_VERTEX_SHADER_ARB));
-		gDeferredSoftenProgram.mShaderFiles.push_back(make_pair("deferred/softenLightF.glsl", GL_FRAGMENT_SHADER_ARB));
+		// <FS:Ansariel> Tofu's SSR
+		//gDeferredSoftenProgram.mShaderFiles.push_back(make_pair("deferred/softenLightF.glsl", GL_FRAGMENT_SHADER_ARB));
+		gDeferredSoftenProgram.mShaderFiles.push_back(make_pair(frag, GL_FRAGMENT_SHADER_ARB));
+		// </FS:Ansariel>
 
 		gDeferredSoftenProgram.mShaderLevel = mVertexShaderLevel[SHADER_DEFERRED];
 
@@ -2024,18 +2050,19 @@ BOOL LLViewerShaderMgr::loadShadersObject()
 	if (success)
 	{
 		gObjectPreviewProgram.mName = "Simple Shader";
-		gObjectPreviewProgram.mFeatures.calculatesLighting = true;
-		gObjectPreviewProgram.mFeatures.calculatesAtmospherics = true;
-		gObjectPreviewProgram.mFeatures.hasGamma = true;
-		gObjectPreviewProgram.mFeatures.hasAtmospherics = true;
-		gObjectPreviewProgram.mFeatures.hasLighting = true;
+		gObjectPreviewProgram.mFeatures.calculatesLighting = false;
+		gObjectPreviewProgram.mFeatures.calculatesAtmospherics = false;
+		gObjectPreviewProgram.mFeatures.hasGamma = false;
+		gObjectPreviewProgram.mFeatures.hasAtmospherics = false;
+		gObjectPreviewProgram.mFeatures.hasLighting = false;
 		gObjectPreviewProgram.mFeatures.mIndexedTextureChannels = 0;
 		gObjectPreviewProgram.mFeatures.disableTextureIndex = true;
 		gObjectPreviewProgram.mShaderFiles.clear();
 		gObjectPreviewProgram.mShaderFiles.push_back(make_pair("objects/previewV.glsl", GL_VERTEX_SHADER_ARB));
-		gObjectPreviewProgram.mShaderFiles.push_back(make_pair("objects/simpleF.glsl", GL_FRAGMENT_SHADER_ARB));
+		gObjectPreviewProgram.mShaderFiles.push_back(make_pair("objects/previewF.glsl", GL_FRAGMENT_SHADER_ARB));
 		gObjectPreviewProgram.mShaderLevel = mVertexShaderLevel[SHADER_OBJECT];
 		success = gObjectPreviewProgram.createShader(NULL, NULL);
+		gObjectPreviewProgram.mFeatures.hasLighting = true;
 	}
 
 	if (success)
@@ -2736,6 +2763,27 @@ BOOL LLViewerShaderMgr::loadShadersInterface()
 		}
 	}
 
+	// <FS:ND> FIRE-6855;  When running with a intel gfx card, do not use the solidcolorV.glsl files. Instead use a custom one for those cards. Passing color as a uniform and
+	// not a shader attribute
+
+	if (success)
+	{
+		gSolidColorProgramIntel.mName = "Solid Color Shader for Intel";
+		gSolidColorProgramIntel.mShaderFiles.clear();
+		gSolidColorProgramIntel.mShaderFiles.push_back(make_pair("interface/solidcolorIntelV.glsl", GL_VERTEX_SHADER_ARB));
+		gSolidColorProgramIntel.mShaderFiles.push_back(make_pair("interface/solidcolorF.glsl", GL_FRAGMENT_SHADER_ARB)); // The standard fragment shader is just fine. So keep it.
+		gSolidColorProgramIntel.mShaderLevel = mVertexShaderLevel[SHADER_INTERFACE];
+		success = gSolidColorProgramIntel.createShader(NULL, NULL);
+		if (success)
+		{
+			gSolidColorProgramIntel.bind();
+			gSolidColorProgramIntel.uniform1i("tex0", 0);
+			gSolidColorProgramIntel.unbind();
+		}
+	}
+
+	// </FS:ND>
+
 	if (success)
 	{
 		gOcclusionProgram.mName = "Occlusion Shader";
