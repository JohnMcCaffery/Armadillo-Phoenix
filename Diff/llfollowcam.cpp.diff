diff --git a/Source/indra/newview/llfollowcam.cpp b/Source/indra/newview/llfollowcam.cpp
index b670af1..9e47a47 100644
--- a/Source/indra/newview/llfollowcam.cpp
+++ b/Source/indra/newview/llfollowcam.cpp
@@ -28,12 +28,14 @@
 #include "llviewerprecompiledheaders.h"
 #include "llfollowcam.h"
 #include "llagent.h"
+#include "llviewercontrol.h"
 
 //-------------------------------------------------------
 // class statics
 //-------------------------------------------------------
 std::map<LLUUID, LLFollowCamParams*> LLFollowCamMgr::sParamMap;
 std::vector<LLFollowCamParams*> LLFollowCamMgr::sParamStack;
+std::vector<LLFollowCamParams*> LLFollowCamMgr::sScriptParamStack;
 
 //-------------------------------------------------------
 // constants
@@ -222,6 +224,7 @@ void LLFollowCamParams::setFocusOffset( const LLVector3& v )
 void LLFollowCamParams::setPosition( const LLVector3& p ) 
 { 
 	mUsePosition = true;
+
 	mPosition = p;
 }
 
@@ -249,6 +252,44 @@ LLVector3	LLFollowCamParams::getFocus				() const { return mFocus;				}
 bool		LLFollowCamParams::getPositionLocked	() const { return mPositionLocked;		}
 bool		LLFollowCamParams::getFocusLocked		() const { return mFocusLocked;			}
 
+//-------------------------------------------------------------------------------------
+void		LLFollowCamParams::setWindow(LLVector3 position, LLVector3 positionDelta, LLVector3 lookAt, LLVector3 lookAtDelta, int tickLength)
+{
+	setPosition(position);
+	setFocus(position + lookAt);
+
+	mLastPosition = position;
+	mLastLookAt = position;
+
+	mPositionDelta = positionDelta;
+	mLookAtDelta = lookAtDelta;
+
+	mTickLength = tickLength;
+	mThreshold = tickLength * 4;
+
+	mLastUpdate = LLTimer::getTotalTime();
+}
+
+//-------------------------------------------------------------------------------------
+void LLFollowCamParams::interpolate() 
+{
+	if (gSavedSettings.getBOOL("InterpolateScriptFollowCam")) {
+		//Get the current time
+		U64 current = LLTimer::getTotalTime();
+		//Get how long it has been since the last update
+		U64 microseconds = current - mLastUpdate;
+		double scale = double(microseconds) / double(mLastUpdate);
+		double microsecondsd = double(current - mLastUpdate);
+		double scaled = microseconds / double(mLastUpdate);
+		printf("Scale: %d Ms: %i ScaleD: %d MicrosecondsD: %d Crt: %i LastUp: %i Thresh: %i TickLength: %i", scale, microseconds, scaled, microsecondsd, current, mLastUpdate, mThreshold, mTickLength);
+		if (microseconds < mThreshold) { //If it hasn't been too long since the last position update interpolate a new position
+			mPosition = mLastPosition + (mPositionDelta * scale);
+			LLVector3 lookAt = mLastLookAt + (mLookAtDelta * scale);
+			mFocus = mPosition + lookAt;
+		}
+	}
+}
+
 //------------------------------------
 // Constructor
 //------------------------------------
@@ -448,7 +489,6 @@ void LLFollowCam::update()
 }
 
 
-
 //-------------------------------------------------------------------------------------
 BOOL LLFollowCam::updateBehindnessConstraint(LLVector3 focus, LLVector3& cam_position)
 {
@@ -657,7 +697,6 @@ LLVector3	LLFollowCam::getUpVector()
 	return mUpVector;			
 }
 
-
 //------------------------------------
 // Destructor
 //------------------------------------
@@ -899,3 +938,43 @@ void LLFollowCamMgr::dump()
 	}
 }
 
+//static
+void LLFollowCamMgr::setWindow( const LLUUID& source, LLVector3 position, LLVector3 positionDelta, LLVector3 lookAt, LLVector3 lookAtDelta, int tickLength)
+{
+	LLFollowCamParams* paramsp = getParamsForID(source);
+	if (paramsp)
+	{
+		bool found = false;
+		auto found_it = sScriptParamStack.begin();
+		while (!found && found_it != sScriptParamStack.end())
+		{
+			found = (*found_it) == paramsp;
+		}
+		if (!found)
+			sScriptParamStack.push_back(paramsp);
+
+		setCameraActive(source, true);
+		setPositionLocked(source, true);
+		setFocusLocked(source, true);
+		paramsp->setWindow(position, positionDelta, lookAt, lookAtDelta, tickLength);
+	}
+}
+
+void LLFollowCamMgr::removeScriptFollowCam( const LLUUID& source)
+{
+	LLFollowCamParams* params =	getParamsForID(source);
+	param_stack_t::iterator found_it = std::find(sParamStack.begin(), sParamStack.end(), params);
+	if (found_it != sParamStack.end())
+	{
+		sParamStack.erase(found_it);
+	}
+	removeFollowCamParams(source);
+}
+
+//static
+void LLFollowCamMgr::updateScriptFollowCams()
+{
+	for (auto it = sScriptParamStack.begin(); it != sScriptParamStack.end(); it++) {
+		(*it)->interpolate();
+	}
+}
