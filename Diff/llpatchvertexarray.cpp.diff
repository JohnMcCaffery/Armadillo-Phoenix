diff --git a/Source/indra/newview/llpatchvertexarray.cpp b/Source/indra/newview/llpatchvertexarray.cpp
index dece292..9f2147d 100644
--- a/Source/indra/newview/llpatchvertexarray.cpp
+++ b/Source/indra/newview/llpatchvertexarray.cpp
@@ -75,47 +75,61 @@ void LLPatchVertexArray::create(U32 surface_width, U32 patch_width, F32 meters_p
 		power_of_two *= 2;
 		surface_order += 1;
 	}
-
-	if (power_of_two == (surface_width-1))
+// <FS:CR> FIRE-8063 - Aurora non power of two regions
+	//if (power_of_two == (surface_width-1))
+	if (power_of_two != (surface_width-1))
 	{
-		mSurfaceWidth = surface_width;
+		surface_width = power_of_two + 1;
+	}
+// </FS:CR>
+
+	mSurfaceWidth = surface_width;
 
-		// Make sure patch_width is a factor of (surface_width - 1)
-		U32 ratio = (surface_width - 1) / patch_width;
-		F32 fratio = ((float)(surface_width - 1)) / ((float)(patch_width));
-		if ( fratio == (float)(ratio))
+	// Make sure patch_width is a factor of (surface_width - 1)
+	U32 ratio = (surface_width - 1) / patch_width;
+	F32 fratio = ((float)(surface_width - 1)) / ((float)(patch_width));
+	if ( fratio == (float)(ratio))
+	{
+		// Make sure patch_width is a power of two
+		power_of_two = 1;
+		U32 patch_order = 0;
+		while (power_of_two < patch_width)
 		{
-			// Make sure patch_width is a power of two
-			power_of_two = 1;
-			U32 patch_order = 0;
-			while (power_of_two < patch_width)
-			{
-				power_of_two *= 2;
-				patch_order += 1;
-			}
-			if (power_of_two == patch_width)
-			{
-				mPatchWidth = patch_width;
-				mPatchOrder = patch_order;
-			}
-			else // patch_width is not a power of two...
-			{
-				mPatchWidth = 0;
-				mPatchOrder = 0;
-			}
+			power_of_two *= 2;
+			patch_order += 1;
 		}
-		else // patch_width is not a factor of (surface_width - 1)...
+// <FS:CR> FIRE-8063 - Aurora non power of two regions
+		//if (power_of_two == patch_width)
+		if (power_of_two != patch_width)
 		{
-			mPatchWidth = 0;
-			mPatchOrder = 0;
+			patch_width = power_of_two;
 		}
+// </FS:CR>
+
+		mPatchWidth = patch_width;
+		mPatchOrder = patch_order;
+
+// <FS:CR> FIRE-8063 - Aurora non power of two regions
+		//else // patch_width is not a power of two...
+		//{
+		//	mPatchWidth = 0;
+		//	mPatchOrder = 0;
+		//}
+// </FS:CR>
 	}
-	else // surface_width is not a power of two...
+	else // patch_width is not a factor of (surface_width - 1)...
 	{
-		mSurfaceWidth = 0;
 		mPatchWidth = 0;
 		mPatchOrder = 0;
 	}
+// <FS:CR> FIRE-8063 - Aurora non power of two regions
+	//else // surface_width is not a power of two...
+	//{
+	//	mSurfaceWidth = 0;
+	//	mPatchWidth = 0;
+	//	mPatchOrder = 0;
+	//}
+// </FS:CR>
 
 	// PART 2 -- Allocate memory for the render level table
 	if (mPatchWidth > 0) 
