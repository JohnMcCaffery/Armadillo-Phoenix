diff --git a/Source/indra/newview/llappviewer.h b/Source/indra/newview/llappviewer.h
index 0f615bc..2ac23e6 100644
--- a/Source/indra/newview/llappviewer.h
+++ b/Source/indra/newview/llappviewer.h
@@ -31,6 +31,7 @@
 #include "llcontrol.h"
 #include "llsys.h"			// for LLOSInfo
 #include "lltimer.h"
+#include "llappcorehttp.h"
 
 class LLCommandLineParser;
 class LLFrameTimer;
@@ -41,6 +42,9 @@ class LLTextureFetch;
 class LLWatchdogTimeout;
 class LLUpdaterService;
 
+extern LLFastTimer::DeclareTimer FTM_FRAME;
+
+
 class LLAppViewer : public LLApp
 {
 public:
@@ -145,11 +149,25 @@ public:
 	// For thread debugging. 
 	// llstartup needs to control init.
 	// llworld, send_agent_pause() also controls pause/resume.
-	void initMainloopTimeout(const std::string& state, F32 secs = -1.0f);
+
+	// <FS:ND> Change from std::string to char const*, saving a lot of object construction/destruction per frame
+
+	// void initMainloopTimeout(const std::string& state, F32 secs = -1.0f);
+	void initMainloopTimeout( char const *state, F32 secs = -1.0f);
+
+	// </FS:ND>
+
 	void destroyMainloopTimeout();
 	void pauseMainloopTimeout();
-	void resumeMainloopTimeout(const std::string& state = "", F32 secs = -1.0f);
-	void pingMainloopTimeout(const std::string& state, F32 secs = -1.0f);
+
+	// <FS:ND> Change from std::string to char const*, saving a lot of object construction/destruction per frame
+
+	// void resumeMainloopTimeout(const std::string& state = "", F32 secs = -1.0f);
+	// void pingMainloopTimeout(const std::string& state, F32 secs = -1.0f);
+	void resumeMainloopTimeout( char const *state = "", F32 secs = -1.0f);
+	void pingMainloopTimeout( char const *state, F32 secs = -1.0f);
+
+	// </FS:ND>
 
 	// Handle the 'login completed' event.
 	// *NOTE:Mani Fix this for login abstraction!!
@@ -173,6 +191,9 @@ public:
 	// Metrics policy helper statics.
 	static void metricsUpdateRegion(U64 region_handle);
 	static void metricsSend(bool enable_reporting);
+
+	// llcorehttp init/shutdown/config information.
+	LLAppCoreHttp & getAppCoreHttp()			{ return mAppCoreHttp; }
 	
 protected:
 	virtual bool initWindow(); // Initialize the viewer's window.
@@ -194,6 +215,7 @@ private:
 	void initMaxHeapSize();
 	bool initThreads(); // Initialize viewer threads, return false on failure.
 	bool initConfiguration(); // Initialize settings from the command line/config file.
+	void initStrings();       // Initialize LLTrans machinery
 	void initUpdater(); // Initialize the updater service.
 	bool initCache(); // Initialize local client cache.
 	void checkMemory() ;
@@ -229,7 +251,11 @@ private:
 	LLAPRFile mMarkerFile; // A file created to indicate the app is running.
 
 	std::string mLogoutMarkerFileName;
-	apr_file_t* mLogoutMarkerFile; // A file created to indicate the app is running.
+
+	// <FS:ND> Remove LLVolatileAPRPool/apr_file_t and use FILE* instead
+	// apr_file_t* mLogoutMarkerFile; // A file created to indicate the app is running.
+	LLAPRFile::tFiletype* mLogoutMarkerFile; // A file created to indicate the app is running.
+	// </FS:ND>
 
 	//-TT The skin and theme we are using at startup. might want to make them static.
 	std::string mCurrentSkin;
@@ -257,7 +283,6 @@ private:
 
     bool mQuitRequested;				// User wants to quit, may have modified documents open.
     bool mLogoutRequestSent;			// Disconnect message sent to simulator, no longer safe to send messages to the sim.
-    S32 mYieldTime;
 	struct SettingsFiles* mSettingsLocationList;
 
 	LLWatchdogTimeout* mMainloopTimeout;
@@ -275,6 +300,9 @@ private:
 	
 	boost::scoped_ptr<LLUpdaterService> mUpdater;
 
+	// llcorehttp library init/shutdown helper
+	LLAppCoreHttp mAppCoreHttp;
+
 	//---------------------------------------------
 	//*NOTE: Mani - legacy updater stuff
 	// Still useable?
@@ -290,6 +318,11 @@ public:
 
 	void launchUpdater();
 	//---------------------------------------------
+
+	// <FS:Zi> Backup Settings
+	void setSaveSettingsOnExit(bool state) {mSaveSettingsOnExit = state; };
+	bool mSaveSettingsOnExit;
+	// </FS:Zi>
 };
 
 // consts from viewer.h
@@ -335,6 +368,8 @@ extern LLFrameTimer gLoggedInTime;
 extern F32 gLogoutMaxTime;
 extern LLTimer gLogoutTimer;
 
+extern S32 gPendingMetricsUploads;
+
 extern F32 gSimLastTime; 
 extern F32 gSimFrames;
 
