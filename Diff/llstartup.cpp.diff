diff --git a/Source/indra/newview/llstartup.cpp b/Source/indra/newview/llstartup.cpp
index 8ba4805..30a3a75 100644
--- a/Source/indra/newview/llstartup.cpp
+++ b/Source/indra/newview/llstartup.cpp
@@ -54,7 +54,10 @@
 #include "llfloaterreg.h"
 #include "llfocusmgr.h"
 #include "llhttpsender.h"
-#include "llimfloater.h"
+// <FS:Ansariel> [FS communication UI]
+//#include "llimfloater.h"
+#include "fsfloaterim.h"
+// </FS:Ansariel> [FS communication UI]
 #include "lllocationhistory.h"
 #include "llimageworker.h"
 
@@ -65,7 +68,10 @@
 #include "llmoveview.h"
 // <FS:Zi> Remove floating chat bar
 // #include "llnearbychat.h"
-#include "llfloaternearbychat.h"
+// <FS:Ansariel> [FS communication UI]
+//#include "llfloaternearbychat.h"
+#include "fsfloaternearbychat.h"
+// </FS:Ansariel> [FS communication UI]
 // </FS:Zi>
 #include "llnotifications.h"
 #include "llnotificationsutil.h"
@@ -200,37 +206,28 @@
 #include "llstartuplistener.h"
 #include "lltoolbarview.h"
 
-#include "tea.h" // <FS:AW opensim currency support>
-
 #if LL_WINDOWS
 #include "lldxhardware.h"
 #endif
 
-#include "llnotificationmanager.h"
-
+// Firestorm includes
 #if HAS_GROWL
 #include "growlmanager.h"
 #endif
 
-#include "streamtitledisplay.h"
+#include "fscontactsfloater.h"
 #include "fsdata.h"
-
-// NaCl - Antispam Registry
+#include "fsfloatersearch.h"
+#include "fslslbridge.h"
+#include "fsradar.h"
+#include "fswsassetblacklist.h"
+#include "llfloatersearch.h"
+#include "llfloatersidepanelcontainer.h"
+#include "llnotificationmanager.h"
 #include "NACLantispam.h"
-// NaCl End
-// [RLVa:KB] - Checked: 2010-02-27 (RLVa-1.2.0a)
 #include "rlvhandler.h"
-// [/RLVa:KB]
-//-TT Bridge 
-#include "fslslbridge.h"
-//-TT
-
-#include "fscontactsfloater.h"		// <FS:ND> Fix for FIRE-3066
-
-#include "fswsassetblacklist.h" // <FS:WS> For Assetblacklist init on startup
-#include "fsfloatersearchlegacy.h"	// <FS:CR> FIRE-6310
-
-
+#include "streamtitledisplay.h"
+#include "tea.h"
 
 //
 // exported globals
@@ -384,11 +381,8 @@ void update_texture_fetch()
 // true when all initialization done.
 bool idle_startup()
 {
-	LLMemType mt1(LLMemType::MTYPE_STARTUP);
-	
 	const F32 PRECACHING_DELAY = gSavedSettings.getF32("PrecachingDelay");
 	static LLTimer timeout;
-	static S32 timeout_count = 0;
 
 	static LLTimer login_time;
 
@@ -408,7 +402,6 @@ bool idle_startup()
 
 	// last location by default
 	static S32  agent_location_id = START_LOCATION_ID_LAST;
-	static S32  location_which = START_LOCATION_ID_LAST;
 
 	static bool show_connect_box = true;
 
@@ -438,6 +431,15 @@ bool idle_startup()
 
 	if ( STATE_FIRST == LLStartUp::getStartupState() )
 	{
+		static bool first_call = true;
+		if (first_call)
+		{
+			// Other phases get handled when startup state changes,
+			// need to capture the initial state as well.
+			LLStartUp::getPhases().startPhase(LLStartUp::getStartupStateString());
+			first_call = false;
+		}
+
 		gViewerWindow->showCursor(); 
 		gViewerWindow->getWindow()->setCursor(UI_CURSOR_WAIT);
 
@@ -471,8 +473,8 @@ bool idle_startup()
 
 		// <FS:Ansariel> Store current font and skin for system info (FIRE-6806)
 		gSavedSettings.setString("FSInternalFontSettingsFile", gSavedSettings.getString("FSFontSettingsFile"));
-		gSavedSettings.setString("FSInternalSkinCurrent", gSavedSettings.getString("SkinCurrent"));
-		gSavedSettings.setString("FSInternalSkinCurrentTheme", gSavedSettings.getString("SkinCurrentTheme"));
+		gSavedSettings.setString("FSInternalSkinCurrent", gSavedSettings.getString("FSSkinCurrentReadableName"));
+		gSavedSettings.setString("FSInternalSkinCurrentTheme", gSavedSettings.getString("FSSkinCurrentThemeReadableName"));
 		// </FS:Ansariel>
 		
 		if (LLFeatureManager::getInstance()->isSafe())
@@ -730,7 +732,7 @@ bool idle_startup()
 			std::string url = gSavedSettings.getString("GridListDownloadURL");
 			LLHTTPClient::getIfModified(url, new GridListRequestResponder(), last_modified );
 		}
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+#ifdef OPENSIM // <FS:AW optional opensim support>
 		// Fetch grid infos as needed
 		LLGridManager::getInstance()->initGrids();
 		LLStartUp::setStartupState( STATE_FETCH_GRID_INFO );
@@ -738,13 +740,13 @@ bool idle_startup()
 #else
 		LLGridManager::getInstance()->initialize(std::string());
 		LLStartUp::setStartupState( STATE_AUDIO_INIT );
-#endif // HAS_OPENSIM_SUPPORT 
+#endif // OPENSIM 
 // </FS:AW optional opensim support>
 	}
 
 	if (STATE_FETCH_GRID_INFO == LLStartUp::getStartupState())
 	{
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+#ifdef OPENSIM // <FS:AW optional opensim support>
 		static LLFrameTimer grid_timer;
 
 		const F32 grid_time = grid_timer.getElapsedTimeF32();
@@ -866,8 +868,22 @@ bool idle_startup()
 		}
 		else if (gSavedSettings.getBOOL("AutoLogin"))  
 		{
-			gRememberPassword = TRUE;
-			gSavedSettings.setBOOL("RememberPassword", TRUE);                                                      
+			// <FS:Ansariel> Option to not save password if using login cmdline switch;
+			//               gLoginHandler.initializeLoginInfo() sets AutoLogin to TRUE,
+			//               so we end up here!
+			//gRememberPassword = TRUE;
+			//gSavedSettings.setBOOL("RememberPassword", TRUE);                                                      
+			if (gSavedSettings.getBOOL("FSLoginDontSavePassword"))
+			{
+				gRememberPassword = FALSE;
+			}
+			else
+			{
+				gRememberPassword = TRUE;
+				gSavedSettings.setBOOL("RememberPassword", TRUE);
+			}
+			// </FS:Ansariel>
+
 			show_connect_box = false;    			
 		}
 		else 
@@ -907,8 +923,6 @@ bool idle_startup()
 
 		gViewerWindow->getWindow()->setCursor(UI_CURSOR_ARROW);
 
-		timeout_count = 0;
-
 		// Login screen needs menus for preferences, but we can enter
 		// this startup phase more than once.
 		if (gLoginMenuBarView == NULL)
@@ -934,10 +948,6 @@ bool idle_startup()
 				gUserCredential = gSecAPIHandler->loadCredential(gSavedSettings.getString("UserLoginInfo"));                       
 				display_startup();
 			}     
-			if (gHeadlessClient)
-			{
-				LL_WARNS("AppInit") << "Waiting at connection box in headless client.  Did you mean to add autologin params?" << LL_ENDL;
-			}
 			// Make sure the process dialog doesn't hide things
 			display_startup();
 			gViewerWindow->setShowProgress(FALSE,FALSE);
@@ -946,10 +956,13 @@ bool idle_startup()
 			login_show();
 			display_startup();
 			// connect dialog is already shown, so fill in the names
-			if (gUserCredential.notNull())                                                                         
-			{                                                                                                      
-				LLPanelLogin::setFields( gUserCredential );                                  
-			}     
+			if (gUserCredential.notNull())
+			{
+// <FS:CR>
+				//LLPanelLogin::setFields( gUserCredential, gRememberPassword);
+				LLPanelLogin::setFields(gUserCredential);
+// </FS:CR>
+			}
 			display_startup();
 			LLPanelLogin::giveFocus();
 
@@ -1055,7 +1068,13 @@ bool idle_startup()
 		{  
 			userid = gUserCredential->userID();                                                                    
 		}
-		gSavedSettings.setBOOL("RememberPassword", gRememberPassword);                                                 
+		// <FS:Ansariel> Option to not save password if using login cmdline switch
+		//gSavedSettings.setBOOL("RememberPassword", gRememberPassword);                                                 
+		if (!gSavedSettings.getBOOL("FSLoginDontSavePassword"))
+		{
+			gSavedSettings.setBOOL("RememberPassword", gRememberPassword);
+		}
+		// </FS:Ansariel>
 		LL_INFOS("AppInit") << "Attempting login as: " << userid << LL_ENDL;                                           
 //		gDebugInfo["LoginName"] = userid;                                                                              
 // [SL:KB] - Patch: Viewer-CrashReporting | Checked: 2010-11-16 (Catznip-2.6.0a) | Added: Catznip-2.4.0b
@@ -1083,7 +1102,14 @@ bool idle_startup()
          
 		// create necessary directories
 		// *FIX: these mkdir's should error check
+// <FS:CR> Seperate user directories per grid on OS build
+#ifdef OPENSIM
+		std::string gridlabel = LLGridManager::getInstance()->getGridLabel();
+		gDirUtilp->setLindenUserDir(userid, gridlabel);
+#else
 		gDirUtilp->setLindenUserDir(userid);
+#endif // OPENSIM
+// </FS:CR>
 		LLFile::mkdir(gDirUtilp->getLindenUserDir());
 
 		// Set PerAccountSettingsFile to the default value.
@@ -1115,19 +1141,18 @@ bool idle_startup()
 		{
 			gDirUtilp->setChatLogsDir(gSavedPerAccountSettings.getString("InstantMessageLogPath"));		
 		}
-// <FS:CR> FIRE-7343: Seperate chat logs per grid
-		//gDirUtilp->setPerAccountChatLogsDir(userid);
-		static LLCachedControl<bool> AppendGrid(gSavedSettings, "FSAppendGridToLogFolder");
-		gDirUtilp->setPerAccountChatLogsDir(LLGridManager::getInstance()->getGridLabel(), userid, AppendGrid);
-// </FS:CR> FIRE-7343: Seperate chat logs per grid
-		
+// <FS:CR> Seperate user directories per grid on OS build
+#ifdef OPENSIM
+		gDirUtilp->setPerAccountChatLogsDir(userid, gridlabel);
+#else
+		gDirUtilp->setPerAccountChatLogsDir(userid);
+#endif // OPENSIM
+// </FS:CR>		
 		LLFile::mkdir(gDirUtilp->getChatLogsDir());
 		LLFile::mkdir(gDirUtilp->getPerAccountChatLogsDir());
 
 		// NaCl - Antispam
-		U32 antispam_time = gSavedSettings.getU32("_NACL_AntiSpamTime");
-		U32 antispam_amount = gSavedSettings.getU32("_NACL_AntiSpamAmount");
-		NACLAntiSpamRegistry::registerQueues(antispam_time, antispam_amount);
+		NACLAntiSpamRegistry::instance();
 		// NaCl End
 
 		//good a place as any to create user windlight directories
@@ -1190,15 +1215,12 @@ bool idle_startup()
 		  {
 		  case LLSLURL::LOCATION:
 		    agent_location_id = START_LOCATION_ID_URL;
-		    location_which = START_LOCATION_ID_LAST;
 		    break;
 		  case LLSLURL::LAST_LOCATION:
 		    agent_location_id = START_LOCATION_ID_LAST;
-		    location_which = START_LOCATION_ID_LAST;
 		    break;
 		  default:
 		    agent_location_id = START_LOCATION_ID_HOME;
-		    location_which = START_LOCATION_ID_HOME;
 		    break;
 		  }
 
@@ -1267,11 +1289,11 @@ bool idle_startup()
 		// This call to LLLoginInstance::connect() starts the 
 		// authentication process.
 		login->connect(gUserCredential);
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+#ifdef OPENSIM // <FS:AW optional opensim support>
 // <AW: opensim>
 		LLGridManager::getInstance()->saveGridList();
 // </AW: opensim>
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+#endif // OPENSIM // <FS:AW optional opensim support>
 		LLStartUp::setStartupState( STATE_LOGIN_CURL_UNSTUCK );
 		return FALSE;
 	}
@@ -1487,6 +1509,9 @@ bool idle_startup()
 		LLPostProcess::initClass();
 		display_startup();
 
+		LLAvatarAppearance::initClass();
+		display_startup();
+
 		LLViewerObject::initVOClasses();
 		display_startup();
 
@@ -1656,11 +1681,24 @@ LLWorld::getInstance()->addRegion(gFirstSimHandle, gFirstSim, first_sim_size_x,
 			llinfos << "Constructed " <<  pContacts->getTitle() << llendl;
 		// </FS:ND>
 
+		// <FS:Ansariel> FIRE-8560/FIRE-8592: We neet to create the instance of the radar
+		//               for the radar functions and the V2 friendlist here.
+		//               This is because of the standalone group panels that will
+		//               prevent doing this at login when receiving the agent group
+		//               data update.
+		LLFloaterSidePanelContainer::getPanel("people", "panel_people");
+		FSRadar::instance();
+		llinfos << "Radar initialized" << llendl;
+		// </FS:Ansariel>
+
 		//gCacheName is required for nearby chat history loading
 		//so I just moved nearby history loading a few states further
 		if (gSavedPerAccountSettings.getBOOL("LogShowHistory"))
 		{
-			LLFloaterNearbyChat* nearby_chat = LLFloaterNearbyChat::getInstance();
+			// <FS:Ansariel> [FS communication UI]
+			//LLFloaterNearbyChat* nearby_chat = LLFloaterNearbyChat::getInstance();
+			FSFloaterNearbyChat* nearby_chat = FSFloaterNearbyChat::getInstance();
+			// </FS:Ansariel> [FS communication UI]
 			if (nearby_chat) nearby_chat->loadHistory();
 		}
 		display_startup();
@@ -1673,7 +1711,7 @@ LLWorld::getInstance()->addRegion(gFirstSimHandle, gFirstSim, first_sim_size_x,
 		display_startup();
 
 		//reset statistics
-		LLViewerStats::getInstance()->resetStats();
+		LLViewerStats::instance().resetStats();
 
 		display_startup();
 		//
@@ -2231,7 +2269,7 @@ LLWorld::getInstance()->addRegion(gFirstSimHandle, gFirstSim, first_sim_size_x,
 			llinfos << "gAgentStartLocation : " << gAgentStartLocation << llendl;
 			LLSLURL start_slurl = LLStartUp::getStartSLURL();
 			LL_DEBUGS("AppInit") << "start slurl "<<start_slurl.asString()<<LL_ENDL;
-
+			
 			if (((start_slurl.getType() == LLSLURL::LOCATION) && (gAgentStartLocation == "url")) ||
 				((start_slurl.getType() == LLSLURL::LAST_LOCATION) && (gAgentStartLocation == "last")) ||
 				((start_slurl.getType() == LLSLURL::HOME_LOCATION) && (gAgentStartLocation == "home")))
@@ -2405,13 +2443,13 @@ LLWorld::getInstance()->addRegion(gFirstSimHandle, gFirstSim, first_sim_size_x,
 		display_startup();
 
 // <FS:AW Disable LSL bridge on opensim>
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support/>
-		if (LLGridManager::getInstance()->isInOpenSim())
+#ifdef OPENSIM // <FS:AW optional opensim support/>
+		if (LLGridManager::getInstance()->isInOpenSim()  && !LLGridManager::getInstance()->isInAuroraSim())
 		{
 			LLControlVariable* use_bridge = gSavedSettings.getControl("UseLSLBridge");
 			use_bridge->setValue(LLSD(FALSE), FALSE);
 		}
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support/>
+#endif // OPENSIM // <FS:AW optional opensim support/>
 // </FS:AW Disable LSL bridge on opensim>
 
 //-TT Client LSL Bridge
@@ -2506,7 +2544,10 @@ LLWorld::getInstance()->addRegion(gFirstSimHandle, gFirstSim, first_sim_size_x,
 
 		LLAgentPicksInfo::getInstance()->requestNumberOfPicks();
 
-		LLIMFloater::initIMFloater();
+		// <FS:Ansariel> [FS communication UI]
+		//LLIMFloater::initIMFloater();
+		FSFloaterIM::initIMFloater();
+		// </FS:Ansariel> [FS communication UI]
 		display_startup();
 
 		llassert(LLPathfindingManager::getInstance() != NULL);
@@ -2527,20 +2568,13 @@ void login_show()
 {
 	LL_INFOS("AppInit") << "Initializing Login Screen" << LL_ENDL;
 
-#ifdef LL_RELEASE_FOR_DOWNLOAD
-	BOOL bUseDebugLogin = gSavedSettings.getBOOL("UseDebugLogin");
-#else
-	BOOL bUseDebugLogin = TRUE;
-#endif
 	// Hide the toolbars: may happen to come back here if login fails after login agent but before login in region
 	if (gToolBarView)
 	{
 		gToolBarView->setVisible(FALSE);
 	}
 	
-	LLPanelLogin::show(	gViewerWindow->getWindowRectScaled(),
-						bUseDebugLogin || gSavedSettings.getBOOL("SecondLifeEnterprise"),
-						login_callback, NULL );
+	LLPanelLogin::show(	gViewerWindow->getWindowRectScaled(), login_callback, NULL );
 
 	// <FS:PP> "Did you know about Phoenix mode?" notification, showed once per installation
 	if (!gSavedSettings.getBOOL("FSVintageLoginInfo"))
@@ -2627,7 +2661,7 @@ bool login_alert_status(const LLSD& notification, const LLSD& response)
       //      break;
         case 2:     // Teleport
             // Restart the login process, starting at our home locaton
-			LLStartUp::setStartSLURL(LLSLURL(LLSLURL::SIM_LOCATION_HOME));
+	  LLStartUp::setStartSLURL(LLSLURL(LLSLURL::SIM_LOCATION_HOME));
             LLStartUp::setStartupState( STATE_LOGIN_CLEANUP );
             break;
         default:
@@ -2700,6 +2734,14 @@ void register_viewer_callbacks(LLMessageSystem* msg)
 	msg->setHandlerFunc("SetFollowCamProperties",			process_set_follow_cam_properties);
 	msg->setHandlerFunc("ClearFollowCamProperties",			process_clear_follow_cam_properties);
 
+	msg->setHandlerFunc("SetCamera",						process_set_camera);
+	msg->setHandlerFunc("SetFrustum",						process_set_frustum);
+	msg->setHandlerFunc("SetWindow",						process_set_window);
+	msg->setHandlerFunc("RemoteControl",					process_remote_control);
+	msg->setHandlerFunc("ClearCamera",						process_clear_camera);
+	msg->setHandlerFunc("ClearFrustum",						process_clear_frustum);
+	msg->setHandlerFunc("ClearRemoteControl",				process_clear_remote_control);
+
 	msg->setHandlerFuncFast(_PREHASH_ImprovedInstantMessage,	process_improved_im);
 	msg->setHandlerFuncFast(_PREHASH_ScriptQuestion,			process_script_question);
 	// <FS:Techwolf Lupindo> area search
@@ -2813,12 +2855,12 @@ void register_viewer_callbacks(LLMessageSystem* msg)
 	msg->setHandlerFunc("GroupNoticesListReply", LLPanelGroupNotices::processGroupNoticesListReply);
 
 // <FS:CR> FIRE-6310 - Legacy search handlers
-	msg->setHandlerFunc("DirPeopleReply", FSFloaterSearchLegacy::processSearchPeopleReply);
-	msg->setHandlerFunc("DirPlacesReply", FSFloaterSearchLegacy::processSearchPlacesReply);
-	msg->setHandlerFunc("DirGroupsReply", FSFloaterSearchLegacy::processSearchGroupsReply);
-	msg->setHandlerFunc("DirEventsReply", FSFloaterSearchLegacy::processSearchEventsReply);
-	msg->setHandlerFunc("DirLandReply",   FSFloaterSearchLegacy::processSearchLandReply);
-	msg->setHandlerFunc("DirClassifiedReply",  FSFloaterSearchLegacy::processSearchClassifiedsReply);
+	msg->setHandlerFunc("DirPeopleReply", FSPanelSearchPeople::processSearchReply);
+	msg->setHandlerFunc("DirPlacesReply", FSPanelSearchPlaces::processSearchReply);
+	msg->setHandlerFunc("DirGroupsReply", FSPanelSearchGroups::processSearchReply);
+	msg->setHandlerFunc("DirEventsReply", FSPanelSearchEvents::processSearchReply);
+	msg->setHandlerFunc("DirLandReply",   FSPanelSearchLand::processSearchReply);
+	msg->setHandlerFunc("DirClassifiedReply",  FSPanelSearchClassifieds::processSearchReply);
 // </FS:CR> FIRE-6310
 	msg->setHandlerFunc("AvatarPickerReply", LLFloaterAvatarPicker::processAvatarPickerReply);
 
@@ -2924,12 +2966,17 @@ void LLStartUp::loadInitialOutfit( const std::string& outfit_folder_name,
 	}
 	else
 	{
+		// FIXME SH-3860 - this creates a race condition, where COF
+		// changes (base outfit link added) after appearance update
+		// request has been submitted.
 		sWearablesLoadedCon = gAgentWearables.addLoadedCallback(LLStartUp::saveInitialOutfit);
 
 		bool do_copy = true;
 		bool do_append = false;
 		LLViewerInventoryCategory *cat = gInventory.getCategory(cat_id);
-		LLAppearanceMgr::instance().wearInventoryCategory(cat, do_copy, do_append);
+		// Need to fetch cof contents before we can wear.
+		callAfterCategoryFetch(LLAppearanceMgr::instance().getCOF(),
+							   boost::bind(&LLAppearanceMgr::wearInventoryCategory, LLAppearanceMgr::getInstance(), cat, do_copy, do_append));
 		lldebugs << "initial outfit category id: " << cat_id << llendl;
 	}
 
@@ -3073,9 +3120,10 @@ void LLStartUp::setStartupState( EStartupState state )
 		getStartupStateString() << " to " <<  
 		startupStateToString(state) << LL_ENDL;
 
-	sPhases->stopPhase(getStartupStateString());
+	getPhases().stopPhase(getStartupStateString());
 	gStartupState = state;
-	sPhases->startPhase(getStartupStateString());
+	getPhases().startPhase(getStartupStateString());
+
 	postStartupState();
 }
 
@@ -3591,6 +3639,11 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 	{
 		// agent_access can be 'A', 'M', and 'PG'.
 		gAgent.setMaturity(text[0]);
+		//<FS:TS> FIRE-8854: Set the preferred maturity here to the maximum
+		//        in case the sim doesn't send it at login, like OpenSim 
+		//        doesn't. If it does, it'll get overridden below.
+		U32 preferredMaturity = (U32)LLAgent::convertTextToMaturity(text[0]);
+		gSavedSettings.setU32("PreferredMaturity", preferredMaturity);
 	}
 	
 	// this is the value of their preference setting for that content
@@ -3599,7 +3652,6 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 	if (!text.empty())
 	{
 		U32 preferredMaturity = (U32)LLAgent::convertTextToMaturity(text[0]);
-
 		gSavedSettings.setU32("PreferredMaturity", preferredMaturity);
 	}
 
@@ -3674,11 +3726,8 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 	{
 		// replace the default help URL format
 		gSavedSettings.setString("HelpURLFormat",text);
-		
-		// don't fall back to Standalone's pre-connection static help
-		gSavedSettings.setBOOL("HelpUseLocal", false);
 	}
-			
+
 	std::string home_location = response["home"];
 	if(!home_location.empty())
 	{
@@ -3693,7 +3742,9 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 	}
 
 	// If MOTD has not been set by fsdata, fallback to LL MOTD
-	if (gAgent.mMOTD.empty())
+// <FS:CR> FIRE-8571, FIRE-9274
+	if (gAgent.mMOTD.empty() || !LLGridManager::getInstance()->isInSLMain())
+// </FS:CR>
 	{
 		gAgent.mMOTD.assign(response["message"]);
 	}
@@ -3772,7 +3823,7 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 	}
 	
 // <FS:CR> FIRE-8063: Read Aurora web profile url from login data
-#ifdef HAS_OPENSIM_SUPPORT
+#ifdef OPENSIM
 	std::string web_profile_url = response["web_profile_url"];
 	if(!web_profile_url.empty())
 	{
@@ -3787,7 +3838,7 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 		gSavedSettings.setString("WebProfileURL", web_profile_url); 
 		LL_INFOS("LLStartup") << "web_profile_url : no web_profile_url answer, we use the default setting for the web : " << web_profile_url << LL_ENDL;
 	}
-#endif // HAS_OPENSIM_SUPPORT
+#endif // OPENSIM
 // </FS:CR> FIRE-8063: Read Aurora web profile url from login data
 
 	// Default male and female avatars allowing the user to choose their avatar on first login.
@@ -3842,6 +3893,14 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 
 	}
 
+	// set the location of the Agent Appearance service, from which we can request
+	// avatar baked textures if they are supported by the current region
+	std::string agent_appearance_url = response["agent_appearance_service"];
+	if (!agent_appearance_url.empty())
+	{
+		LLAppearanceMgr::instance().setAppearanceServiceURL(agent_appearance_url);
+	}
+
 	// Set the location of the snapshot sharing config endpoint
 	std::string snapshot_config_url = response["snapshot_config_url"];
 	if(!snapshot_config_url.empty())
@@ -3880,7 +3939,7 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 
 // <FS:AW opensim currency support>
 	std::string currency = "L$";
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+#ifdef OPENSIM // <FS:AW optional opensim support>
 	if(response.has("currency"))
 	{
 		currency = response["currency"].asString();
@@ -3913,7 +3972,25 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 		LL_DEBUGS("OS_SETTINGS") << "no destination_guide_url in login response" << llendl;
 	}
 // </FS:AW  opensim destinations and avatar picker>
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+	
+// <FS:CR> Legacy search killswitch!
+	if (LLGridManager::getInstance()->isInOpenSim())
+	{
+		LLFloaterReg::add("search", "floater_fs_search.xml", (LLFloaterBuildFunc)&LLFloaterReg::build<FSFloaterSearch>);
+	}
+	else
+#endif // OPENSIM
+	{
+		if (FSData::enableLegacySearch())
+		{
+			LLFloaterReg::add("search", "floater_fs_search.xml", (LLFloaterBuildFunc)&LLFloaterReg::build<FSFloaterSearch>);
+		}
+		else
+		{
+			LLFloaterReg::add("search", "floater_search.xml", (LLFloaterBuildFunc)&LLFloaterReg::build<LLFloaterSearch>);
+		}
+	}
+// </FS:CR>
 
 	bool success = false;
 	// JC: gesture loading done below, when we have an asset system
@@ -3932,13 +4009,6 @@ bool process_login_success_response(U32 &first_sim_size_x, U32 &first_sim_size_y
 
 void transition_back_to_login_panel(const std::string& emsg)
 {
-	if (gHeadlessClient && gSavedSettings.getBOOL("AutoLogin"))
-	{
-		LL_WARNS("AppInit") << "Failed to login!" << LL_ENDL;
-		LL_WARNS("AppInit") << emsg << LL_ENDL;
-		exit(0);
-	}
-
 	// Bounce back to the login screen.
 	reset_login(); // calls LLStartUp::setStartupState( STATE_LOGIN_SHOW );
 	gSavedSettings.setBOOL("AutoLogin", FALSE);
