diff --git a/Source/indra/newview/llviewerstatsrecorder.h b/Source/indra/newview/llviewerstatsrecorder.h
index 612ac38..d1744f4 100644
--- a/Source/indra/newview/llviewerstatsrecorder.h
+++ b/Source/indra/newview/llviewerstatsrecorder.h
@@ -35,63 +35,111 @@
 #define LL_RECORD_VIEWER_STATS	0
 
 
-#if LL_RECORD_VIEWER_STATS
 #include "llframetimer.h"
 #include "llviewerobject.h"
 #include "llviewerregion.h"
 
 class LLMutex;
-class LLViewerRegion;
 class LLViewerObject;
 
-class LLViewerStatsRecorder
+class LLViewerStatsRecorder : public LLSingleton<LLViewerStatsRecorder>
 {
  public:
+	LOG_CLASS(LLViewerStatsRecorder);	 
 	LLViewerStatsRecorder();
 	~LLViewerStatsRecorder();
 
-	static void initClass();
-	static void cleanupClass();
-	static LLViewerStatsRecorder* instance() {return sInstance; }
+	void objectUpdateFailure(U32 local_id, const EObjectUpdateType update_type, S32 msg_size)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordObjectUpdateFailure(local_id, update_type, msg_size);
+#endif
+	}
 
-	void initStatsRecorder(LLViewerRegion *regionp);
+	void cacheMissEvent(U32 local_id, const EObjectUpdateType update_type, U8 cache_miss_type, S32 msg_size)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordCacheMissEvent(local_id, update_type, cache_miss_type, msg_size);
+#endif
+	}
 
-	void beginObjectUpdateEvents(LLViewerRegion *regionp);
-	void recordObjectUpdateFailure(U32 local_id, const EObjectUpdateType update_type);
-	void recordCacheMissEvent(U32 local_id, const EObjectUpdateType update_type, U8 cache_miss_type);
-	void recordObjectUpdateEvent(U32 local_id, const EObjectUpdateType update_type, LLViewerObject * objectp);
-	void recordCacheFullUpdate(U32 local_id, const EObjectUpdateType update_type, LLViewerRegion::eCacheUpdateResult update_result, LLViewerObject* objectp);
-	void recordRequestCacheMissesEvent(S32 count);
-	void endObjectUpdateEvents();
+	void objectUpdateEvent(U32 local_id, const EObjectUpdateType update_type, LLViewerObject * objectp, S32 msg_size)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordObjectUpdateEvent(local_id, update_type, objectp, msg_size);
+#endif
+	}
+
+	void cacheFullUpdate(U32 local_id, const EObjectUpdateType update_type, LLViewerRegion::eCacheUpdateResult update_result, LLViewerObject* objectp, S32 msg_size)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordCacheFullUpdate(local_id, update_type, update_result, objectp, msg_size);
+#endif
+	}
+
+	void requestCacheMissesEvent(S32 count)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordRequestCacheMissesEvent(count);
+#endif
+	}
+
+	void textureFetch(S32 msg_size)
+	{
+#if LL_RECORD_VIEWER_STATS
+		recordTextureFetch(msg_size);
+#endif
+	}
+
+	void log(F32 interval)
+	{
+#if LL_RECORD_VIEWER_STATS
+		writeToLog(interval);
+#endif
+	}
 
 	F32 getTimeSinceStart();
 
 private:
+	void recordObjectUpdateFailure(U32 local_id, const EObjectUpdateType update_type, S32 msg_size);
+	void recordCacheMissEvent(U32 local_id, const EObjectUpdateType update_type, U8 cache_miss_type, S32 msg_size);
+	void recordObjectUpdateEvent(U32 local_id, const EObjectUpdateType update_type, LLViewerObject * objectp, S32 msg_size);
+	void recordCacheFullUpdate(U32 local_id, const EObjectUpdateType update_type, LLViewerRegion::eCacheUpdateResult update_result, LLViewerObject* objectp, S32 msg_size);
+	void recordRequestCacheMissesEvent(S32 count);
+	void recordTextureFetch(S32 msg_size);
+	void writeToLog(F32 interval);
+
 	static LLViewerStatsRecorder* sInstance;
 
 	LLFILE *	mObjectCacheFile;		// File to write data into
 	LLFrameTimer	mTimer;
-	LLViewerRegion*	mRegionp;
 	F64			mStartTime;
-	F64			mProcessingTime;
+	F64			mLastSnapshotTime;
 
 	S32			mObjectCacheHitCount;
+	S32			mObjectCacheHitSize;
 	S32			mObjectCacheMissFullCount;
+	S32			mObjectCacheMissFullSize;
 	S32			mObjectCacheMissCrcCount;
+	S32			mObjectCacheMissCrcSize;
 	S32			mObjectFullUpdates;
+	S32			mObjectFullUpdatesSize;
 	S32			mObjectTerseUpdates;
+	S32			mObjectTerseUpdatesSize;
 	S32			mObjectCacheMissRequests;
 	S32			mObjectCacheMissResponses;
+	S32			mObjectCacheMissResponsesSize;
 	S32			mObjectCacheUpdateDupes;
 	S32			mObjectCacheUpdateChanges;
 	S32			mObjectCacheUpdateAdds;
 	S32			mObjectCacheUpdateReplacements;
 	S32			mObjectUpdateFailures;
+	S32			mObjectUpdateFailuresSize;
+	S32			mTextureFetchSize;
 
 
 	void	clearStats();
 };
-#endif	// LL_RECORD_VIEWER_STATS
 
 #endif // LLVIEWERSTATSRECORDER_H
 
