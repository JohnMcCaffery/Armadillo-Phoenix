diff --git a/Source/indra/newview/llviewerinventory.h b/Source/indra/newview/llviewerinventory.h
index c176bea..ebfe007 100644
--- a/Source/indra/newview/llviewerinventory.h
+++ b/Source/indra/newview/llviewerinventory.h
@@ -205,13 +205,13 @@ public:
 
 	// Version handling
 	enum { VERSION_UNKNOWN = -1, VERSION_INITIAL = 1 };
-	S32 getVersion() const { return mVersion; }
-	void setVersion(S32 version) { mVersion = version; }
+	S32 getVersion() const;
+	void setVersion(S32 version);
 
 	// Returns true if a fetch was issued.
 	bool fetch();
 
-	// used to help make cacheing more robust - for example, if
+	// used to help make caching more robust - for example, if
 	// someone is getting 4 packets but logs out after 3. the viewer
 	// may never know the cache is wrong.
 	enum { DESCENDENT_COUNT_UNKNOWN = -1 };
@@ -219,7 +219,7 @@ public:
 	void setDescendentCount(S32 descendents) { mDescendentCount = descendents; }
 
 	// file handling on the viewer. These are not meant for anything
-	// other than cacheing.
+	// other than caching.
 	bool exportFileLocal(LLFILE* fp) const;
 	bool importFileLocal(LLFILE* fp);
 	void determineFolderType();
@@ -242,54 +242,16 @@ public:
 	virtual void fire(const LLUUID& inv_item) = 0;
 };
 
-class WearOnAvatarCallback : public LLInventoryCallback
-{
-public:
-	WearOnAvatarCallback(bool do_replace = false) : mReplace(do_replace) {}
-	
-	void fire(const LLUUID& inv_item);
-
-protected:
-	bool mReplace;
-};
-
-class ModifiedCOFCallback : public LLInventoryCallback
-{
-	void fire(const LLUUID& inv_item);
-};
-
 class LLViewerJointAttachment;
 
-class RezAttachmentCallback : public LLInventoryCallback
-{
-public:
-//	RezAttachmentCallback(LLViewerJointAttachment *attachmentp);
-// [SL:KB] - Patch: Appearance-DnDWear | Checked: 2010-09-28 (Catznip-3.0.0a) | Added: Catznip-2.2.0a
-	RezAttachmentCallback(LLViewerJointAttachment *attachmentp, bool replace = false);
+// [SL:KB] - Patch: Appearance-DnDWear | Checked: 2010-09-28 (Catznip-3.4)
+void rez_attachment_cb(const LLUUID& inv_item, LLViewerJointAttachment *attachmentp, bool replace);
 // [/SL:KB]
-	void fire(const LLUUID& inv_item);
+//void rez_attachment_cb(const LLUUID& inv_item, LLViewerJointAttachment *attachmentp);
 
-protected:
-	~RezAttachmentCallback();
+void activate_gesture_cb(const LLUUID& inv_item);
 
-private:
-	LLViewerJointAttachment* mAttach;
-// [SL:KB] - Patch: Appearance-DnDWear | Checked: 2010-09-28 (Catznip-3.0.0a) | Added: Catznip-2.2.0a
-	bool mReplace;
-// [/SL:KB]
-};
-
-class ActivateGestureCallback : public LLInventoryCallback
-{
-public:
-	void fire(const LLUUID& inv_item);
-};
-
-class CreateGestureCallback : public LLInventoryCallback
-{
-public:
-	void fire(const LLUUID& inv_item);
-};
+void create_gesture_cb(const LLUUID& inv_item);
 
 class AddFavoriteLandmarkCallback : public LLInventoryCallback
 {
@@ -303,6 +265,42 @@ private:
 	LLUUID mTargetLandmarkId;
 };
 
+typedef boost::function<void(const LLUUID&)> inventory_func_type;
+void no_op_inventory_func(const LLUUID&); // A do-nothing inventory_func
+
+typedef boost::function<void()> nullary_func_type;
+void no_op(); // A do-nothing nullary func.
+
+// Shim between inventory callback and boost function/callable
+class LLBoostFuncInventoryCallback: public LLInventoryCallback
+{
+public:
+
+	LLBoostFuncInventoryCallback(inventory_func_type fire_func,
+								 nullary_func_type destroy_func = no_op):
+		mFireFunc(fire_func),
+		mDestroyFunc(destroy_func)
+	{
+	}
+
+	// virtual
+	void fire(const LLUUID& item_id)
+	{
+		mFireFunc(item_id);
+	}
+
+	// virtual
+	~LLBoostFuncInventoryCallback()
+	{
+		mDestroyFunc();
+	}
+	
+
+private:
+	inventory_func_type mFireFunc;
+	nullary_func_type mDestroyFunc;
+};
+
 // misc functions
 //void inventory_reliable_callback(void**, S32 status);
 
