diff --git a/Source/indra/newview/llpanellogin.cpp b/Source/indra/newview/llpanellogin.cpp
index 9719ddb..03fff58 100644
--- a/Source/indra/newview/llpanellogin.cpp
+++ b/Source/indra/newview/llpanellogin.cpp
@@ -27,6 +27,7 @@
 #include "llviewerprecompiledheaders.h"
 
 #include "llpanellogin.h"
+#include "lllayoutstack.h"
 
 #include "indra_constants.h"		// for key and mask constants
 #include "llfloaterreg.h"
@@ -102,18 +103,10 @@ public:
 	}
 };
 
-
-LLLoginRefreshHandler gLoginRefreshHandler;
-
-
-
-
-
 //---------------------------------------------------------------------------
 // Public methods
 //---------------------------------------------------------------------------
 LLPanelLogin::LLPanelLogin(const LLRect &rect,
-						 BOOL show_server,
 						 void (*callback)(S32 option, void* user_data),
 						 void *cb_data)
 :	LLPanel(),
@@ -128,7 +121,7 @@ LLPanelLogin::LLPanelLogin(const LLRect &rect,
 	// instance management
 	if (LLPanelLogin::sInstance)
 	{
-		llwarns << "Duplicate instance of login view deleted" << llendl;
+		LL_WARNS("AppInit") << "Duplicate instance of login view deleted" << LL_ENDL;
 		// Don't leave bad pointer in gFocusMgr
 		gFocusMgr.setDefaultKeyboardFocus(NULL);
 
@@ -148,46 +141,96 @@ LLPanelLogin::LLPanelLogin(const LLRect &rect,
 	mLogoImage = LLUI::getUIImage("startup_logo");
 
 	buildFromFile( "panel_login.xml");
-	
+
 	reshape(rect.getWidth(), rect.getHeight());
+	
+	// <FS:CR> Mode Selector
+	LLUICtrl& mode_combo = getChildRef<LLUICtrl>("mode_combo");
+	mode_combo.setValue(gSavedSettings.getString("SessionSettingsFile"));
+	mode_combo.setCommitCallback(boost::bind(&LLPanelLogin::onModeChange, this, getChild<LLUICtrl>("mode_combo")->getValue(), _2));
+	// </FS:CR>
 
-	getChild<LLLineEditor>("password_edit")->setKeystrokeCallback(onPassKey, this);
+	LLLineEditor* password_edit(getChild<LLLineEditor>("password_edit"));
+	password_edit->setKeystrokeCallback(onPassKey, this);
+	// STEAM-14: When user presses Enter with this field in focus, initiate login
+	//password_edit->setCommitCallback(boost::bind(&LLPanelLogin::onClickConnect, this)); // <FS:LO> Not needed because of the global fix below
 
 	// change z sort of clickable text to be behind buttons
 	sendChildToBack(getChildView("forgot_password_text"));
 
+	LLComboBox* location_combo = getChild<LLComboBox>("start_location_combo");
+	updateLocationSelectorsVisibility(); // separate so that it can be called from preferences
+	location_combo->setFocusLostCallback(boost::bind(&LLPanelLogin::onLocationSLURL, this));
+	
+	LLComboBox* server_choice_combo = getChild<LLComboBox>("server_combo");
+	server_choice_combo->setCommitCallback(boost::bind(&LLPanelLogin::onSelectServer, this));
+
+// <FS:CR>
+	// Load all of the grids, sorted, and then add a bar and the current grid at the top
+	//server_choice_combo->removeall();
+
+	//std::string current_grid = LLGridManager::getInstance()->getGrid();
+	//std::map<std::string, std::string> known_grids = LLGridManager::getInstance()->getKnownGrids();
+	//for (std::map<std::string, std::string>::iterator grid_choice = known_grids.begin();
+	//	 grid_choice != known_grids.end();
+	//	 grid_choice++)
+	//{
+	//	if (!grid_choice->first.empty() && current_grid != grid_choice->first)
+	//	{
+	//		LL_DEBUGS("AppInit")<<"adding "<<grid_choice->first<<LL_ENDL;
+	//		server_choice_combo->add(grid_choice->second, grid_choice->first);
+	//	}
+	//}
+	//server_choice_combo->sortByName();
+	//server_choice_combo->addSeparator(ADD_TOP);
+	//LL_DEBUGS("AppInit")<<"adding current "<<current_grid<<LL_ENDL;
+	//server_choice_combo->add(LLGridManager::getInstance()->getGridLabel(), 
+	//						 current_grid,
+	//						 ADD_TOP);	
+	//server_choice_combo->selectFirstItem();
+	updateServer();
 	if(LLStartUp::getStartSLURL().getType() != LLSLURL::LOCATION)
 	{
 		LLSLURL slurl(gSavedSettings.getString("LoginLocation"));
 		LLStartUp::setStartSLURL(slurl);
 	}
-
-	LLUICtrl& mode_combo = getChildRef<LLUICtrl>("mode_combo");
-	mode_combo.setValue(gSavedSettings.getString("SessionSettingsFile"));
-	mode_combo.setCommitCallback(boost::bind(&LLPanelLogin::onModeChange, this, getChild<LLUICtrl>("mode_combo")->getValue(), _2));
-
-	LLComboBox* server_choice_combo = sInstance->getChild<LLComboBox>("server_combo");
-	server_choice_combo->setCommitCallback(onSelectServer, NULL);
-	LLComboBox* saved_login_choice_combo = sInstance->getChild<LLComboBox>("username_combo");
-	// <FS:Ansariel> Clear password field while typing (FIRE-6266)
-	saved_login_choice_combo->setFocusLostCallback(boost::bind(&usernameLostFocus, _1, this));
-	// </FS:Ansariel> Clear password field while typing (FIRE-6266)
-	saved_login_choice_combo->setCommitCallback(onSelectSavedLogin, NULL);
-	updateServerCombo();
-
-	childSetAction("delete_saved_login_btn", onClickDelete, this);
+// </FS:CR>
+	
+// <FS:CR> Moved this down further
+	//LLSLURL start_slurl(LLStartUp::getStartSLURL());
+	//if ( !start_slurl.isSpatial() ) // has a start been established by the command line or NextLoginLocation ?
+	//{
+		// no, so get the preference setting
+	//	std::string defaultStartLocation = gSavedSettings.getString("LoginLocation");
+	//	LL_INFOS("AppInit") << "default LoginLocation '" << defaultStartLocation << "'" << LL_ENDL;
+	//	LLSLURL defaultStart(defaultStartLocation);
+	//	if ( defaultStart.isSpatial() )
+	//	{
+	//		LLStartUp::setStartSLURL(defaultStart);
+	//	}
+	//	else
+	//	{
+	//		LL_INFOS("AppInit")<<"no valid LoginLocation, using home"<<LL_ENDL;
+	//		LLSLURL homeStart(LLSLURL::SIM_LOCATION_HOME);
+	//		LLStartUp::setStartSLURL(homeStart);
+	//	}
+	//}
+	//else
+	//{
+	//	LLPanelLogin::onUpdateStartSLURL(start_slurl); // updates grid if needed
+	//}
+// </FS:CR>
+
+	childSetAction("remove_user_btn", onClickRemove, this); // <FS:CR> Remove credentials
 	childSetAction("connect_btn", onClickConnect, this);
-
-	getChild<LLPanel>("login")->setDefaultBtn("connect_btn");
+	
+	getChild<LLPanel>("login")->setDefaultBtn(findChild<LLButton>("connect_btn")); // <FS:LO> manualy find the button with findChild() as setDefaultButton() uses getChild(), which cant be used in a ctor as it makes a dummy instead
+	getChild<LLPanel>("start_location_panel")->setDefaultBtn(findChild<LLButton>("connect_btn")); // <FS:CR> Yeah, do that here too.
 
 	std::string channel = LLVersionInfo::getChannel();
 	std::string version = llformat("%s (%d)",
 								   LLVersionInfo::getShortVersion().c_str(),
 								   LLVersionInfo::getBuild());
-	//LLTextBox* channel_text = getChild<LLTextBox>("channel_text");
-	//channel_text->setTextArg("[CHANNEL]", channel); // though not displayed
-	//channel_text->setTextArg("[VERSION]", version);
-	//channel_text->setClickedCallback(onClickVersion, this);
 	
 	LLTextBox* forgot_password_text = getChild<LLTextBox>("forgot_password_text");
 	forgot_password_text->setClickedCallback(onClickForgotPassword, NULL);
@@ -195,35 +238,65 @@ LLPanelLogin::LLPanelLogin(const LLRect &rect,
 	LLTextBox* create_new_account_text = getChild<LLTextBox>("create_new_account_text");
 	create_new_account_text->setClickedCallback(onClickNewAccount, NULL);
 
-	LLTextBox* need_help_text = getChild<LLTextBox>("login_help");
-	need_help_text->setClickedCallback(onClickHelp, NULL);
+	// <FS:Ansariel> We don't have the help link
+	//LLTextBox* need_help_text = getChild<LLTextBox>("login_help");
+	//need_help_text->setClickedCallback(onClickHelp, NULL);
+	// </FS:Ansariel>
 	
-	LLTextBox* grid_mgr_help_text = getChild<LLTextBox>("grid_mgr_help_text");
+// <FS:CR> Grid Manager Help link
+	LLTextBox* grid_mgr_help_text = getChild<LLTextBox>("grid_login_text");
 	grid_mgr_help_text->setClickedCallback(onClickGridMgrHelp, NULL);
+// </FS:CR>
 	
 	// get the web browser control
 	LLMediaCtrl* web_browser = getChild<LLMediaCtrl>("login_html");
 	web_browser->addObserver(this);
 
-	mLoginWidgets=getChild<LLView>("login_widgets");
-
 	reshapeBrowser();
 
-// <AW: opensim>
-	web_browser->setVisible(true);
-	web_browser->navigateToLocalPage( "loading", "loading.html" );
-// </AW: opensim>
-
-	updateSavedLoginsCombo();
-	updateLocationCombo(false);
+	// </FS:CR> Moved below
+	//loadLoginPage();
 
 	// Show last logged in user favorites in "Start at" combo.
+/// <FS:CR> We don't use addUsersWithFavoritesToUsername() in Firestorm. We use addUsersToCombo() when setting
+/// visibility.
 	//addUsersWithFavoritesToUsername();
-	getChild<LLComboBox>("username_combo")->setTextChangedCallback(boost::bind(&LLPanelLogin::addFavoritesToStartLocation, this));
-}
+// </FS:CR>
+	LLComboBox* username_combo(getChild<LLComboBox>("username_combo"));
+	//username_combo->setTextChangedCallback(boost::bind(&LLPanelLogin::addFavoritesToStartLocation, this));
+// <FS:CR> Don't automatically connect on selection!
+	//username_combo->setCommitCallback(boost::bind(&LLPanelLogin::onClickConnect, this));
+	username_combo->setCommitCallback(boost::bind(&LLPanelLogin::onSelectUser, this));
+
+	LLSLURL start_slurl(LLStartUp::getStartSLURL());
+	if ( !start_slurl.isSpatial() ) // has a start been established by the command line or NextLoginLocation ?
+	{
+	// no, so get the preference setting
+		std::string defaultStartLocation = gSavedSettings.getString("LoginLocation");
+		LL_INFOS("AppInit") << "default LoginLocation '" << defaultStartLocation << "'" << LL_ENDL;
+		LLSLURL defaultStart(defaultStartLocation);
+		if ( defaultStart.isSpatial() )
+		{
+			LLStartUp::setStartSLURL(defaultStart);
+		}
+		else
+		{
+			LL_INFOS("AppInit")<<"no valid LoginLocation, using home"<<LL_ENDL;
+			LLSLURL homeStart(LLSLURL::SIM_LOCATION_HOME);
+			LLStartUp::setStartSLURL(homeStart);
+		}
+	}
+	else
+	{
+		LLPanelLogin::onUpdateStartSLURL(start_slurl); // updates grid if needed
+	}
 	
+	loadLoginPage();
+// </FS:CR>
+}
 
-
+// <FS:CR> We don't use addUsersWithFavoritesToUsername() in Firestorm. We use addUsersToCombo().
+#if 0
 void LLPanelLogin::addUsersWithFavoritesToUsername()
 {
 	LLComboBox* combo = getChild<LLComboBox>("username_combo");
@@ -240,13 +313,11 @@ void LLPanelLogin::addUsersWithFavoritesToUsername()
 		combo->add(iter->first);
 	}
 }
+#endif
+// </FS:CR>
 
 void LLPanelLogin::addFavoritesToStartLocation()
 {
-	// <FS:Ansariel> Clear password field while typing (FIRE-6266)
-	getChild<LLLineEditor>("password_edit")->clear();
-	// </FS:Ansariel> Clear password field while typing (FIRE-6266)
-
 	// Clear the combo.
 	LLComboBox* combo = getChild<LLComboBox>("start_location_combo");
 	if (!combo) return;
@@ -258,12 +329,11 @@ void LLPanelLogin::addFavoritesToStartLocation()
 
 	// Load favorites into the combo.
 	std::string user_defined_name = getChild<LLComboBox>("username_combo")->getSimple();
-	std::string canonical_user_name = canonicalize_username(user_defined_name);
-// <FS:CR> FIRE-8147 - We want to trim the grid from the username to compare it with our user's settings path
-	U32 arobase = canonical_user_name.find("@");
-	if(arobase > 0)
-		canonical_user_name = canonical_user_name.substr(0, arobase - 1);
-// </FS:CR> FIRE-8147
+// <FS:CR> FIRE-10122 - User@grid stored_favorites.xml
+	//std::string canonical_user_name = canonicalize_username(user_defined_name);
+	std::string current_grid = getChild<LLComboBox>("server_combo")->getSimple();
+	std::string current_user = canonicalize_username(user_defined_name) + " @ " + current_grid;
+// </FS:CR>
 	std::string filename = gDirUtilp->getExpandedFilename(LL_PATH_USER_SETTINGS, "stored_favorites.xml");
 	LLSD fav_llsd;
 	llifstream file;
@@ -276,8 +346,10 @@ void LLPanelLogin::addFavoritesToStartLocation()
 		// The account name in stored_favorites.xml has Resident last name even if user has
 		// a single word account name, so it can be compared case-insensitive with the
 		// user defined "firstname lastname".
-		S32 res = LLStringUtil::compareInsensitive(canonical_user_name, iter->first);
-		lldebugs << "Comparing: \"" << canonical_user_name << "\" and \"" << iter->first << "\"" << llendl;
+// <FS:CR> FIRE-10122 - User@grid stored_favorites.xml
+		//S32 res = LLStringUtil::compareInsensitive(canonical_user_name, iter->first);
+		S32 res = LLStringUtil::compareInsensitive(current_user, iter->first);
+// </FS:CR>
 		if (res != 0)
 		{
 			lldebugs << "Skipping favorites for " << iter->first << llendl;
@@ -342,7 +414,7 @@ void LLPanelLogin::draw()
 		S32 width = getRect().getWidth();
 		S32 height = getRect().getHeight();
 
-		if (mLoginWidgets->getVisible())
+		if (getChild<LLView>("login_widgets")->getVisible())
 		{
 			// draw a background box in black
 			gl_rect_2d( 0, height - 264, width, 264, LLColor4::black );
@@ -352,14 +424,7 @@ void LLPanelLogin::draw()
 		};
 	}
 	gGL.popMatrix();
-// <AW: opensim>
-	std::string login_page = LLGridManager::getInstance()->getLoginPage();
- 	if(mLoginPage != login_page)
-	{
-		mLoginPage = login_page;
-		loadLoginPage();
-	}
-// </AW: opensim>	
+
 	LLPanel::draw();
 }
 
@@ -433,25 +498,27 @@ void LLPanelLogin::giveFocus()
 // static
 void LLPanelLogin::showLoginWidgets()
 {
-	// *NOTE: Mani - This may or may not be obselete code.
-	// It seems to be part of the defunct? reg-in-client project.
-	sInstance->getChildView("login_widgets")->setVisible( true);
-	LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
-	sInstance->reshapeBrowser();
-	// *TODO: Append all the usual login parameters, like first_login=Y etc.
-	std::string splash_screen_url = LLGridManager::getInstance()->getLoginPage();
-	web_browser->navigateTo( splash_screen_url, "text/html" );
-	LLUICtrl* username_combo = sInstance->getChild<LLUICtrl>("username_combo");
-	username_combo->setFocus(TRUE);
+	if (sInstance)
+	{
+		// *NOTE: Mani - This may or may not be obselete code.
+		// It seems to be part of the defunct? reg-in-client project.
+		sInstance->getChildView("login_widgets")->setVisible( true);
+		LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
+		sInstance->reshapeBrowser();
+		// *TODO: Append all the usual login parameters, like first_login=Y etc.
+		std::string splash_screen_url = LLGridManager::getInstance()->getLoginPage();
+		web_browser->navigateTo( splash_screen_url, "text/html" );
+		LLUICtrl* username_combo = sInstance->getChild<LLUICtrl>("username_combo");
+		username_combo->setFocus(TRUE);
+	}
 }
 
 // static
 void LLPanelLogin::show(const LLRect &rect,
-						BOOL show_server,
 						void (*callback)(S32 option, void* user_data),
 						void* callback_data)
 {
-	new LLPanelLogin(rect, show_server, callback, callback_data);
+	new LLPanelLogin(rect, callback, callback_data);
 
 	if( !gFocusMgr.getKeyboardFocus() )
 	{
@@ -464,15 +531,17 @@ void LLPanelLogin::show(const LLRect &rect,
 }
 
 // static
+// <FS:CR>
+//void LLPanelLogin::setFields(LLPointer<LLCredential> credential,
+//							 BOOL remember)
 void LLPanelLogin::setFields(LLPointer<LLCredential> credential)
+// </FS:CR>
 {
 	if (!sInstance)
 	{
 		llwarns << "Attempted fillFields with no login view shown" << llendl;
 		return;
 	}
-
-	
 	LL_INFOS("Credentials") << "Setting login fields to " << *credential << LL_ENDL;
 
 	LLSD identifier = credential->getIdentifier();
@@ -487,26 +556,26 @@ void LLPanelLogin::setFields(LLPointer<LLCredential> credential)
 		    login_id += " ";
 		    login_id += lastname;
 	    }
-	}
+// <FS:CR>
+		//sInstance->getChild<LLComboBox>("username_combo")->setLabel(login_id);
+	}
+	//else if((std::string)identifier["type"] == "account")
+	//{
+	//	sInstance->getChild<LLComboBox>("username_combo")->setLabel((std::string)identifier["account_name"]);
+	//}
+	//else
+	//{
+	//  sInstance->getChild<LLComboBox>("username_combo")->setLabel(std::string());
+	//}
 	std::string credName = credential->getCredentialName();
 	sInstance->getChild<LLComboBox>("username_combo")->selectByValue(credName);
-	
-
-
-// <FS:AW FIRE-6492 Firestorm doesn't always honor the start location option>
-/*	if(identifier.has("startlocation")){
-		llinfos << "Settings startlocation to: " << identifier["startlocation"].asString() << llendl;
-		LLStartUp::setStartSLURL(LLSLURL(identifier["startlocation"].asString()));
-		updateLocationCombo(false);
-	}
-*/
-// </FS:AW FIRE-6492 Firestorm doesn't always honor the start location option>
+// </FS:CR>
 	sInstance->addFavoritesToStartLocation();
 	// if the password exists in the credential, set the password field with
 	// a filler to get some stars
 	LLSD authenticator = credential->getAuthenticator();
 	LL_INFOS("Credentials") << "Setting authenticator field " << authenticator["type"].asString() << LL_ENDL;
-	bool remember;
+	bool remember; // <FS:CR>
 	if(authenticator.isMap() && 
 	   authenticator.has("secret") && 
 	   (authenticator["secret"].asString().size() > 0))
@@ -518,41 +587,14 @@ void LLPanelLogin::setFields(LLPointer<LLCredential> credential)
 		// nice row of asterixes.
 		const std::string filler("123456789!123456");
 		sInstance->getChild<LLUICtrl>("password_edit")->setValue(std::string("123456789!123456"));
-		remember=true;
+		remember = true; // <FS:CR>
 	}
 	else
 	{
-		sInstance->getChild<LLUICtrl>("password_edit")->setValue(std::string());	
-		remember=false;
+		sInstance->getChild<LLUICtrl>("password_edit")->setValue(std::string());		
+		remember = false; // <FS:CR>
 	}
 	sInstance->getChild<LLUICtrl>("remember_check")->setValue(remember);
-
-
-		U32 arobase = credName.find("@");
-	if (arobase != std::string::npos && arobase + 1 < credName.length())
-		credName = credName.substr(arobase + 1, credName.length() - arobase - 1);
-// <SA: opensim>
-	if(LLGridManager::getInstance()->getGrid() == credName)
-	{
-		return;
-	}
-
-	try
-	{
-		LLGridManager::getInstance()->setGridChoice(credName);
-	}
-	catch (LLInvalidGridName ex)
-	{
-		// do nothing
-	}
-// </SA: opensim>
-	//updateServerCombo();	
-	// grid changed so show new splash screen (possibly)
-	updateServer();
-	updateLoginPanelLinks();
-	// <FS:CR> This is redudant to line 504 and causes the password to be wiped on a saved credential. Remove it.
-	//sInstance->addFavoritesToStartLocation();
-	
 }
 
 
@@ -569,7 +611,10 @@ void LLPanelLogin::getFields(LLPointer<LLCredential>& credential,
 	// load the credential so we can pass back the stored password or hash if the user did
 	// not modify the password field.
 	
-	credential = gSecAPIHandler->loadCredential(credential_name());
+// <FS:CR>
+	//credential = gSecAPIHandler->loadCredential(LLGridManager::getInstance()->getGrid());
+	credential = gSecAPIHandler->loadCredential(credentialName());
+// </FS:CR>
 
 	LLSD identifier = LLSD::emptyMap();
 	LLSD authenticator = LLSD::emptyMap();
@@ -579,12 +624,13 @@ void LLPanelLogin::getFields(LLPointer<LLCredential>& credential,
 		authenticator = credential->getAuthenticator();
 	}
 
-	std::string username = sInstance->getChild<LLComboBox>("username_combo")->getValue().asString();
+	std::string username = sInstance->getChild<LLUICtrl>("username_combo")->getValue().asString();
 	LLStringUtil::trim(username);
+// <FS:CR>
 	U32 arobase = username.find("@");
-
-	if(arobase != std::string::npos) username = username.substr(0, arobase);
-
+	if(arobase != std::string::npos)
+		username = username.substr(0, arobase);
+// </FS:CR>
 	std::string password = sInstance->getChild<LLUICtrl>("password_edit")->getValue().asString();
 
 	LL_INFOS2("Credentials", "Authentication") << "retrieving username:" << username << LL_ENDL;
@@ -646,62 +692,13 @@ void LLPanelLogin::getFields(LLPointer<LLCredential>& credential,
 			}
 		}
 	}
-
-// <FS:AW FIRE-6492 Firestorm doesn't always honor the start location option>
-/*
-	switch(LLSLURL(sInstance->getChild<LLComboBox>("start_location_combo")->getValue()).getType())
-	{
-		case LLSLURL::HOME_LOCATION:
-		{
-			identifier["startlocation"] = LLSLURL::SIM_LOCATION_HOME;
-			break;
-      		}
-		case LLSLURL::LAST_LOCATION:
-		{
-			identifier["startlocation"] = LLSLURL::SIM_LOCATION_LAST;
-			break;
-	  	}
-		case LLSLURL::INVALID:
-		{
-			break;
-		}
-		case LLSLURL::LOCATION:
-		{
-			break;
-		}
-		case LLSLURL::APP:
-		{
-			break;
-		}
-		case LLSLURL::HELP: 
-		{
-			break;
-		}
-	}
-*/
-// </FS:AW FIRE-6492 Firestorm doesn't always honor the start location option>
-
-	credential = gSecAPIHandler->createCredential(credential_name(), identifier, authenticator);
+// <FS:CR>
+	//credential = gSecAPIHandler->createCredential(LLGridManager::getInstance()->getGrid(), identifier, authenticator);
+	credential = gSecAPIHandler->createCredential(credentialName(), identifier, authenticator);
+// </FS:CR>
 	remember = sInstance->getChild<LLUICtrl>("remember_check")->getValue();
 }
 
-/* //not used
-// static
-BOOL LLPanelLogin::isGridComboDirty()
-{
-	BOOL user_picked = FALSE;
-	if (!sInstance)
-	{
-		llwarns << "Attempted getServer with no login view shown" << llendl;
-	}
-	else
-	{
-		LLComboBox* combo = sInstance->getChild<LLComboBox>("server_combo");
-		user_picked = combo->isDirty();
-	}
-	return user_picked;
-}
-*/
 
 // static
 BOOL LLPanelLogin::areCredentialFieldsDirty()
@@ -731,100 +728,89 @@ BOOL LLPanelLogin::areCredentialFieldsDirty()
 
 
 // static
-void LLPanelLogin::updateLocationCombo( bool force_visible )
+void LLPanelLogin::updateLocationSelectorsVisibility()
 {
-	if (!sInstance) 
+	if (sInstance) 
 	{
-		return;
+		BOOL show_start = gSavedSettings.getBOOL("ShowStartLocation");
+		sInstance->getChild<LLLayoutPanel>("start_location_panel")->setVisible(show_start);
+
+		BOOL show_server = gSavedSettings.getBOOL("ForceShowGrid");
+		sInstance->getChild<LLLayoutPanel>("grid_panel")->setVisible(show_server);
+// <FS:CR> Refresh the username combo
+		sInstance->addUsersToCombo(show_server);
+// </FS:CR>
 	}	
-	
-	LLComboBox* combo = sInstance->getChild<LLComboBox>("start_location_combo");
-	
-	switch(LLStartUp::getStartSLURL().getType())
-	{
-		case LLSLURL::LOCATION:
-		{
-			
-			combo->setCurrentByIndex( 2 );	
-			combo->setTextEntry(LLStartUp::getStartSLURL().getLocationString());	
-			break;
-		}
-		case LLSLURL::HOME_LOCATION:
-			combo->setCurrentByIndex(1);
-			break;
-		default:
-			combo->setCurrentByIndex(0);
-			break;
-	}
-	
-	BOOL show_start = TRUE;
-	
-	if ( ! force_visible )
-		show_start = gSavedSettings.getBOOL("ShowStartLocation");
-	
-	sInstance->getChildView("start_location_combo")->setVisible( show_start);
-	sInstance->getChildView("start_location_text")->setVisible( show_start);
-// <FS:CR> Open-Sim builds should always show the grid manager
-#ifdef HAS_OPENSIM_SUPPORT
-	BOOL show_server = TRUE;
-#else
-	BOOL show_server = gSavedSettings.getBOOL("ForceShowGrid");
-#endif // HAS_OPENSIM_SUPPORT
-// </FS:CR> Open-sim builds should always show the grid manager
-	sInstance->getChildView("server_combo_text")->setVisible( show_server);	
-	sInstance->getChildView("grid_selection_text")->setVisible( show_server);	
-	sInstance->getChildView("server_combo")->setVisible( show_server);
-	
-	// <FS:Ansariel> Update visibility of Grid Manager help link
-	sInstance->getChildView("grid_mgr_help_text")->setVisible(show_server);
-
-	if (show_server)
-	{
-		updateServerCombo();
-	}
 }
 
-// static
-void LLPanelLogin::updateStartSLURL()
+// static - called from LLStartUp::setStartSLURL
+void LLPanelLogin::onUpdateStartSLURL(const LLSLURL& new_start_slurl)
 {
 	if (!sInstance) return;
 
-
-	LLComboBox* combo = sInstance->getChild<LLComboBox>("start_location_combo");
-	S32 index = combo->getCurrentIndex();
-	
-	switch (index)
+	LL_DEBUGS("AppInit")<<new_start_slurl.asString()<<LL_ENDL;
+
+	LLComboBox* location_combo = sInstance->getChild<LLComboBox>("start_location_combo");
+	/*
+	 * Determine whether or not the new_start_slurl modifies the grid.
+	 *
+	 * Note that some forms that could be in the slurl are grid-agnostic.,
+	 * such as "home".  Other forms, such as
+	 * https://grid.example.com/region/Party%20Town/20/30/5 
+	 * specify a particular grid; in those cases we want to change the grid
+	 * and the grid selector to match the new value.
+	 */
+	enum LLSLURL::SLURL_TYPE new_slurl_type = new_start_slurl.getType();
+	switch ( new_slurl_type )
 	{
-		case 0:
-		{
-			LLStartUp::setStartSLURL(LLSLURL(LLSLURL::SIM_LOCATION_LAST));
-			break;
-		}			
-		case 1:
-		{
-			LLStartUp::setStartSLURL(LLSLURL(LLSLURL::SIM_LOCATION_HOME));
-			break;
-		}
-		default:
+	case LLSLURL::LOCATION:
+	  {
+		std::string slurl_grid = LLGridManager::getInstance()->getGrid(new_start_slurl.getGrid());
+		if ( ! slurl_grid.empty() ) // is that a valid grid?
 		{
-			LLSLURL slurl = LLSLURL(combo->getValue().asString());
-			if(slurl.getType() == LLSLURL::LOCATION)
+			if ( slurl_grid != LLGridManager::getInstance()->getGrid() ) // new grid?
 			{
-				// we've changed the grid, so update the grid selection
-				LLStartUp::setStartSLURL(slurl);
+				// the slurl changes the grid, so update everything to match
+				LLGridManager::getInstance()->setGridChoice(slurl_grid);
+
+				// update the grid selector to match the slurl
+				LLComboBox* server_combo = sInstance->getChild<LLComboBox>("server_combo");
+				std::string server_label(LLGridManager::getInstance()->getGridLabel(slurl_grid));
+				server_combo->setSimple(server_label);
+
+				updateServer(); // to change the links and splash screen
 			}
-			break;
-		}			
-	}
+			location_combo->setTextEntry(new_start_slurl.getLocationString());
+		}
+		else
+		{
+			// the grid specified by the slurl is not known
+			LLNotificationsUtil::add("InvalidLocationSLURL");
+			LL_WARNS("AppInit")<<"invalid LoginLocation:"<<new_start_slurl.asString()<<LL_ENDL;
+			location_combo->setTextEntry(LLStringUtil::null);
+		}
+	  }
+ 	break;
 
-	update_grid_help(); //llviewermenu
-}
+	case LLSLURL::HOME_LOCATION:
+		location_combo->setCurrentByIndex(1); // home location
+		break;
+		
+	case LLSLURL::LAST_LOCATION:
+		location_combo->setCurrentByIndex(0); // last location
+		break;
 
+	default:
+		LL_WARNS("AppInit")<<"invalid login slurl, using home"<<LL_ENDL;
+		location_combo->setCurrentByIndex(1); // home location
+		break;
+	}
+}
 
 void LLPanelLogin::setLocation(const LLSLURL& slurl)
 {
-	LLStartUp::setStartSLURL(slurl);
-	updateServer();
+	LL_DEBUGS("AppInit")<<"setting Location "<<slurl.asString()<<LL_ENDL;
+	LLStartUp::setStartSLURL(slurl); // calls onUpdateStartSLURL, above
 }
 
 // static
@@ -842,104 +828,71 @@ void LLPanelLogin::closePanel()
 // static
 void LLPanelLogin::setAlwaysRefresh(bool refresh)
 {
-	if (LLStartUp::getStartupState() >= STATE_LOGIN_CLEANUP) return;
-
-	LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
-
-	if (web_browser)
+	if (sInstance && LLStartUp::getStartupState() < STATE_LOGIN_CLEANUP)
 	{
-		web_browser->setAlwaysRefresh(refresh);
+		LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
+
+		if (web_browser)
+		{
+			web_browser->setAlwaysRefresh(refresh);
+		}
 	}
 }
 
 
+
 void LLPanelLogin::loadLoginPage()
 {
 	if (!sInstance) return;
 
-	LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
-	if (!web_browser) return;
-
-
-	std::string login_page = LLGridManager::getInstance()->getLoginPage();
-
-	if (login_page.empty()) 
-	{
-		web_browser->navigateToLocalPage( "loading-error" , "index.html" );
-		return;
-	}
-
-	std::ostringstream oStr;
-	oStr << login_page;
+	LLURI login_page = LLURI(LLGridManager::getInstance()->getLoginPage());
+	LLSD params(login_page.queryMap());
 
-	// Use the right delimeter depending on how LLURI parses the URL
-	LLURI login_page_uri = LLURI(login_page);
-	
-	std::string first_query_delimiter = "&";
-	if (login_page_uri.queryMap().size() == 0)
-	{
-		first_query_delimiter = "?";
-	}
+	LL_DEBUGS("AppInit") << "login_page: " << login_page << LL_ENDL;
 
 	// Language
-	std::string language = LLUI::getLanguage();
-	oStr << first_query_delimiter<<"lang=" << language;
-	
+	params["lang"] = LLUI::getLanguage();
+
 	// First Login?
 	if (gSavedSettings.getBOOL("FirstLoginThisInstall"))
 	{
-		oStr << "&firstlogin=TRUE";
+		params["firstlogin"] = "TRUE"; // not bool: server expects string TRUE
 	}
 
 	// Channel and Version
-	std::string version = llformat("%s (%d)",
-								   LLVersionInfo::getShortVersion().c_str(),
-								   LLVersionInfo::getBuild());
+	params["version"] = llformat("%s (%d)",
+								 LLVersionInfo::getShortVersion().c_str(),
+								 LLVersionInfo::getBuild());
+	params["channel"] = LLVersionInfo::getChannel();
 
-	char* curl_channel = curl_escape(LLVersionInfo::getChannel().c_str(), 0);
-	char* curl_version = curl_escape(version.c_str(), 0);
+	// Grid
+	params["grid"] = LLGridManager::getInstance()->getGridId();
 
-	oStr << "&channel=" << curl_channel;
-	oStr << "&version=" << curl_version;
+	// add OS info
+	params["os"] = LLAppViewer::instance()->getOSInfo().getOSStringSimple();
 
-	curl_free(curl_channel);
-	curl_free(curl_version);
+	// sourceid
+	params["sourceid"] = gSavedSettings.getString("sourceid");
 
-	// Grid
-	char* curl_grid = curl_escape(LLGridManager::getInstance()->getGridId().c_str(), 0);
-	oStr << "&grid=" << curl_grid;
-	curl_free(curl_grid);
-	
-	// add OS info
-	char * os_info = curl_escape(LLAppViewer::instance()->getOSInfo().getOSStringSimple().c_str(), 0);
-	oStr << "&os=" << os_info;
-	curl_free(os_info);
-	
-	gViewerWindow->setMenuBackgroundColor(false, LLGridManager::getInstance()->isInSLBeta());
-	
-	if (web_browser->getCurrentNavUrl() != oStr.str())
+	// Make an LLURI with this augmented info
+	LLURI login_uri(LLURI::buildHTTP(login_page.authority(),
+									 login_page.path(),
+									 params));
+
+// <FS:CR>
+	//gViewerWindow->setMenuBackgroundColor(false, !LLGridManager::getInstance()->isInProductionGrid());
+// </FS:CR>
+
+	LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
+	if (web_browser->getCurrentNavUrl() != login_uri.asString())
 	{
-		web_browser->navigateTo( oStr.str(), "text/html" );
+		LL_DEBUGS("AppInit") << "loading:    " << login_uri << LL_ENDL;
+		web_browser->navigateTo( login_uri.asString(), "text/html" );
 	}
 }
 
 void LLPanelLogin::handleMediaEvent(LLPluginClassMedia* /*self*/, EMediaEvent event)
 {
-	if(event == MEDIA_EVENT_NAVIGATE_COMPLETE)
-	{
-		LLMediaCtrl* web_browser = sInstance->getChild<LLMediaCtrl>("login_html");
-		if (web_browser)
-		{
-			// *HACK HACK HACK HACK!
-			/* Stuff a Tab key into the browser now so that the first field will
-			** get the focus!  The embedded javascript on the page that properly
-			** sets the initial focus in a real web browser is not working inside
-			** the viewer, so this is an UGLY HACK WORKAROUND for now.
-			*/
-			// Commented out as it's not reliable
-			//web_browser->handleKey(KEY_TAB, MASK_NONE, false);
-		}
-	}
 }
 
 //---------------------------------------------------------------------------
@@ -956,28 +909,12 @@ void LLPanelLogin::onClickConnect(void *)
 
 		LLComboBox* combo = sInstance->getChild<LLComboBox>("server_combo");
 		LLSD combo_val = combo->getSelectedValue();
-		if (combo_val.isUndefined())
-		{
-			combo_val = combo->getValue();
-		}
-		if(combo_val.isUndefined())
-		{
-			LLNotificationsUtil::add("StartRegionEmpty");
-			return;
-		}		
-
-		std::string new_combo_value = combo_val.asString();
-		if (!new_combo_value.empty())
-		{
-			std::string match = "://";
-			size_t found = new_combo_value.find(match);
-			if (found != std::string::npos)	
-				new_combo_value.erase( 0,found+match.length());
-		}
 
+		// the grid definitions may come from a user-supplied grids.xml, so they may not be good
+		LL_DEBUGS("AppInit")<<"grid "<<combo_val.asString()<<LL_ENDL;
 		try
 		{
-			LLGridManager::getInstance()->setGridChoice(new_combo_value);
+			LLGridManager::getInstance()->setGridChoice(combo_val.asString());
 		}
 		catch (LLInvalidGridName ex)
 		{
@@ -986,19 +923,26 @@ void LLPanelLogin::onClickConnect(void *)
 			LLNotificationsUtil::add("InvalidGrid", args);
 			return;
 		}
-		updateStartSLURL();
+
+		// The start location SLURL has already been sent to LLStartUp::setStartSLURL
+
 		std::string username = sInstance->getChild<LLUICtrl>("username_combo")->getValue().asString();
-		gSavedSettings.setString("UserLoginInfo", credential_name());
+		gSavedSettings.setString("UserLoginInfo", credentialName()); // <FS:CR>
 
+// <FS:CR> Block release
 		LLSD blocked = FSData::getInstance()->allowed_login();
 		if (!blocked.isMap()) //hack for testing for an empty LLSD
 		{
+// </FS:CR>
 			if(username.empty())
 			{
+				// user must type in something into the username field
+// <FS:CR>
+				//LLNotificationsUtil::add("MustHaveAccountToLogIn");
 				LLSD args;
 				args["CURRENT_GRID"] = LLGridManager::getInstance()->getGridLabel();
-				// user must type in something into the username field
 				LLNotificationsUtil::add("MustHaveAccountToLogIn", args);
+// </FS:CR>
 			}
 			else
 			{
@@ -1009,13 +953,13 @@ void LLPanelLogin::onClickConnect(void *)
 				cred->identifierType(identifier_type);
 				LLSD allowed_credential_types;
 				LLGridManager::getInstance()->getLoginIdentifierTypes(allowed_credential_types);
-				
+			
 				// check the typed in credential type against the credential types expected by the server.
 				for(LLSD::array_iterator i = allowed_credential_types.beginArray();
 					i != allowed_credential_types.endArray();
 					i++)
 				{
-					
+				
 					if(i->asString() == identifier_type)
 					{
 						// yay correct credential type
@@ -1023,34 +967,40 @@ void LLPanelLogin::onClickConnect(void *)
 						return;
 					}
 				}
-				
+			
 				// Right now, maingrid is the only thing that is picky about
 				// credential format, as it doesn't yet allow account (single username)
 				// format creds.  - Rox.  James, we wanna fix the message when we change
 				// this.
-				LLNotificationsUtil::add("InvalidCredentialFormat");			
+				LLNotificationsUtil::add("InvalidCredentialFormat");
 			}
 		}
+// <FS:CR> Blocked Release
+		else
+		{
+			LLNotificationsUtil::add("BlockLoginInfo", blocked);
+		}
+// </FS:CR>
 	}
 }
 
 // static
-
 void LLPanelLogin::onClickNewAccount(void*)
 {
-	if ( !sInstance ) return;
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+	if (sInstance)
+	{
 // <AW: opensim>
-	LLSD grid_info;
-	LLGridManager::getInstance()->getGridData(grid_info);
+#ifdef OPENSIM
+		LLSD grid_info;
+		LLGridManager::getInstance()->getGridData(grid_info);
 
-	if (LLGridManager::getInstance()->isInOpenSim() && grid_info.has(GRID_REGISTER_NEW_ACCOUNT))
-		LLWeb::loadURLInternal(grid_info[GRID_REGISTER_NEW_ACCOUNT]);
-	else
+		if (LLGridManager::getInstance()->isInOpenSim() && grid_info.has(GRID_REGISTER_NEW_ACCOUNT))
+			LLWeb::loadURLInternal(grid_info[GRID_REGISTER_NEW_ACCOUNT]);
+		else
+#endif // OPENSIM
 // </AW: opensim>
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
-		LLWeb::loadURLInternal(sInstance->getString("create_account_url"));
-
+			LLWeb::loadURLExternal(LLTrans::getString("create_account_url"));
+	}
 }
 
 
@@ -1063,22 +1013,22 @@ void LLPanelLogin::onClickVersion(void*)
 //static
 void LLPanelLogin::onClickForgotPassword(void*)
 {
-	if (!sInstance) return;
-
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
+	if (sInstance)
+	{
 // <AW: opensim>
-	LLSD grid_info;
-	LLGridManager::getInstance()->getGridData(grid_info);
+#ifdef OPENSIM
+		LLSD grid_info;
+		LLGridManager::getInstance()->getGridData(grid_info);
 
-	if (LLGridManager::getInstance()->isInOpenSim() && grid_info.has(GRID_FORGOT_PASSWORD))
-		LLWeb::loadURLInternal(grid_info[GRID_FORGOT_PASSWORD]);
-	else
+		if (LLGridManager::getInstance()->isInOpenSim() && grid_info.has(GRID_FORGOT_PASSWORD))
+			LLWeb::loadURLInternal(grid_info[GRID_FORGOT_PASSWORD]);
+		else
+#endif // OPENSIM
 // </AW: opensim>
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
-		LLWeb::loadURLInternal(sInstance->getString( "forgot_password_url" ));
+		LLWeb::loadURLExternal(sInstance->getString( "forgot_password_url" ));
+	}
 }
 
-
 //static
 void LLPanelLogin::onClickHelp(void*)
 {
@@ -1089,364 +1039,362 @@ void LLPanelLogin::onClickHelp(void*)
 	}
 }
 
-//static
-void LLPanelLogin::onClickDelete(void*)
+// static
+void LLPanelLogin::onPassKey(LLLineEditor* caller, void* user_data)
 {
-	if (sInstance)
+	LLPanelLogin *This = (LLPanelLogin *) user_data;
+	This->mPasswordModified = TRUE;
+	if (gKeyboard->getKeyDown(KEY_CAPSLOCK) && sCapslockDidNotification == FALSE)
 	{
-		LLComboBox* saved_logins_combo = sInstance->getChild<LLComboBox>("username_combo");	
-		std::string credName = saved_logins_combo->getValue().asString();
-		if ( credName == gSavedSettings.getString("UserLoginInfo") )
-			  gSavedSettings.getControl("UserLoginInfo")->resetToDefault();
-		LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(credName);
-		gSecAPIHandler->deleteCredential(credential);
-		updateSavedLoginsCombo();
-		if(!saved_logins_combo->selectFirstItem()){
-			sInstance->getChild<LLUICtrl>("username_combo")->clear();
-			sInstance->getChild<LLUICtrl>("password_edit")->clear();
-		}
-		onSelectSavedLogin(saved_logins_combo,NULL);
+		// *TODO: use another way to notify user about enabled caps lock, see EXT-6858
+		sCapslockDidNotification = TRUE;
 	}
 }
 
-// <FS:TS> FIRE-7377: Add grid manager help button to explain how to do it
-//static
-void LLPanelLogin::onClickGridMgrHelp(void*)
+
+void LLPanelLogin::updateServer()
 {
-	if (sInstance)
-	{
-		LLViewerHelp* vhelp = LLViewerHelp::getInstance();
-		vhelp->showTopic(vhelp->gridMgrHelpTopic());
-	}
-}
-// </FS:TS> FIRE-7377
-
-// static
-void LLPanelLogin::onPassKey(LLLineEditor* caller, void* user_data)
-{
-	LLPanelLogin *This = (LLPanelLogin *) user_data;
-	This->mPasswordModified = TRUE;
-	if (gKeyboard->getKeyDown(KEY_CAPSLOCK) && sCapslockDidNotification == FALSE)
+	if (!sInstance)
 	{
-// *TODO: use another way to notify user about enabled caps lock, see EXT-6858
-		sCapslockDidNotification = TRUE;
+		return;
 	}
-}
-
-void LLPanelLogin::updateServer()
-{
-	try 
+	try
 	{
-	
-		updateServerCombo();
-
 		// if they've selected another grid, we should load the credentials
 		// for that grid and set them to the UI.
-		// WS: We're not using Gridbased logins, but the loginmanager!
-		if(sInstance)
-		{			
-			loadLoginPage();
-			updateLocationCombo(LLStartUp::getStartSLURL().getType() == LLSLURL::LOCATION);
+		if(!sInstance->areCredentialFieldsDirty())
+		{
+// <FS:CR>
+			//LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(LLGridManager::getInstance()->getGrid());
+			LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(credentialName());
+			//bool remember = sInstance->getChild<LLUICtrl>("remember_check")->getValue();
+			//sInstance->setFields(credential, remember);
+			sInstance->setFields(credential);
+// </FS:CR>
 		}
 
+		// update the login panel links
+		// <FS:CR> Unused by Firestorm
+		//bool system_grid = LLGridManager::getInstance()->isSystemGrid();
+		// </FS:CR>
+		
+		// Want to vanish not only create_new_account_btn, but also the
+		// title text over it, so turn on/off the whole layout_panel element.
+		// <FS:CR> or not!
+		//sInstance->getChild<LLLayoutPanel>("links")->setVisible(system_grid);
+		//sInstance->getChildView("forgot_password_text")->setVisible(system_grid);
+		// </FS:CR>
+
+		// grid changed so show new splash screen (possibly)
+		updateServerCombo();
+		loadLoginPage();
 	}
 	catch (LLInvalidGridName ex)
 	{
 		LL_WARNS("AppInit")<<"server '"<<ex.name()<<"' selection failed"<<LL_ENDL;
 		LLSD args;
 		args["GRID"] = ex.name();
-		LLNotificationsUtil::add("InvalidGrid", args);	
+		LLNotificationsUtil::add("InvalidGrid", args);
 		return;
 	}
 }
 
-// <FS:AW  grid management>
-void LLPanelLogin::gridListChanged(bool success)
+void LLPanelLogin::onSelectServer()
 {
-	updateServerCombo();
+	// The user twiddled with the grid choice ui.
+	// apply the selection to the grid setting.
+	LLPointer<LLCredential> credential;
+	
+	LLComboBox* server_combo = getChild<LLComboBox>("server_combo");
+	LLSD server_combo_val = server_combo->getSelectedValue();
+	LL_INFOS("AppInit") << "grid "<<server_combo_val.asString()<< LL_ENDL;
+	LLGridManager::getInstance()->setGridChoice(server_combo_val.asString());
+	
+	/*
+	 * Determine whether or not the value in the start_location_combo makes sense
+	 * with the new grid value.
+	 *
+	 * Note that some forms that could be in the location combo are grid-agnostic,
+	 * such as "MyRegion/128/128/0".  There could be regions with that name on any
+	 * number of grids, so leave them alone.  Other forms, such as
+	 * https://grid.example.com/region/Party%20Town/20/30/5 specify a particular
+	 * grid; in those cases we want to clear the location.
+	 */
+	LLComboBox* location_combo = getChild<LLComboBox>("start_location_combo");
+	S32 index = location_combo->getCurrentIndex();
+	switch (index)
+	{
+	case 0: // last location
+	case 1: // home location
+		// do nothing - these are grid-agnostic locations
+		break;
+		
+	default:
+		{
+			std::string location = location_combo->getValue().asString();
+			LLSLURL slurl(location); // generata a slurl from the location combo contents
+			if (   slurl.getType() == LLSLURL::LOCATION
+				&& slurl.getGrid() != LLGridManager::getInstance()->getGrid()
+				)
+			{
+				// the grid specified by the location is not this one, so clear the combo
+				location_combo->setCurrentByIndex(0); // last location on the new grid
+				location_combo->setTextEntry(LLStringUtil::null);
+			}
+		}			
+		break;
+	}
+	updateServer();
 }
-// </FS:AW  grid management>
 
-void LLPanelLogin::updateServerCombo()
+void LLPanelLogin::onLocationSLURL()
 {
-	if (!sInstance) 
-	{
-		return;	
-	}
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
-// <FS:AW  grid management>
-	LLGridManager::getInstance()->addGridListChangedCallback(&LLPanelLogin::gridListChanged);
-// </FS:AW  grid management>
-#endif // HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
-	// We add all of the possible values, sorted, and then add a bar and the current value at the top
-	LLComboBox* server_choice_combo = sInstance->getChild<LLComboBox>("server_combo");	
-	server_choice_combo->removeall();
+	LLComboBox* location_combo = getChild<LLComboBox>("start_location_combo");
+	std::string location = location_combo->getValue().asString();
+	LL_DEBUGS("AppInit") << location << LL_ENDL;
 
-	std::string current_grid = LLGridManager::getInstance()->getGrid();
-	std::map<std::string, std::string> known_grids = LLGridManager::getInstance()->getKnownGrids();
+	LLStartUp::setStartSLURL(location); // calls onUpdateStartSLURL, above 
+}
 
-	for (std::map<std::string, std::string>::iterator grid_choice = known_grids.begin();
-		 grid_choice != known_grids.end();
-		 grid_choice++)
-	{
-		if (!grid_choice->first.empty() && current_grid != grid_choice->first)
-		{
-			LL_DEBUGS("AppInit")<<"adding "<<grid_choice->first<<LL_ENDL;
-			server_choice_combo->add(grid_choice->second, grid_choice->first);
-		}
-	}
-	server_choice_combo->sortByName();
+std::string canonicalize_username(const std::string& name)
+{
+	std::string cname = name;
 	
-	server_choice_combo->addSeparator(ADD_TOP);
+// <FS:CR> Strip off any grid appendage
+	U32 arobase = cname.find("@");
+	if(arobase > 0)
+		cname = cname.substr(0, arobase - 1);
+// </FS:CR>
 	
-	LL_DEBUGS("AppInit")<<"adding current "<<current_grid<<LL_ENDL;
-	server_choice_combo->add(LLGridManager::getInstance()->getGridLabel(), 
-							 current_grid,
-							 ADD_TOP);	
-	server_choice_combo->selectFirstItem();
-	update_grid_help();
-// <FS:CR> FIRE-6401
-	updateSavedLoginsCombo(); // Let's refresh the saved user combo too. Our list may have changed.
-// </FS:CR> FIRE-6401
-}
-
+	// determine if the username is a first/last form or not.
+	size_t separator_index = cname.find_first_of(" ._");
+	std::string first = cname.substr(0, separator_index);
+	std::string last;
+	if (separator_index != cname.npos)
+	{
+		last = cname.substr(separator_index + 1, cname.npos);
+		LLStringUtil::trim(last);
+	}
+	else
+	{
+		// ...on Linden grids, single username users as considered to have
+		// last name "Resident"
+		last = "Resident";
+	}
 
+	// Username in traditional "firstname lastname" form.
+	return first + ' ' + last;
+}
 
-void LLPanelLogin::updateSavedLoginsCombo()
+// <FS:CR>
+void LLPanelLogin::addUsersToCombo(BOOL show_server)
 {
-	if (!sInstance) 
+	LLComboBox* combo = getChild<LLComboBox>("username_combo");
+	if (!combo) return;
+	
+	combo->removeall();
+	std::string current_creds=credentialName();
+	if(current_creds.find("@") < 1)
 	{
-		return;	
+		current_creds = gSavedSettings.getString("UserLoginInfo");
 	}
-	// We add all of the possible values, sorted, and then add a bar and the current value at the top
-	LLComboBox* saved_logins_combo = sInstance->getChild<LLComboBox>("username_combo");	
-	saved_logins_combo->removeall();
 	
-	std::string current_creds=credential_name();
-	if(current_creds.find("@")<1) current_creds=gSavedSettings.getString("UserLoginInfo"); 
-
 	std::vector<std::string> logins = gSecAPIHandler->listCredentials();
 	LLUUID selectid;
 	LLStringUtil::trim(current_creds);
-
 	for (std::vector<std::string>::iterator login_choice = logins.begin();
 		 login_choice != logins.end();
 		 login_choice++)
 	{
-			std::string name=*login_choice;
-			LLStringUtil::trim(name);
-
-			std::string credname=name;
-			std::string gridname=name;
-			U32 arobase = gridname.find("@");
-			if (arobase != std::string::npos && arobase + 1 < gridname.length() && arobase > 1)
+		std::string name = *login_choice;
+		LLStringUtil::trim(name);
+		
+		std::string credname = name;
+		std::string gridname = name;
+		U32 arobase = gridname.find("@");
+		if (arobase != std::string::npos && arobase + 1 < gridname.length() && arobase > 1)
+		{
+			gridname = gridname.substr(arobase + 1, gridname.length() - arobase - 1);
+			name = name.substr(0,arobase);
+			
+			const std::string grid_label = LLGridManager::getInstance()->getGridLabel(gridname);
+			
+			bool add_grid = false;
+			/// We only want to append a grid label when the user has enabled logging into other grids, or
+			/// they are using the OpenSim build. That way users who only want Second Life Agni can remain
+			/// blissfully ignorant. We will also not show them any saved credential that isn't Agni because
+			/// they don't want them.
+			if (SECOND_LIFE_MAIN_LABEL == grid_label)
 			{
-				gridname = gridname.substr(arobase + 1, gridname.length() - arobase - 1);
-				name = name.substr(0,arobase);
-
-// <FS:AW optional opensim support>
-				const std::string grid_label = LLGridManager::getInstance()->getGridLabel(gridname);
-
-				bool add_grid = false;
-				/// <FS:CR> We only want to append a grid label when the user has enabled logging into other grids,
-				/// that way users who only want Second Life Agni can remain blissfully ignorant.
-				/// We will also not show them any saved credential that isn't Agni because they don't want them.
-				static LLCachedControl<bool> sShowServer(gSavedSettings, "ForceShowGrid", false);
-				if (SECOND_LIFE_MAIN_LABEL == grid_label)
-				{
-					if (sShowServer)
-						name.append( " @ " + grid_label);
-					add_grid= true;
-				}
-#ifdef HAS_OPENSIM_SUPPORT
-				else if (!grid_label.empty() && sShowServer)
-				{
-					name.append(" @ " + grid_label);
-					add_grid= true;
-				}
-#else  // HAS_OPENSIM_SUPPORT 
-				else if (SECOND_LIFE_BETA_LABEL == grid_label && sShowServer)
-				{
-					name.append(" @ " + grid_label);
-					add_grid= true;
-				}
-#endif // HAS_OPENSIM_SUPPORT 
-				if (add_grid)
-				{
-					saved_logins_combo->add(name,LLSD(credname));
-				}
-// </FS:AW optional opensim support>
+				if (show_server)
+					name.append( " @ " + grid_label);
+				add_grid = true;
+			}
+#ifdef OPENSIM
+			else if (!grid_label.empty() && show_server)
+			{
+				name.append(" @ " + grid_label);
+				add_grid = true;
+			}
+#else  // OPENSIM
+			else if (SECOND_LIFE_BETA_LABEL == grid_label && show_server)
+			{
+				name.append(" @ " + grid_label);
+				add_grid = true;
 			}
+#endif // OPENSIM
+			if (add_grid)
+			{
+				combo->add(name,LLSD(credname));
+			}
+		}
 	}
+	combo->sortByName();
+	combo->selectByValue(LLSD(current_creds));
+}
 
-	saved_logins_combo->sortByName();	
-	saved_logins_combo->selectByValue(LLSD(current_creds));
-	//saved_logins_combo->setCurrentByID(selectid;
-	/*std::string gridname=current_creds;
-	U32 arobase = gridname.find("@");
-	if (arobase != -1 && arobase +1 < gridname.length() && arobase>1){
-		current_creds = current_creds.substr(0,arobase);
-		saved_logins_combo->addSeparator(ADD_TOP);
-		saved_logins_combo->add(current_creds,credential_name(),ADD_TOP);
+// static
+void LLPanelLogin::onClickRemove(void*)
+{
+	if (sInstance)
+	{
+		LLComboBox* combo = sInstance->getChild<LLComboBox>("username_combo");
+		std::string credName = combo->getValue().asString();
+		if ( credName == gSavedSettings.getString("UserLoginInfo") )
+			gSavedSettings.getControl("UserLoginInfo")->resetToDefault();
+		LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(credName);
+		gSecAPIHandler->deleteCredential(credential);
+		sInstance->addUsersToCombo(gSavedSettings.getBOOL("ForceShowGrid"));
+		if(!combo->selectFirstItem()){
+			sInstance->getChild<LLUICtrl>("username_combo")->clear();
+			sInstance->getChild<LLUICtrl>("password_edit")->clear();
+		}
 	}
-	saved_logins_combo->selectFirstItem();*/
 }
 
-// static
-void LLPanelLogin::onSelectServer(LLUICtrl*, void*)
+//static
+void LLPanelLogin::onClickGridMgrHelp(void*)
 {
-	// *NOTE: The paramters for this method are ignored. 
-	// LLPanelLogin::onServerComboLostFocus(LLFocusableElement* fe, void*)
-	// calls this method.
+	if (sInstance)
+	{
+		LLViewerHelp* vhelp = LLViewerHelp::getInstance();
+		vhelp->showTopic(vhelp->gridMgrHelpTopic());
+	}
+}
 
-	// The user twiddled with the grid choice ui.
-	// apply the selection to the grid setting.
-//	LLPointer<LLCredential> credential; <- SA: is this ever used?
+void LLPanelLogin::onSelectUser()
+{
+	// *NOTE: The paramters for this method are ignored.
+	LL_INFOS("AppInit") << "onSelectUser()" << LL_ENDL;
 	
-	LLComboBox* combo = sInstance->getChild<LLComboBox>("server_combo");
+	LLComboBox* combo = sInstance->getChild<LLComboBox>("username_combo");
 	LLSD combo_val = combo->getSelectedValue();
 	if (combo_val.isUndefined())
 	{
 		combo_val = combo->getValue();
 	}
-
-
-// <AW: opensim>
-	std::string new_combo_value = combo_val.asString();
-	if (!new_combo_value.empty())
+	LLPointer<LLCredential> credential =  gSecAPIHandler->loadCredential(combo_val);
+	
+	//combo = sInstance->getChild<LLComboBox>("start_location_combo");
+	//LLStartUp::setStartSLURL(LLSLURL(gSavedSettings.getString("LoginLocation")));
+	
+	std::string credName = combo_val.asString();
+	
+	// if they've selected another grid, we should load the credentials
+	// for that grid and set them to the UI.
+	if(sInstance && !sInstance->areCredentialFieldsDirty())
 	{
-		std::string match = "://";
-		size_t found = new_combo_value.find(match);
-		if (found != std::string::npos)	
-			new_combo_value.erase( 0,found+match.length());
+		LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(credName);
+		sInstance->setFields(credential);
 	}
-
-	// e.g user clicked into loginpage
-	if(LLGridManager::getInstance()->getGrid() == new_combo_value)
+	U32 arobase = credName.find("@");
+	if (arobase != -1 && arobase +1 < credName.length())
+		credName = credName.substr(arobase + 1, credName.length() - arobase - 1);
+	if(LLGridManager::getInstance()->getGrid() == credName)
 	{
+		// Even if we didn't change grids, this user might have favorites stored.
+		addFavoritesToStartLocation();
 		return;
 	}
-
+	
 	try
 	{
-		LLGridManager::getInstance()->setGridChoice(new_combo_value);
+		LLGridManager::getInstance()->setGridChoice(credName);
 	}
 	catch (LLInvalidGridName ex)
 	{
 		// do nothing
 	}
-// </AW: opensim>
-	//Clear the PW for security reasons, if the Grid changed manually.
-	sInstance->getChild<LLLineEditor>("password_edit")->clear();
-
-	LL_INFOS("AppInit") << "onSelectServer " << new_combo_value << LL_ENDL;
-
-	
-	combo = sInstance->getChild<LLComboBox>("start_location_combo");	
-//	combo->setCurrentByIndex(1);  <- SA: Why???
-
-	
-	LLStartUp::setStartSLURL(LLSLURL(gSavedSettings.getString("LoginLocation")));
-
-
-
-	// This new selection will override preset uris
-	// from the command line.
 	updateServer();
-	updateLoginPanelLinks();
-}
-
-
-void LLPanelLogin::usernameLostFocus(LLFocusableElement* caller, void* userdata)
-{
-	if(sInstance)
-		onSelectSavedLogin((LLUICtrl*)caller, userdata);
+	addFavoritesToStartLocation();
 }
 
 // static
-void LLPanelLogin::onSelectSavedLogin(LLUICtrl*, void*)
+void LLPanelLogin::updateServerCombo()
 {
-	// *NOTE: The paramters for this method are ignored. 
-	LL_INFOS("AppInit") << "onSelectSavedLogin" << LL_ENDL;
-
+	if (!sInstance) return;
 	
-	LLComboBox* combo = sInstance->getChild<LLComboBox>("username_combo");
-	LLSD combo_val = combo->getSelectedValue();
-	if (combo_val.isUndefined())
-	{
-		combo_val = combo->getValue();
-	}
+#ifdef OPENSIM
+	LLGridManager::getInstance()->addGridListChangedCallback(&LLPanelLogin::gridListChanged);
+#endif // OPENSIM
+	// We add all of the possible values, sorted, and then add a bar and the current value at the top
+	LLComboBox* server_choice_combo = sInstance->getChild<LLComboBox>("server_combo");
+	server_choice_combo->removeall();
 
+	std::string current_grid = LLGridManager::getInstance()->getGrid();
+	std::map<std::string, std::string> known_grids = LLGridManager::getInstance()->getKnownGrids();
 	
-	std::string credName = combo_val.asString();
-	
-	if(combo_val.asString().find("@") == std::string::npos)
-		return;
-
-
-	// if they've selected another grid, we should load the credentials
-	// for that grid and set them to the UI.
-	if(sInstance)
+	for (std::map<std::string, std::string>::iterator grid_choice = known_grids.begin();
+		 grid_choice != known_grids.end();
+		 grid_choice++)
 	{
-		LLPointer<LLCredential> credential = gSecAPIHandler->loadCredential(credName);
-		if(credential->getIdentifier()["first_name"].asString().size()<=0 && credential->getIdentifier()["account_name"].asString().size()<=0 ) return;
-		LLSD authenticator = credential->getAuthenticator();
-		sInstance->setFields(credential);
+		if (!grid_choice->first.empty() && current_grid != grid_choice->first)
+		{
+			LL_DEBUGS("AppInit") << "adding " << grid_choice->first << LL_ENDL;
+			server_choice_combo->add(grid_choice->second, grid_choice->first);
+		}
 	}
-
+	server_choice_combo->sortByName();
+	server_choice_combo->addSeparator(ADD_TOP);
+	
+	LL_DEBUGS("AppInit") << "adding current " << current_grid << LL_ENDL;
+	server_choice_combo->add(LLGridManager::getInstance()->getGridLabel(),
+							 current_grid,
+							 ADD_TOP);
+	server_choice_combo->selectFirstItem();
+	update_grid_help();
 }
 
-/*
-void LLPanelLogin::onServerComboLostFocus(LLFocusableElement* fe)
+// static
+std::string LLPanelLogin::credentialName()
 {
-	if (!sInstance)
-	{
-		return;
-	}
-
-	LLComboBox* combo = sInstance->getChild<LLComboBox>("server_combo");
-	if(fe == combo)
-	{
-		onSelectServer(combo, NULL);
-	}
+	std::string username = sInstance->getChild<LLUICtrl>("username_combo")->getValue().asString();
+	LLStringUtil::trim(username);
+	
+	U32 arobase = username.find("@");
+	if (arobase != std::string::npos && arobase + 1 < username.length())
+		username = username.substr(0,arobase);
+	LLStringUtil::trim(username);
+	
+	return username + "@" + LLGridManager::getInstance()->getGrid();
 }
-*/
 
-// <AW: opensim>
-void LLPanelLogin::updateLoginPanelLinks()
+// static
+void LLPanelLogin::gridListChanged(bool success)
 {
-	if(!sInstance) return;
-
-#ifdef HAS_OPENSIM_SUPPORT // <FS:AW optional opensim support>
-	LLSD grid_info;
-	LLGridManager::getInstance()->getGridData(grid_info);
-
-	bool system_grid = grid_info.has(GRID_IS_SYSTEM_GRID_VALUE);
-	bool has_register = LLGridManager::getInstance()->isInOpenSim() 
-				&& grid_info.has(GRID_REGISTER_NEW_ACCOUNT);
-	bool has_password = LLGridManager::getInstance()->isInOpenSim() 
-				&& grid_info.has(GRID_FORGOT_PASSWORD);
-// <FS:AW optional opensim support>
-#else // HAS_OPENSIM_SUPPORT 
-	bool system_grid = true;
-	bool has_register = true;
-	bool has_password = true;
-#endif // HAS_OPENSIM_SUPPORT 
-// </FS:AW optional opensim support>
-
-	// need to call through sInstance, as it's called from onSelectServer, which
-	// is static.
-	sInstance->getChildView("create_new_account_text")->setVisible( system_grid || has_register);
-	sInstance->getChildView("forgot_password_text")->setVisible( system_grid || has_password);
+	updateServer();
 }
-// </AW: opensim>
- 
+
+/////////////////////////
+//    Mode selector    //
+/////////////////////////
+
 void LLPanelLogin::onModeChange(const LLSD& original_value, const LLSD& new_value)
 {
 	// <FS:AO> make sure toolbar settings are reset on mode change
 	llinfos << "Clearing toolbar settings." << llendl;
-        gSavedSettings.setBOOL("ResetToolbarSettings",TRUE);
-
+	gSavedSettings.setBOOL("ResetToolbarSettings",TRUE);
+	
 	if (original_value.asString() != new_value.asString())
 	{
 		LLNotificationsUtil::add("ModeChange", LLSD(), LLSD(), boost::bind(&LLPanelLogin::onModeChangeConfirm, this, original_value, new_value, _1, _2));
@@ -1458,53 +1406,16 @@ void LLPanelLogin::onModeChangeConfirm(const LLSD& original_value, const LLSD& n
 	S32 option = LLNotificationsUtil::getSelectedOption(notification, response);
 	switch (option)
 	{
-	case 0:
-		gSavedSettings.getControl("SessionSettingsFile")->set(new_value);
-		LLAppViewer::instance()->requestQuit();
-		break;
-	case 1:
-		// revert to original value
-		getChild<LLUICtrl>("mode_combo")->setValue(original_value);
-		break;
-	default:
-		break;
-	}
-}
-
-std::string canonicalize_username(const std::string& name)
-{
-	std::string cname = name;
-	LLStringUtil::trim(cname);
-
-	// determine if the username is a first/last form or not.
-	size_t separator_index = cname.find_first_of(" ._");
-	std::string first = cname.substr(0, separator_index);
-	std::string last;
-	if (separator_index != cname.npos)
-	{
-		last = cname.substr(separator_index + 1, cname.npos);
-		LLStringUtil::trim(last);
-	}
-	else
-	{
-		// ...on Linden grids, single username users as considered to have
-		// last name "Resident"
-		last = "Resident";
+		case 0:
+			gSavedSettings.getControl("SessionSettingsFile")->set(new_value);
+			LLAppViewer::instance()->requestQuit();
+			break;
+		case 1:
+			// revert to original value
+			getChild<LLUICtrl>("mode_combo")->setValue(original_value);
+			break;
+		default:
+			break;
 	}
-
-	// Username in traditional "firstname lastname" form.
-	return first + ' ' + last;
-}
-
-std::string LLPanelLogin::credential_name()
-{
-	std::string username = sInstance->getChild<LLUICtrl>("username_combo")->getValue().asString();
-	LLStringUtil::trim(username);
-
-	U32 arobase = username.find("@");
-	if (arobase != std::string::npos && arobase + 1 < username.length())
-		username = username.substr(0,arobase);
-	LLStringUtil::trim(username);
-	
-	return username + "@" +  LLGridManager::getInstance()->getGrid();
 }
+// </FS:CR>
