diff --git a/Source/indra/newview/llfloaterworldmap.cpp b/Source/indra/newview/llfloaterworldmap.cpp
index 98d38a6..cf8c964 100644
--- a/Source/indra/newview/llfloaterworldmap.cpp
+++ b/Source/indra/newview/llfloaterworldmap.cpp
@@ -664,8 +664,14 @@ void LLFloaterWorldMap::trackLocation(const LLVector3d& pos_global)
 	}
 	
 	std::string sim_name = sim_info->getName();
-	F32 region_x = (F32)fmod( pos_global.mdV[VX], (F64)REGION_WIDTH_METERS );
-	F32 region_y = (F32)fmod( pos_global.mdV[VY], (F64)REGION_WIDTH_METERS );
+// <FS:CR> Aurora-sim var region teleports
+	//F32 region_x = (F32)fmod( pos_global.mdV[VX], (F64)REGION_WIDTH_METERS );
+	//F32 region_y = (F32)fmod( pos_global.mdV[VY], (F64)REGION_WIDTH_METERS );
+	U32 locX, locY;
+	from_region_handle(sim_info->getHandle(), &locX, &locY);
+	F32 region_x = pos_global.mdV[VX] - locX;
+	F32 region_y = pos_global.mdV[VY] - locY;
+// </FS:CR>
 	std::string full_name = llformat("%s (%d, %d, %d)", 
 									 sim_name.c_str(), 
 									 llround(region_x), 
@@ -716,19 +722,29 @@ void LLFloaterWorldMap::enableTeleportCoordsDisplay( bool enabled )
 // update display of teleport destination coordinates - pos is in global coordinates
 void LLFloaterWorldMap::updateTeleportCoordsDisplay( const LLVector3d& pos )
 {
-	// if we're going to update their value, we should also enable them
-	enableTeleportCoordsDisplay( true );
-	
 	// convert global specified position to a local one
-	F32 region_local_x = (F32)fmod( pos.mdV[VX], (F64)REGION_WIDTH_METERS );
-	F32 region_local_y = (F32)fmod( pos.mdV[VY], (F64)REGION_WIDTH_METERS );
-	//F32 region_local_z = (F32)fmod( pos.mdV[VZ], (F64)REGION_WIDTH_METERS );
-	F32 region_local_z = (F32)pos.mdV[VZ];
-
-	// write in the values
-	childSetValue("teleport_coordinate_x", region_local_x );
-	childSetValue("teleport_coordinate_y", region_local_y );
-	childSetValue("teleport_coordinate_z", region_local_z );
+// <FS:CR> Aurora-Sim var region support
+	//F32 region_local_x = (F32)fmod( pos.mdV[VX], (F64)REGION_WIDTH_METERS );
+	//F32 region_local_y = (F32)fmod( pos.mdV[VY], (F64)REGION_WIDTH_METERS );
+	LLSimInfo* sim_info = LLWorldMap::getInstance()->simInfoFromPosGlobal(pos);
+	if (sim_info)
+	{
+		// if we're going to update their value, we should also enable them
+		enableTeleportCoordsDisplay( true );
+		
+		U32 locX, locY;
+		from_region_handle(sim_info->getHandle(), &locX, &locY);
+		F32 region_local_x = pos.mdV[VX] - locX;
+		F32 region_local_y = pos.mdV[VY] - locY;
+		//F32 region_local_z = (F32)fmod( pos.mdV[VZ], (F64)REGION_WIDTH_METERS );
+		F32 region_local_z = (F32)pos.mdV[VZ];
+
+		// write in the values
+		childSetValue("teleport_coordinate_x", region_local_x );
+		childSetValue("teleport_coordinate_y", region_local_y );
+		childSetValue("teleport_coordinate_z", region_local_z );
+	}
+// </FS:CR>
 }
 
 void LLFloaterWorldMap::updateLocation()
@@ -777,7 +793,10 @@ void LLFloaterWorldMap::updateLocation()
 				
 				// Figure out where user is
 				// Set the current SLURL
-				mSLURL = LLSLURL(agent_sim_name, gAgent.getPositionGlobal());
+// <FS:CR> Aurora-sim var region teleports
+				//mSLURL = LLSLURL(agent_sim_name, gAgent.getPositionGlobal());
+				mSLURL = LLSLURL(agent_sim_name, gAgent.getPositionAgent());
+// </FS:CR>
 			}
 		}
 		
