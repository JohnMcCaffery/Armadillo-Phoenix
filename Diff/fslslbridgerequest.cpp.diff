diff --git a/Source/indra/newview/fslslbridgerequest.cpp b/Source/indra/newview/fslslbridgerequest.cpp
index 6eeaf1f..c9542b5 100644
--- a/Source/indra/newview/fslslbridgerequest.cpp
+++ b/Source/indra/newview/fslslbridgerequest.cpp
@@ -4,7 +4,7 @@
  *
  * $LicenseInfo:firstyear=2011&license=fsviewerlgpl$
  * Phoenix Firestorm Viewer Source Code
- * Copyright (C) 2011, The Phoenix Viewer Project, Inc.
+ * Copyright (C) 2011, The Phoenix Firestorm Project, Inc.
  * 
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -20,22 +20,20 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  * 
- * The Phoenix Viewer Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * The Phoenix Firestorm Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * http://www.firestormviewer.org
  * $/LicenseInfo$
  */
 
 #include "llviewerprecompiledheaders.h"
+
 #include "fslslbridgerequest.h"
+
+#include "fscommon.h"
 #include "fslslbridge.h"
-#include "llagent.h"  // for gAgent
-#include "llhttpclient.h"
 #include <string>
 #include <boost/tokenizer.hpp> // for radar 
-#include "llpanel.h"
-#include "llpanelpeople.h"
-#include "llavatarlist.h"
-#include "llavatarlistitem.h"
-#include "llfloatersidepanelcontainer.h"
+#include "fsradar.h"
 
 #ifdef LL_STANDALONE
 #include <expat.h>
@@ -62,13 +60,13 @@ void FSLSLBridgeRequestManager::processBridgeCall(const LLSD& content)
 {
 	std::string strContent = content.asString();
 	llinfos << "Got info: " << strContent << llendl;
-	
 }
 
 FSLSLBridgeRequestResponder::FSLSLBridgeRequestResponder() 
 { 
 	//FSLSLBridgeRequestManager::instance().initSingleton(); 
 }
+
 //If we get back a normal response, handle it here
 void FSLSLBridgeRequestResponder::result(const LLSD& content)
 {
@@ -87,18 +85,15 @@ void FSLSLBridgeRequestResponder::error(U32 status, const std::string& reason)
 	<< status << ": " << reason << ")" << llendl;
 }
 
-
 // AO: The below handler is used to parse return data from the bridge, requesting bulk ZOffset updates.
 FSLSLBridgeRequestRadarPosResponder::FSLSLBridgeRequestRadarPosResponder()
 {
 }
 void FSLSLBridgeRequestRadarPosResponder::result(const LLSD& content)
 {
-	LLPanel* panel_people = LLFloaterSidePanelContainer::getPanel("people", "panel_people");
-	if (panel_people)
+	FSRadar* radar = FSRadar::getInstance();
+	if (radar)
 	{
-		LLAvatarList* nearbyList = ((LLPanelPeople*)panel_people)->getNearbyList();
-		
 		std::string strContent = content.asString();
 		//llinfos << "Got info: " << strContent << llendl;	
 		// AO: parse content into pairs of [agent UUID,agent zHeight] , update our peoplepanel radar for each one
@@ -114,10 +109,10 @@ void FSLSLBridgeRequestRadarPosResponder::result(const LLSD& content)
 			targetAv = LLUUID(*(tok_iter++));
 			targetZ = (F32)::atof((*tok_iter).c_str());
 			
-			LLAvatarListItem* avListItem = nearbyList->getAvatarListItem(targetAv);
-			if (avListItem != NULL)
+			FSRadarEntry* entry = radar->getEntry(targetAv);
+			if (entry)
 			{
-				avListItem->setZOffset((F32)(targetZ));
+				entry->setZOffset((F32)(targetZ));
 				//llinfos << targetAv << " ::: " << targetZ << llendl;
 			}
 		}
