diff --git a/Source/indra/newview/llpanelgroupgeneral.cpp b/Source/indra/newview/llpanelgroupgeneral.cpp
index e102981..61429b8 100644
--- a/Source/indra/newview/llpanelgroupgeneral.cpp
+++ b/Source/indra/newview/llpanelgroupgeneral.cpp
@@ -28,12 +28,12 @@
 
 #include "llpanelgroupgeneral.h"
 
-#include "lluictrlfactory.h"
+#include "llavatarnamecache.h"
 #include "llagent.h"
+#include "llsdparam.h"
+#include "lluictrlfactory.h"
 #include "roles_constants.h"
 
-#include "lleconomy.h" // <FS:AW FIRE-7091 group creation cost inaccurate on opensim>
-
 // UI elements
 #include "llbutton.h"
 #include "llcheckboxctrl.h"
@@ -53,10 +53,10 @@
 #include "lltrans.h"
 #include "llviewerwindow.h"
 
-// for copy URI button
-#include "llclipboard.h"
-
+// Firestorm includes
 #include "exogroupmutelist.h"
+#include "llclipboard.h"
+#include "lleconomy.h" // <FS:AW FIRE-7091 group creation cost inaccurate on opensim>
 
 static LLRegisterPanelClassWrapper<LLPanelGroupGeneral> t_panel_group_general("panel_group_general");
 
@@ -105,8 +105,11 @@ BOOL LLPanelGroupGeneral::postBuild()
 		mEditCharter->setFocusReceivedCallback(boost::bind(onFocusEdit, _1, this));
 		mEditCharter->setFocusChangedCallback(boost::bind(onFocusEdit, _1, this));
 	}
-	// set up callback for copy URI button
-	childSetCommitCallback("copy_uri",boost::bind(&LLPanelGroupGeneral::onCopyURI,this),NULL);
+	// <FS> set up callbacks for copy URI and name buttons
+	childSetCommitCallback("copy_uri", boost::bind(&LLPanelGroupGeneral::onCopyURI, this), NULL);
+	childSetCommitCallback("copy_name", boost::bind(&LLPanelGroupGeneral::onCopyName, this), NULL);
+	childSetEnabled("copy_name", FALSE);
+	// </FS>
 
 
 	mListVisibleMembers = getChild<LLNameListCtrl>("visible_members", recurse);
@@ -396,12 +399,13 @@ bool LLPanelGroupGeneral::apply(std::string& mesg)
 				return false;
 			}
 
-// <FS:AW FIRE-7091 group creation cost inaccurate on opensim>
+			// <FS:AW> FIRE-7091 group creation cost inaccurate on opensim>
+			//LLNotificationsUtil::add("CreateGroupCost",  LLSD(), LLSD(), boost::bind(&LLPanelGroupGeneral::createGroupCallback, this, _1, _2));
 			LLSD args;
 			S32 cost =  LLGlobalEconomy::Singleton::getInstance()->getPriceGroupCreate();
 			args["[COST]"] = llformat("%d", cost);
 			LLNotificationsUtil::add("CreateGroupCost",  args, LLSD(), boost::bind(&LLPanelGroupGeneral::createGroupCallback, this, _1, _2));
-// </FS:AW FIRE-7091 group creation cost inaccurate on opensim>
+			// </FS:AW> FIRE-7091 group creation cost inaccurate on opensim>
 
 			return false;
 		}
@@ -739,6 +743,11 @@ void LLPanelGroupGeneral::update(LLGroupChange gc)
 		}
 	}
 
+	// <FS:Ansariel> Copy group name button
+	childSetEnabled("copy_name", !gdatap->mName.empty());
+	mGroupName = gdatap->mName;
+	// </FS:Ansariel>
+
 	resetDirty();
 }
 
@@ -748,84 +757,54 @@ void LLPanelGroupGeneral::updateMembers()
 
 	LLGroupMgrGroupData* gdatap = LLGroupMgr::getInstance()->getGroupData(mGroupID);
 
-	if (!mListVisibleMembers || !gdatap 
+	if (!mListVisibleMembers 
+		|| !gdatap 
 		|| !gdatap->isMemberDataComplete()
 		|| gdatap->mMembers.empty())
 	{
 		return;
 	}
 
+	LLTimer update_time;
+	update_time.setTimerExpirySec(UPDATE_MEMBERS_SECONDS_PER_FRAME);
+	
 	// <FS:ND> FIRE-6074; If the group changes, mMemberPRogresss is invalid, as it belongs to a different LLGroupMgrGroupData. Reset it, start over.
 	if( mIteratorGroup != mGroupID )
 	{
-		mMemberProgress == gdatap->mMembers.begin();
+		mMemberProgress = gdatap->mMembers.begin();
 		mIteratorGroup = mGroupID;
 	}
 	// </FS:ND> FIRE-6074
 
-	static LLTimer all_timer;
-	static LLTimer sd_timer;
-	static LLTimer element_timer;
 
-	all_timer.reset();
-	S32 i = 0;
+	LLAvatarName av_name;
 
-	for( ; mMemberProgress != gdatap->mMembers.end() && i<UPDATE_MEMBERS_PER_FRAME; 
-			++mMemberProgress, ++i)
+	for( ; mMemberProgress != gdatap->mMembers.end() && !update_time.hasExpired(); 
+			++mMemberProgress)
 	{
-		lldebugs << "Adding " << mMemberProgress->first << ", " << mMemberProgress->second->getTitle() << llendl;
 		LLGroupMemberData* member = mMemberProgress->second;
 		if (!member)
 		{
 			continue;
 		}
-		// Owners show up in bold.
-		std::string style = "NORMAL";
-		sd_timer.reset();
-		LLSD row;
-		row["id"] = member->getID();
 
-		row["columns"][0]["column"] = "name";
-		row["columns"][0]["font"]["name"] = "SANSSERIF_SMALL";
-		row["columns"][0]["font"]["style"] = style;
-		// value is filled in by name list control
-
-		row["columns"][1]["column"] = "title";
-		row["columns"][1]["value"] = member->getTitle();
-		row["columns"][1]["font"]["name"] = "SANSSERIF_SMALL";
-		row["columns"][1]["font"]["style"] = style;
-
-		std::string status = member->getOnlineStatus();
-		
-		row["columns"][2]["column"] = "status";
-		row["columns"][2]["value"] = status;
-		row["columns"][2]["font"]["name"] = "SANSSERIF_SMALL";
-		row["columns"][2]["font"]["style"] = style;
-
-		sSDTime += sd_timer.getElapsedTimeF32();
-
-		element_timer.reset();
-		LLScrollListItem* member_row = mListVisibleMembers->addElement(row);
-		
-		if ( member->isOwner() )
+//		if (LLAvatarNameCache::get(mMemberProgress->first, &av_name))
 		{
-			LLScrollListText* name_textp = dynamic_cast<LLScrollListText*>(member_row->getColumn(0));
-			if (name_textp)
-				name_textp->setFontStyle(LLFontGL::BOLD);
+			addMember(mMemberProgress->second);
 		}
-		sElementTime += element_timer.getElapsedTimeF32();
+//		else
+//		{
+//			// If name is not cached, onNameCache() should be called when it is cached and add this member to list.
+//			LLAvatarNameCache::get(mMemberProgress->first, 
+//									boost::bind(&LLPanelGroupGeneral::onNameCache,
+//												this, gdatap->getMemberVersion(), member, _2));
+//		}
 	}
-	sAllTime += all_timer.getElapsedTimeF32();
 
-	lldebugs << "Updated " << i << " of " << UPDATE_MEMBERS_PER_FRAME << "members in the list." << llendl;
 	if (mMemberProgress == gdatap->mMembers.end())
 	{
 		lldebugs << "   member list completed." << llendl;
 		mListVisibleMembers->setEnabled(TRUE);
-
-		lldebugs << "All Time: " << sAllTime << llendl;
-		lldebugs << "SD Time: " << sSDTime << llendl;
-		lldebugs << "Element Time: " << sElementTime << llendl;
 	}
 	else
 	{
@@ -834,6 +813,43 @@ void LLPanelGroupGeneral::updateMembers()
 	}
 }
 
+void LLPanelGroupGeneral::addMember(LLGroupMemberData* member)
+{
+	LLNameListCtrl::NameItem item_params;
+	item_params.value = member->getID();
+
+	LLScrollListCell::Params column;
+	item_params.columns.add().column("name").font.name("SANSSERIF_SMALL");
+
+	item_params.columns.add().column("title").value(member->getTitle()).font.name("SANSSERIF_SMALL");
+
+	item_params.columns.add().column("status").value(member->getOnlineStatus()).font.name("SANSSERIF_SMALL");
+
+	LLScrollListItem* member_row = mListVisibleMembers->addNameItemRow(item_params);
+
+	if ( member->isOwner() )
+	{
+		LLScrollListText* name_textp = dynamic_cast<LLScrollListText*>(member_row->getColumn(0));
+		if (name_textp)
+			name_textp->setFontStyle(LLFontGL::BOLD);
+	}
+}
+
+void LLPanelGroupGeneral::onNameCache(const LLUUID& update_id, LLGroupMemberData* member, const LLAvatarName& av_name)
+{
+	LLGroupMgrGroupData* gdatap = LLGroupMgr::getInstance()->getGroupData(mGroupID);
+
+	if (!gdatap
+		|| !gdatap->isMemberDataComplete()
+		|| gdatap->getMemberVersion() != update_id)
+	{
+		// Stale data
+		return;
+	}
+
+	addMember(member);
+}
+
 void LLPanelGroupGeneral::updateChanged()
 {
 	// List all the controls we want to check for changes...
@@ -971,21 +987,29 @@ void	LLPanelGroupGeneral::resetDirty()
 void LLPanelGroupGeneral::setGroupID(const LLUUID& id)
 {
 	LLPanelGroupTab::setGroupID(id);
-	// get group key display and copy URI button pointers
+	// <FS> Get group key display and copy URI/name button pointers
 	LLTextEditor* groupKeyEditor = getChild<LLTextEditor>("group_key");
 	LLButton* copyURIButton = getChild<LLButton>("copy_uri");
+	LLButton* copyNameButton = getChild<LLButton>("copy_name");
 	// happens when a new group is created
+	// </FS>
 	if(id == LLUUID::null)
 	{
+		// <FS>
 		if (groupKeyEditor)
 			groupKeyEditor->setValue(LLSD());
 
 		if (copyURIButton)
 			copyURIButton->setEnabled(FALSE);
 
+		if (copyNameButton)
+			copyNameButton->setEnabled(FALSE);
+		// </FS>
+
 		reset();
 		return;
 	}
+	// <FS>
 	// fill in group key
 	if (groupKeyEditor)
 		groupKeyEditor->setValue(id.asString());
@@ -993,6 +1017,7 @@ void LLPanelGroupGeneral::setGroupID(const LLUUID& id)
 	// activate copy URI button
 	if (copyURIButton)
 		copyURIButton->setEnabled(TRUE);
+	// </FS>
 
 	BOOL accept_notices = FALSE;
 	BOOL list_in_profile = FALSE;
@@ -1058,11 +1083,17 @@ S32 LLPanelGroupGeneral::sortMembersList(S32 col_idx,const LLScrollListItem* i1,
 	return LLStringUtil::compareDict(cell1->getValue().asString(), cell2->getValue().asString());
 }
 
-// protected
-
+// <FS> Copy button handlers
 // Copy URI button callback
 void LLPanelGroupGeneral::onCopyURI()
 {
     std::string name = "secondlife:///app/group/"+getChild<LLUICtrl>("group_key")->getValue().asString()+"/about";
     LLClipboard::instance().copyToClipboard(utf8str_to_wstring(name), 0, name.size() );
 }
+
+void LLPanelGroupGeneral::onCopyName()
+{
+    LLClipboard::instance().copyToClipboard(utf8str_to_wstring(mGroupName), 0, mGroupName.size() );
+}
+
+// </FS> Copy button handlers
