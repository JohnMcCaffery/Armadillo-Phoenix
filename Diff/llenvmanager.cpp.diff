diff --git a/Source/indra/newview/llenvmanager.cpp b/Source/indra/newview/llenvmanager.cpp
index caa6ffe..3c18917 100644
--- a/Source/indra/newview/llenvmanager.cpp
+++ b/Source/indra/newview/llenvmanager.cpp
@@ -40,6 +40,7 @@
 #include "rlvhandler.h"
 // [/RLVa:KB]
 #include "kcwlinterface.h"
+#include "quickprefs.h"
 
 std::string LLEnvPrefs::getWaterPresetName() const
 {
@@ -180,6 +181,9 @@ bool LLEnvManagerNew::useRegionSettings()
 
 bool LLEnvManagerNew::useWaterPreset(const std::string& name)
 {
+	// <FS:Ansariel> Quickprefs integration
+	FloaterQuickPrefs::updateParam(QP_PARAM_WATER, LLSD(name));
+
 	LL_DEBUGS("Windlight") << "Displaying water preset " << name << LL_ENDL;
 	LLWaterParamManager& water_mgr = LLWaterParamManager::instance();
 	bool rslt = water_mgr.getParamSet(name, water_mgr.mCurParams);
@@ -205,6 +209,9 @@ bool LLEnvManagerNew::useSkyPreset(const std::string& name, bool interpolate /*=
 		return false;
 	}
 
+	// <FS:Ansariel> Quickprefs integration
+	FloaterQuickPrefs::updateParam(QP_PARAM_SKY, LLSD(name));
+
 	LL_DEBUGS("Windlight") << "Displaying sky preset " << name << LL_ENDL;
 	sky_mgr.applySkyParams(param_set.getAll(), interpolate);
 	return true;
@@ -225,6 +232,9 @@ bool LLEnvManagerNew::useDayCycle(const std::string& name, LLEnvKey::EScope scop
 	{
 		LL_DEBUGS("Windlight") << "Displaying region day cycle " << name << LL_ENDL;
 		params = getRegionSettings().getWLDayCycle();
+
+		// <FS:Ansariel> Quickprefs integration
+		FloaterQuickPrefs::updateParam(QP_PARAM_DAYCYCLE, LLSD(PRESET_NAME_REGION_DEFAULT));
 	}
 	else
 	{
@@ -235,6 +245,9 @@ bool LLEnvManagerNew::useDayCycle(const std::string& name, LLEnvKey::EScope scop
 			llwarns << "No day cycle named " << name << llendl;
 			return false;
 		}
+
+		// <FS:Ansariel> Quickprefs integration
+		FloaterQuickPrefs::updateParam(QP_PARAM_DAYCYCLE, LLSD(name));
 	}
 
 	bool rslt = LLWLParamManager::instance().applyDayCycleParams(params, scope);
@@ -578,6 +591,9 @@ void LLEnvManagerNew::updateWaterFromPrefs(bool interpolate)
 		LLWaterParamSet default_water;
 		water_mgr.getParamSet("Default", default_water);
 		target_water_params = default_water.getAll();
+
+		// <FS:Ansariel> Quickprefs integration
+		FloaterQuickPrefs::updateParam(QP_PARAM_WATER, LLSD("Default"));
 	}
 
 	if (getUseRegionSettings())
@@ -588,6 +604,9 @@ void LLEnvManagerNew::updateWaterFromPrefs(bool interpolate)
 		{
 			LL_DEBUGS("Windlight") << "Applying region water" << LL_ENDL;
 			target_water_params = region_water_params;
+
+			// <FS:Ansariel> Quickprefs integration
+			FloaterQuickPrefs::updateParam(QP_PARAM_WATER, LLSD(PRESET_NAME_REGION_DEFAULT));
 		}
 		else
 		{
@@ -606,6 +625,13 @@ void LLEnvManagerNew::updateWaterFromPrefs(bool interpolate)
 
 			// *TODO: Fix user preferences accordingly.
 		}
+		// <FS:Ansariel> Quickprefs integration
+		else
+		{
+			FloaterQuickPrefs::updateParam(QP_PARAM_WATER, LLSD(water));
+		}
+		// </FS:Ansariel> Quickprefs integration
+
 		target_water_params = params.getAll();
 	}
 
@@ -643,6 +669,9 @@ bool LLEnvManagerNew::useRegionSky()
 
 	// *TODO: Support fixed sky from region.
 
+	// <FS:Ansariel> Quickprefs integration
+	FloaterQuickPrefs::updateParam(QP_PARAM_SKY, LLSD(PRESET_NAME_REGION_DEFAULT));
+
 	// Otherwise apply region day cycle.
 	LL_DEBUGS("Windlight") << "Applying region sky" << LL_ENDL;
 	return useDayCycleParams(
@@ -663,6 +692,9 @@ bool LLEnvManagerNew::useRegionWater()
 		return useDefaultWater();
 	}
 
+	// <FS:Ansariel> Quickprefs integration
+	FloaterQuickPrefs::updateParam(QP_PARAM_WATER, LLSD(PRESET_NAME_REGION_DEFAULT));
+
 	// Otherwise apply region water.
 	LL_DEBUGS("Windlight") << "Applying region sky" << LL_ENDL;
 	return useWaterParams(region_water);
