diff --git a/Source/indra/newview/fscommon.cpp b/Source/indra/newview/fscommon.cpp
index 3886e56..fd8f129 100644
--- a/Source/indra/newview/fscommon.cpp
+++ b/Source/indra/newview/fscommon.cpp
@@ -19,18 +19,38 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ * 
+ * The Phoenix Firestorm Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * http://www.firestormviewer.org
+ * $/LicenseInfo$
  */
 
 #include "llviewerprecompiledheaders.h"
 
 #include "fscommon.h"
+#include "llagent.h"
+#include "llfloatersidepanelcontainer.h"
 #include "llnotificationmanager.h"
+#include "llinventorymodel.h"
+#include "llpanel.h"
+#include "lltooldraganddrop.h"
+#include "llviewerinventory.h"
+#include "llviewernetwork.h"
+#include "llviewerregion.h"
 
 #include <boost/date_time/gregorian/gregorian.hpp>
 #include <boost/date_time/posix_time/posix_time.hpp>
 using namespace boost::posix_time;
 using namespace boost::gregorian;
 
+static const std::string LL_LINDEN = "Linden";
+static const std::string LL_MOLE = "Mole";
+static const std::string LL_PRODUCTENGINE = "ProductEngine";
+static const std::string LL_SCOUT = "Scout";
+static const std::string LL_TESTER = "Tester";
+
+S32 FSCommon::sObjectAddMsg = 0;
+
 void reportToNearbyChat(const std::string& message)
 {
 	LLChat chat;
@@ -107,6 +127,21 @@ std::string applyMuPose(const std::string& message)
 	return utf8_text;
 }
 
+std::string formatString(std::string text, const LLStringUtil::format_map_t& args)
+{
+	LLStringUtil::format(text, args);
+	return text;
+}
+
+LLPanelPeople* getPeoplePanel()
+{
+	LLPanel* panel_people = LLFloaterSidePanelContainer::getPanel("people", "panel_people");
+	if (panel_people)
+	{
+		return dynamic_cast<LLPanelPeople*>(panel_people);
+	}
+	return NULL;
+}
 
 S32 FSCommon::secondsSinceEpochFromString(const std::string& format, const std::string& str)
 {
@@ -122,3 +157,118 @@ S32 FSCommon::secondsSinceEpochFromString(const std::string& format, const std::
 	time_duration diff = time_t_date - time_t_epoch;
 	return diff.total_seconds();
 }
+
+void FSCommon::applyDefaultBuildPreferences(LLViewerObject* object)
+{
+	if (!object)
+	{
+		return;
+	}
+  
+	LLTextureEntry texture_entry;
+	texture_entry.setID(LLUUID(gSavedSettings.getString("FSDefaultObjectTexture")));
+	texture_entry.setColor(gSavedSettings.getColor4("FSBuildPrefs_Color"));
+	texture_entry.setAlpha((100.f - gSavedSettings.getF32("FSBuildPrefs_Alpha")) / 100.f);
+	texture_entry.setGlow(gSavedSettings.getF32("FSBuildPrefs_Glow"));
+	if(gSavedSettings.getBOOL("FSBuildPrefs_FullBright"))
+	{
+		texture_entry.setFullbright(TEM_FULLBRIGHT_MASK);
+	}
+	
+	U8 shiny = 0; // Default none
+	std::string shininess = gSavedSettings.getString("FSBuildPrefs_Shiny");
+	if(shininess == "Low")
+	{
+		shiny = 1;
+	}
+	else if(shininess == "Medium")
+	{
+		shiny = 2;
+	}
+	else if(shininess == "High")
+	{
+		shiny = 3;
+	}
+	texture_entry.setShiny(shiny);
+	
+	for(U8 face = 0; face < object->getNumTEs(); face++)
+	{
+		object->setTE(face, texture_entry);
+	}
+	object->sendTEUpdate();
+	
+	if(gSavedSettings.getBOOL("FSBuildPrefs_EmbedItem"))
+	{
+		LLViewerInventoryItem* item = (LLViewerInventoryItem*)gInventory.getItem((LLUUID)gSavedSettings.getString("FSBuildPrefs_Item"));
+		if(item)
+		{
+			if (item->getType() == LLAssetType::AT_LSL_TEXT)
+			{
+				
+				LLToolDragAndDrop::dropScript(object, item, TRUE,
+							      LLToolDragAndDrop::SOURCE_AGENT,
+							      gAgentID);
+			}
+			else
+			{
+				LLToolDragAndDrop::dropInventory(object, item,
+								LLToolDragAndDrop::SOURCE_AGENT,
+								gAgentID);
+			}
+		}
+	}
+	
+	U32 object_local_id = object->getLocalID();
+	gMessageSystem->newMessageFast(_PREHASH_ObjectPermissions);
+	gMessageSystem->nextBlockFast(_PREHASH_AgentData);
+	gMessageSystem->addUUIDFast(_PREHASH_AgentID, gAgent.getID());
+	gMessageSystem->addUUIDFast(_PREHASH_SessionID, gAgent.getSessionID());
+	gMessageSystem->nextBlockFast(_PREHASH_HeaderData);
+	gMessageSystem->addBOOLFast(_PREHASH_Override, (BOOL)FALSE);
+	gMessageSystem->nextBlockFast(_PREHASH_ObjectData);
+	gMessageSystem->addU32Fast(_PREHASH_ObjectLocalID, object_local_id);
+	gMessageSystem->addU8Fast(_PREHASH_Field, PERM_NEXT_OWNER);
+	gMessageSystem->addBOOLFast(_PREHASH_Set, gSavedSettings.getBOOL("NextOwnerModify"));
+	gMessageSystem->addU32Fast(_PREHASH_Mask, PERM_MODIFY);
+	gMessageSystem->nextBlockFast(_PREHASH_ObjectData);
+	gMessageSystem->addU32Fast(_PREHASH_ObjectLocalID, object_local_id);
+	gMessageSystem->addU8Fast(_PREHASH_Field, PERM_NEXT_OWNER);
+	gMessageSystem->addBOOLFast(_PREHASH_Set, gSavedSettings.getBOOL("NextOwnerCopy"));
+	gMessageSystem->addU32Fast(_PREHASH_Mask, PERM_COPY);
+	gMessageSystem->nextBlockFast(_PREHASH_ObjectData);
+	gMessageSystem->addU32Fast(_PREHASH_ObjectLocalID, object_local_id);
+	gMessageSystem->addU8Fast(_PREHASH_Field, PERM_NEXT_OWNER);
+	gMessageSystem->addBOOLFast(_PREHASH_Set, gSavedSettings.getBOOL("NextOwnerTransfer"));
+	gMessageSystem->addU32Fast(_PREHASH_Mask, PERM_TRANSFER);
+	gMessageSystem->sendReliable(object->getRegion()->getHost());
+
+	gMessageSystem->newMessage(_PREHASH_ObjectFlagUpdate);
+	gMessageSystem->nextBlockFast(_PREHASH_AgentData);
+	gMessageSystem->addUUIDFast(_PREHASH_AgentID, gAgent.getID() );
+	gMessageSystem->addUUIDFast(_PREHASH_SessionID, gAgent.getSessionID());
+	gMessageSystem->addU32Fast(_PREHASH_ObjectLocalID, object_local_id);
+	gMessageSystem->addBOOLFast(_PREHASH_UsePhysics, gSavedSettings.getBOOL("FSBuildPrefs_Physical"));
+	gMessageSystem->addBOOL(_PREHASH_IsTemporary, gSavedSettings.getBOOL("FSBuildPrefs_Temporary"));
+	gMessageSystem->addBOOL(_PREHASH_IsPhantom, gSavedSettings.getBOOL("FSBuildPrefs_Phantom"));
+	gMessageSystem->addBOOL("CastsShadows", FALSE );
+	gMessageSystem->sendReliable(object->getRegion()->getHost());
+}
+
+bool FSCommon::isLinden(const LLUUID& av_id)
+{
+#ifdef OPENSIM
+	if (LLGridManager::getInstance()->isInOpenSim())
+	{
+		return false;
+	}
+#endif
+
+	std::string first_name, last_name;
+	gCacheName->getFirstLastName(av_id, first_name, last_name);
+
+	return (last_name == LL_LINDEN ||
+			last_name == LL_MOLE ||
+			last_name == LL_PRODUCTENGINE ||
+			last_name == LL_SCOUT ||
+			last_name == LL_TESTER);
+}
\ No newline at end of file
