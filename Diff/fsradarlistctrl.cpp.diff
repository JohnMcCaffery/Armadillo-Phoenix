diff --git a/Source/indra/newview/fsradarlistctrl.cpp b/Source/indra/newview/fsradarlistctrl.cpp
index ea980d1..46b8529 100644
--- a/Source/indra/newview/fsradarlistctrl.cpp
+++ b/Source/indra/newview/fsradarlistctrl.cpp
@@ -1,10 +1,10 @@
 /** 
- * @file llradarlistctrl.cpp
+ * @file fsradarlistctrl.cpp
  * @brief A radar-specific implementation of scrolllist
  *
- * $LicenseInfo:firstyear=2003&license=viewerlgpl$
- * Second Life Viewer Source Code
- * Copyright (C) 2010, Linden Research, Inc.
+ * $LicenseInfo:firstyear=2011&license=viewerlgpl$
+ * Phoenix Firestorm Viewer Source Code
+ * Copyright (c) 2011 Arrehn Oberlander
  * 
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -20,62 +20,50 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  * 
- * Linden Research, Inc., 945 Battery Street, San Francisco, CA  94111  USA
+ * The Phoenix Firestorm Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * http://www.firestormviewer.org
  * $/LicenseInfo$
  */
 
 #include "llviewerprecompiledheaders.h"
+
 #include "fsradarlistctrl.h"
 #include "lllistcontextmenu.h"
-#include "rlvhandler.h"
-
-
-#include <boost/tokenizer.hpp>
-
-#include "llavatarnamecache.h"
-#include "llcachename.h"
-#include "llfloaterreg.h"
-#include "llinventory.h"
 #include "llscrolllistitem.h"
-#include "llscrolllistcell.h"
-#include "llscrolllistcolumn.h"
-#include "llsdparam.h"
-#include "lltooltip.h"
-#include "lltrans.h"
-
-
-static LLDefaultChildRegistry::Register<LLRadarListCtrl> r("radar_list");
+#include "rlvhandler.h"
 
+static LLDefaultChildRegistry::Register<FSRadarListCtrl> r("radar_list");
 
-LLRadarListCtrl::Params::Params()
+FSRadarListCtrl::Params::Params()
 {
 	name = "radar_list";
 }
 
-
-LLRadarListCtrl::LLRadarListCtrl(const LLRadarListCtrl::Params& p)
+FSRadarListCtrl::FSRadarListCtrl(const FSRadarListCtrl::Params& p)
 :	LLScrollListCtrl(p),
 mContextMenu(NULL)
 {
 }
 
-BOOL LLRadarListCtrl::handleRightMouseDown(S32 x, S32 y, MASK mask)
+BOOL FSRadarListCtrl::handleRightMouseDown(S32 x, S32 y, MASK mask)
 {
-	llinfos << "handleRightMouseDown" << llendl;
+	//llinfos << "handleRightMouseDown" << llendl;
 	BOOL handled = LLUICtrl::handleRightMouseDown(x, y, mask);
 //	if ( mContextMenu )
 // [RLVa:KB-FS] - Checked: 2011-06-11 (RLVa-1.3.1) | Added: RLVa-1.3.1
 	if ( (mContextMenu) && (!gRlvHandler.hasBehaviour(RLV_BHVR_SHOWNAMES)) )
 // [/RLVa:KB-FS]
 	{
-		if(getAllSelected().size() > 1)
+		S32 uuid_column_index = getColumn("uuid")->mIndex;
+		std::vector<LLScrollListItem*> selected_items = getAllSelected();
+		if (selected_items.size() > 1)
 		{
 			//llinfos << "Right-click select by value: (multi-select)" << llendl;
 			uuid_vec_t selected_uuids;
-			for(size_t i=0;i<getAllSelected().size();i++)
+			for (size_t i = 0; i < selected_items.size(); i++)
 			{
-				llinfos << "Right-click select by value: " << getAllSelected().at(i)->getColumn(getColumn("uuid")->mIndex)->getValue().asUUID() << llendl;
-				selected_uuids.push_back(getAllSelected().at(i)->getColumn(getColumn("uuid")->mIndex)->getValue().asUUID());
+				//llinfos << "Right-click select by value: " << selected_items.at(i)->getColumn(uuid_column_index)->getValue().asUUID() << llendl;
+				selected_uuids.push_back(selected_items.at(i)->getColumn(uuid_column_index)->getValue().asUUID());
 			}
 			mContextMenu->show(this, selected_uuids, x, y);
 		}
@@ -84,7 +72,7 @@ BOOL LLRadarListCtrl::handleRightMouseDown(S32 x, S32 y, MASK mask)
 			LLScrollListItem* hit_item = hitItem(x, y);
 			if (hit_item)
 			{
-				llinfos << "Right-click select by value: " << hit_item->getValue() << llendl;
+				//llinfos << "Right-click select by value: " << hit_item->getValue() << llendl;
 				selectByID(hit_item->getValue());
 				LLUUID av = hit_item->getValue();
 				uuid_vec_t selected_uuids;
