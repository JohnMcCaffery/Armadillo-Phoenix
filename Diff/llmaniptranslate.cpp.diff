diff --git a/Source/indra/newview/llmaniptranslate.cpp b/Source/indra/newview/llmaniptranslate.cpp
index 1fa43dd..60ad4e2 100644
--- a/Source/indra/newview/llmaniptranslate.cpp
+++ b/Source/indra/newview/llmaniptranslate.cpp
@@ -488,7 +488,6 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 	}
 
 	// Throttle updates to 10 per second.
-	BOOL send_update = FALSE;
 
 	LLVector3		axis_f;
 	LLVector3d		axis_d;
@@ -549,14 +548,27 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 	F64 axis_magnitude = relative_move * axis_d;					// dot product
 	LLVector3d cursor_point_snap_line;
 	
-	F64 off_axis_magnitude;
+// <FS:Cron> FIRE-8882 - off_axis_magnitude was scoped too far away from its only use.
+	//F64 off_axis_magnitude;
 
 	getMousePointOnPlaneGlobal(cursor_point_snap_line, x, y, current_pos_global, mSnapOffsetAxis % axis_f);
-	off_axis_magnitude = axis_exists ? llabs((cursor_point_snap_line - current_pos_global) * LLVector3d(mSnapOffsetAxis)) : 0.f;
+	//off_axis_magnitude = axis_exists ? llabs((cursor_point_snap_line - current_pos_global) * LLVector3d(mSnapOffsetAxis)) : 0.f;
+// </FS:Cron>
 
 	if (gSavedSettings.getBOOL("SnapEnabled"))
 	{
-		if (off_axis_magnitude > mSnapOffsetMeters)
+// <FS:Cron> FIRE-8882
+		F64 off_axis_magnitude = axis_exists ? llabs((cursor_point_snap_line - current_pos_global) * LLVector3d(mSnapOffsetAxis)) : 0.f;
+		U32 snap_domain = gSavedSettings.getU32("FSSnapDomain");
+		
+		//if (off_axis_magnitude > mSnapOffsetMeters)
+		if
+		(
+			(snap_domain == LL_SNAP_DOMAIN_OUTSIDE && off_axis_magnitude > mSnapOffsetMeters)
+			||
+			(snap_domain == LL_SNAP_DOMAIN_INSIDE && axis_exists && off_axis_magnitude <= mSnapOffsetMeters)
+		)
+// </FS:Cron>
 		{
 			mInSnapRegime = TRUE;
 			LLVector3 mouse_down_offset(mDragCursorStartGlobal - mDragSelectionStartGlobal);
@@ -710,11 +722,6 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 				LLVector3 old_position_local = object->getPosition();
 				LLVector3 new_position_local = selectNode->mSavedPositionLocal + (clamped_relative_move_f * objWorldRotation);
 
-				// move and clamp root object first, before adjusting children
-				if (new_position_local != old_position_local)
-				{
-					send_update = TRUE;
-				}
 				//RN: I forget, but we need to do this because of snapping which doesn't often result
 				// in position changes even when the mouse moves
 				object->setPosition(new_position_local);
@@ -724,8 +731,6 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 
 				if (selectNode->mIndividualSelection)
 				{
-					send_update = FALSE;
-		
 					// counter-translate child objects if we are moving the root as an individual
 					object->resetChildrenPosition(old_position_local - new_position_local, TRUE) ;					
 				}
@@ -766,7 +771,6 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 				}
 
 				// PR: Only update if changed
-				LLVector3d old_position_global = object->getPositionGlobal();
 				LLVector3 old_position_agent = object->getPositionAgent();
 				LLVector3 new_position_agent = gAgent.getPosAgentFromGlobal(new_position_global);
 				if (object->isRootEdit())
@@ -788,11 +792,6 @@ BOOL LLManipTranslate::handleHover(S32 x, S32 y, MASK mask)
 				{
 					// counter-translate child objects if we are moving the root as an individual
 					object->resetChildrenPosition(old_position_agent - new_position_agent, TRUE) ;					
-					send_update = FALSE;
-				}
-				else if (old_position_global != new_position_global)
-				{
-					send_update = TRUE;
 				}
 			}
 			selectNode->mLastPositionLocal  = object->getPosition();
@@ -1277,6 +1276,10 @@ void LLManipTranslate::renderSnapGuides()
 		S32 sub_div_offset = llround(fmod(dist_grid_axis - offset_nearest_grid_unit, getMinGridScale() / sGridMinSubdivisionLevel) / smallest_grid_unit_scale);
 		S32 num_ticks_per_side = llmax(1, llfloor(0.5f * guide_size_meters / smallest_grid_unit_scale));
 
+// <FS:Cron> FIRE-8882
+		U32 snap_domain = gSavedSettings.getU32("FSSnapDomain");
+// </FS:Cron>
+
 		LLGLDepthTest gls_depth(GL_FALSE);
 
 		for (S32 pass = 0; pass < 3; pass++)
@@ -1323,8 +1326,19 @@ void LLManipTranslate::renderSnapGuides()
 					// add in off-axis offset
 					tick_start += (mSnapOffsetAxis * mSnapOffsetMeters);
 
-					BOOL is_sub_tick = FALSE;
-					F32 tick_scale = 1.f;
+// <FS:Cron> FIRE-8882
+					//F32 tick_scale = 1.f;
+					F32 tick_scale = 0.f;
+					switch (snap_domain)
+					{
+						case LL_SNAP_DOMAIN_OUTSIDE:
+							tick_scale = 1.f;
+						break;
+						case LL_SNAP_DOMAIN_INSIDE:
+							tick_scale = -0.8f;
+						break;
+					}
+// </FS:Cron>
 					for (F32 division_level = max_subdivisions; division_level >= sGridMinSubdivisionLevel; division_level /= 2.f)
 					{
 						if (fmodf((F32)(i + sub_div_offset), division_level) == 0.f)
@@ -1332,7 +1346,6 @@ void LLManipTranslate::renderSnapGuides()
 							break;
 						}
 						tick_scale *= 0.7f;
-						is_sub_tick = TRUE;
 					}
 
 // 					S32 num_ticks_to_fade = is_sub_tick ? num_ticks_per_side / 2 : num_ticks_per_side;
@@ -1415,16 +1428,25 @@ void LLManipTranslate::renderSnapGuides()
 
 			if (fmodf((F32)(i + sub_div_offset), (max_subdivisions / llmin(sGridMaxSubdivisionLevel, getSubdivisionLevel(tick_pos, translate_axis, getMinGridScale(), tick_label_spacing)))) == 0.f)
 			{
-				F32 snap_offset_meters;
+// <FS:Cron> FIRE-8882
+				//F32 snap_offset_meters;
+				F32 snap_offset_meters = 0.f;
 
-				if (mSnapOffsetAxis * LLViewerCamera::getInstance()->getUpAxis() > 0.f)
-				{
-					snap_offset_meters = mSnapOffsetMeters;			
-				}
-				else
-				{
-					snap_offset_meters = -mSnapOffsetMeters;
+				if (snap_domain == LL_SNAP_DOMAIN_OUTSIDE) {
+// </FS:Cron>
+					if (mSnapOffsetAxis * LLViewerCamera::getInstance()->getUpAxis() > 0.f)
+					{
+						snap_offset_meters = mSnapOffsetMeters;
+					}
+					else
+					{
+						snap_offset_meters = -mSnapOffsetMeters;
+					}
+// <FS:Cron> FIRE-8882
 				}
+				//else case assuming snap_domain == LL_SNAP_DOMAIN_INSIDE for now.  This results in snap_offset_meters == 0.f and the third term of the text_origin assignment becoming zero as an expected consequence. ~Cron Stardust
+// </FS:Cron>
+				
 				LLVector3 text_origin = selection_center + 
 						(translate_axis * ((smallest_grid_unit_scale * (F32)i) - offset_nearest_grid_unit)) + 
 							(mSnapOffsetAxis * snap_offset_meters * (1.f + tick_scale));
@@ -1465,7 +1487,7 @@ void LLManipTranslate::renderSnapGuides()
 					snap_offset_meters_up = -mSnapOffsetMeters;
 				}
 
-				LLVector3 selection_center_start = getSavedPivotPoint();//LLSelectMgr::getInstance()->getSavedBBoxOfSelection().getCenterAgent();
+				LLVector3 selection_center_start = getSavedPivotPoint();
 
 				LLVector3 help_text_pos = selection_center_start + (snap_offset_meters_up * 3.f * mSnapOffsetAxis);
 				const LLFontGL* big_fontp = LLFontGL::getFontSansSerif();
@@ -1555,7 +1577,6 @@ void LLManipTranslate::renderSnapGuides()
 		
 		float a = line_alpha;
 
-		LLColor4 col = LLUIColorTable::instance().getColor("SilhouetteChildColor");
 		{
 			//draw grid behind objects
 			LLGLDepthTest gls_depth(GL_TRUE, GL_FALSE);
@@ -1768,6 +1789,13 @@ void LLManipTranslate::highlightIntersection(LLVector3 normal,
 		shader->bind();
 	}
 
+	// <FS:Ansariel> Remove LL merge error
+	//if (shader)
+	//{
+	//	shader->bind();
+	//}
+	// </FS:Ansariel>
+
 	//draw volume/plane intersections
 	{
 		gGL.getTexUnit(0)->unbind(LLTexUnit::TT_TEXTURE);
