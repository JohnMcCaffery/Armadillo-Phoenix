diff --git a/Source/indra/newview/llfilepicker.cpp b/Source/indra/newview/llfilepicker.cpp
index 760b602..ae09c04 100644
--- a/Source/indra/newview/llfilepicker.cpp
+++ b/Source/indra/newview/llfilepicker.cpp
@@ -60,6 +60,10 @@ LLFilePicker LLFilePicker::sInstance;
 #define MODEL_FILTER L"Model files (*.dae)\0*.dae\0"
 #define SCRIPT_FILTER L"Script files (*.lsl)\0*.lsl\0"
 #define DICTIONARY_FILTER L"Dictionary files (*.dic; *.xcu)\0*.dic;*.xcu\0"
+// <FS:CR> Import filter
+//#define IMPORT_FILTER L"Import (*.oxp; *.hpa)\0*.oxp;*.hpa\0"
+#define IMPORT_FILTER L"Import (*.oxp)\0*.oxp\0"
+// </FS:CR>
 #endif
 
 //
@@ -223,6 +227,12 @@ BOOL LLFilePicker::setupFilter(ELoadFilter filter)
 		mOFN.lpstrFilter = DICTIONARY_FILTER \
 			L"\0";
 		break;
+// <FS:CR> Import filter
+	case FFLOAD_IMPORT:
+		mOFN.lpstrFilter = IMPORT_FILTER \
+			L"\0";
+		break;
+// </FS:CR>
 	default:
 		res = FALSE;
 		break;
@@ -540,6 +550,16 @@ BOOL LLFilePicker::getSaveFile(ESaveFilter filter, const std::string& filename,
 			L"XML File (*.xml)\0*.xml\0" \
 			L"\0";
 		break; 
+// <FS:CR> Export filter
+	case FFSAVE_EXPORT:
+		if (filename.empty())
+		{
+			wcsncpy( mFilesW,L"untitled.oxp", FILENAME_BUFFER_SIZE);
+		}
+		mOFN.lpstrDefExt = L"oxp";
+		mOFN.lpstrFilter = L"OXP Backup Files (*.oxp)\0*.oxp\0" L"\0";
+		break;
+// </FS:CR>
 	default:
 		return FALSE;
 	}
@@ -692,7 +712,18 @@ Boolean LLFilePicker::navOpenFilterProc(AEDesc *theItem, void *info, void *callB
 								result = false;
 							}
 						}
-						
+// <FS:CR> Import filter
+						else if (filter == FFLOAD_IMPORT)
+						{
+							if (fileInfo.filetype != 'OXP ' &&
+								//fileInfo.filetype != 'HPA ' &&
+								(fileInfo.extension && (CFStringCompare(fileInfo.extension, CFSTR("oxp"), kCFCompareCaseInsensitive) != kCFCompareEqualTo) )) //&&
+								 //fileInfo.extension && (CFStringCompare(fileInfo.extension, CFSTR("hpa"), kCFCompareCaseInsensitive) != kCFCompareEqualTo)))
+							{
+								result = false;
+							}
+						}
+// </FS:CR>
 						if (fileInfo.extension)
 						{
 							CFRelease(fileInfo.extension);
@@ -843,7 +874,13 @@ OSStatus	LLFilePicker::doNavSaveDialog(ESaveFilter filter, const std::string& fi
 			creator = '\?\?\?\?';
 			extension = CFSTR(".lsl");
 			break;
-		
+// <FS:CR> Export filter
+		case FFSAVE_EXPORT:
+			type = 'OXP ';
+			creator = '\?\?\?\?';
+			extension = CFSTR(".oxp");
+			break;
+// </FS:CR>
 		case FFSAVE_ALL:
 		default:
 			type = '\?\?\?\?';
@@ -1151,6 +1188,7 @@ void LLFilePicker::chooser_responder(GtkWidget *widget, gint response, gpointer
 
 GtkWindow* LLFilePicker::buildFilePicker(bool is_save, bool is_folder, std::string context)
 {
+#ifndef LL_MESA_HEADLESS
 	if (LLWindowSDL::ll_try_gtk_init())
 	{
 		GtkWidget *win = NULL;
@@ -1222,6 +1260,9 @@ GtkWindow* LLFilePicker::buildFilePicker(bool is_save, bool is_folder, std::stri
 	{
 		return NULL;
 	}
+#else
+	return NULL;
+#endif //LL_MESA_HEADLESS
 }
 
 static void add_common_filters_to_gtkchooser(GtkFileFilter *gfilter,
@@ -1304,6 +1345,28 @@ static std::string add_dictionary_filter_to_gtkchooser(GtkWindow *picker)
 							LLTrans::getString("dictionary_files") + " (*.dic; *.xcu)");
 }
 
+// <FS:CR> GTK Import/Export filters
+static std::string add_import_filter_to_gtkchooser(GtkWindow *picker)
+{
+	GtkFileFilter *gfilter = gtk_file_filter_new();
+	gtk_file_filter_add_pattern(gfilter, "*.oxp");
+	std::string filtername = LLTrans::getString("backup_files") + " (*.oxp)";
+	//gtk_file_filter_add_pattern(gfilter, "*.hpa");
+	//std::string filtername = LLTrans::getString("backup_files") + " (*.oxp; *.hpa)";
+	add_common_filters_to_gtkchooser(gfilter, picker, filtername);
+	return filtername;
+}
+
+static std::string add_export_filter_to_gtkchooser(GtkWindow *picker)
+{
+	GtkFileFilter *gfilter = gtk_file_filter_new();
+	gtk_file_filter_add_pattern(gfilter, "*.oxp");
+	std::string filtername = LLTrans::getString("backup_files") + " (*.oxp)";
+	add_common_filters_to_gtkchooser(gfilter, picker, filtername);
+	return filtername;
+}
+// </FS:CR>
+								
 BOOL LLFilePicker::getSaveFile( ESaveFilter filter, const std::string& filename, bool blocking )
 {
 	BOOL rtn = FALSE;
@@ -1372,6 +1435,12 @@ BOOL LLFilePicker::getSaveFile( ESaveFilter filter, const std::string& filename,
 			caption += add_script_filter_to_gtkchooser(picker);
 			suggest_ext = ".lsl";
 			break;
+// <FS:CR> Export filter
+		case FFSAVE_EXPORT:
+			caption += add_export_filter_to_gtkchooser(picker);
+			suggest_ext = ".oxp";
+			break;
+// </FS:CR>
 		default:;
 			break;
 		}
@@ -1443,6 +1512,11 @@ BOOL LLFilePicker::getOpenFile( ELoadFilter filter, bool blocking )
 		case FFLOAD_DICTIONARY:
 			filtername = add_dictionary_filter_to_gtkchooser(picker);
 			break;
+// <FS:CR> Import filter
+		case FFLOAD_IMPORT:
+			filtername = add_import_filter_to_gtkchooser(picker);
+			break;
+// </FS:CR>
 		default:;
 			break;
 		}
@@ -1524,10 +1598,7 @@ BOOL LLFilePicker::getSaveFile( ESaveFilter filter, const std::string& filename
 	return FALSE;
 }
 
-// <FS:CR Threaded Filepickers>
-//BOOL LLFilePicker::getOpenFile( ELoadFilter filter )
 BOOL LLFilePicker::getOpenFile( ELoadFilter filter, bool blocking )
-// </FS:CR Threaded Filepickers>
 {
 	// if local file browsing is turned off, return without opening dialog
 	// (Even though this is a stub, I think we still should not return anything at all)
@@ -1548,7 +1619,7 @@ BOOL LLFilePicker::getOpenFile( ELoadFilter filter, bool blocking )
 	default: break;
 	}
 	mFiles.push_back(filename);
-	llinfos << "getOpenFile: Will try to open file: " << hackyfilename << llendl;
+	llinfos << "getOpenFile: Will try to open file: " << filename << llendl;
 	return TRUE;
 }
 
