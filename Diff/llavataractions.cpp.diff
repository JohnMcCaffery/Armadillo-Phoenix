diff --git a/Source/indra/newview/llavataractions.cpp b/Source/indra/newview/llavataractions.cpp
index a859eeb..c4d04bf 100644
--- a/Source/indra/newview/llavataractions.cpp
+++ b/Source/indra/newview/llavataractions.cpp
@@ -68,7 +68,10 @@
 #include "llviewerobjectlist.h"
 #include "llviewermessage.h"	// for handle_lure
 #include "llviewerregion.h"
-#include "llimfloater.h"
+// <FS:Ansariel> [FS communication UI]
+//#include "llimfloater.h"
+#include "fsfloaterim.h"
+// </FS:Ansariel> [FS communication UI]
 #include "lltrans.h"
 #include "llcallingcard.h"
 #include "llslurl.h"			// IDEVO
@@ -86,7 +89,9 @@
 #include "fslslbridge.h"
 //<FS:KC legacy profiles>
 #include "fsfloaterprofile.h"
-
+#include "llfloaterregioninfo.h"
+#include "lltrans.h"
+#include "fswsassetblacklist.h"
 
 // static
 void LLAvatarActions::requestFriendshipDialog(const LLUUID& id, const std::string& name)
@@ -199,7 +204,10 @@ static void on_avatar_name_cache_start_im(const LLUUID& agent_id,
 	LLUUID session_id = gIMMgr->addSession(name, IM_NOTHING_SPECIAL, agent_id);
 	if (session_id != LLUUID::null)
 	{
-		LLIMFloater::show(session_id);
+		// <FS:Ansariel> [FS communication UI]
+		//LLIMFloater::show(session_id);
+		FSFloaterIM::show(session_id);
+		// </FS:Ansariel> [FS communication UI]
 	}
 	make_ui_sound("UISndStartIM");
 }
@@ -360,7 +368,10 @@ void LLAvatarActions::startConference(const uuid_vec_t& ids)
 	LLUUID session_id = gIMMgr->addSession(title, IM_SESSION_CONFERENCE_START, ids[0], id_array);
 	if (session_id != LLUUID::null)
 	{
-		LLIMFloater::show(session_id);
+		// <FS:Ansariel> [FS communication UI]
+		//LLIMFloater::show(session_id);
+		FSFloaterIM::show(session_id);
+		// </FS:Ansariel> [FS communication UI]
 	}
 	make_ui_sound("UISndStartIM");
 }
@@ -547,6 +558,13 @@ void LLAvatarActions::csr(const LLUUID& id, std::string name)
 //static 
 void LLAvatarActions::share(const LLUUID& id)
 {
+	// <FS:Ansariel> FIRE-8804: Prevent opening inventory from using share in radar context menu
+	if (gRlvHandler.hasBehaviour(RLV_BHVR_SHOWINV))
+	{
+		return;
+	}
+	// </FS:Ansariel>
+
 	LLSD key;
 	LLFloaterSidePanelContainer::showPanel("inventory", key);
 
@@ -1667,3 +1685,148 @@ bool LLAvatarActions::callbackEstateTeleportHome(const LLSD& notification, const
 	return false;
 }
 // [/SL:KB]
+
+// <FS:Ansariel> Estate ban user
+void LLAvatarActions::estateBan(const LLUUID& idAgent)
+{
+	uuid_vec_t idAgents;
+	idAgents.push_back(idAgent);
+	estateBanMultiple(idAgents);
+}
+
+void LLAvatarActions::estateBanMultiple(const uuid_vec_t& idAgents)
+{
+	LLViewerRegion* region = gAgent.getRegion();
+	if (!region)
+	{
+		return;
+	}
+
+	uuid_vec_t idEjectAgents(idAgents);
+	if (!canEstateKickOrTeleportHomeMultiple(idEjectAgents, true))
+		return;
+
+	LLSD args, payload; std::string strMsgName, strResidents;
+	for (uuid_vec_t::const_iterator itAgent = idEjectAgents.begin(); itAgent != idEjectAgents.end(); ++itAgent)
+	{
+		const LLUUID& idAgent = *itAgent;
+		if (idEjectAgents.begin() != itAgent)
+			strResidents += "\n";
+		strResidents += LLSLURL("agent", idAgent, (!gRlvHandler.hasBehaviour(RLV_BHVR_SHOWNAMES)) ? "completename" : "rlvanonym").getSLURLString();
+		payload["ids"].append(*itAgent);
+	}
+
+	std::string owner = LLSLURL("agent", region->getOwner(), "inspect").getSLURLString();
+	if (gAgent.isGodlike())
+	{
+		LLStringUtil::format_map_t owner_args;
+		owner_args["[OWNER]"] = owner;
+		args["ALL_ESTATES"] = LLTrans::getString("RegionInfoAllEstatesOwnedBy", owner_args);
+	}
+	else if (region->getOwner() == gAgent.getID())
+	{
+		args["ALL_ESTATES"] = LLTrans::getString("RegionInfoAllEstatesYouOwn");
+	}
+	else if (region->isEstateManager())
+	{
+		LLStringUtil::format_map_t owner_args;
+		owner_args["[OWNER]"] = owner.c_str();
+		args["ALL_ESTATES"] = LLTrans::getString("RegionInfoAllEstatesYouManage", owner_args);
+	}
+
+	if (1 == payload["ids"].size())
+	{
+		args["EVIL_USER"] = strResidents;
+		strMsgName = "EstateBanUser";
+	}
+	else
+	{
+		args["RESIDENTS"] = strResidents;
+		strMsgName = "EstateBanUserMultiple";
+	}
+
+	LLNotificationsUtil::add(strMsgName, args, payload, &callbackEstateBan);
+}
+
+bool LLAvatarActions::callbackEstateBan(const LLSD& notification, const LLSD& response)
+{
+	LLViewerRegion* region = gAgent.getRegion();
+	S32 idxOption = LLNotificationsUtil::getSelectedOption(notification, response);
+
+	if (0 == idxOption || 1 == idxOption)
+	{
+		const LLSD& idAgents = notification["payload"]["ids"];
+		for (LLSD::array_const_iterator itAgent = idAgents.beginArray(); itAgent != idAgents.endArray(); ++itAgent)
+		{
+			if (region->getOwner() == itAgent->asUUID())
+			{
+				// Can't ban the owner!
+				continue;
+			}
+
+			U32 flags = ESTATE_ACCESS_BANNED_AGENT_ADD | ESTATE_ACCESS_ALLOWED_AGENT_REMOVE;
+
+			if (itAgent + 1 != idAgents.endArray())
+			{
+				flags |= ESTATE_ACCESS_NO_REPLY;
+			}
+
+			if (idxOption == 1)
+			{
+				// All estates, either than I own or manage for this owner.  
+				// This will be verified on simulator. JC
+				if (!region)
+				{
+					break;
+				}
+
+				if (region->getOwner() == gAgent.getID()
+					|| gAgent.isGodlike())
+				{
+					flags |= ESTATE_ACCESS_APPLY_TO_ALL_ESTATES;
+				}
+				else if (region->isEstateManager())
+				{
+					flags |= ESTATE_ACCESS_APPLY_TO_MANAGED_ESTATES;
+				}
+			}
+
+			LLFloaterRegionInfo::nextInvoice();
+			LLPanelEstateInfo::sendEstateAccessDelta(flags, itAgent->asUUID());
+		}
+	}
+	return false;
+}
+// </FS:Ansariel> Estate ban user
+
+// <FS:Ansariel> Derender
+//static
+void LLAvatarActions::derender(const LLUUID& agent_id, bool permanent)
+{
+	LLAvatarNameCache::get(agent_id, boost::bind(&LLAvatarActions::onDerenderAvatarNameLookup, _1, _2, permanent));
+}
+
+//static
+void LLAvatarActions::derenderMultiple(const uuid_vec_t& agent_ids, bool permanent)
+{
+	for (uuid_vec_t::const_iterator it = agent_ids.begin(); it != agent_ids.end(); it++)
+	{
+		LLAvatarNameCache::get((*it), boost::bind(&LLAvatarActions::onDerenderAvatarNameLookup, _1, _2, permanent));
+	}
+}
+
+//static
+void LLAvatarActions::onDerenderAvatarNameLookup(const LLUUID& agent_id, const LLAvatarName& av_name, bool permanent)
+{
+	if (permanent)
+	{
+		FSWSAssetBlacklist::getInstance()->addNewItemToBlacklist(agent_id, av_name.getLegacyName(), "", LLAssetType::AT_OBJECT);
+	}
+
+	LLViewerObject* av_obj = gObjectList.findObject(agent_id);
+	if (av_obj)
+	{
+		gObjectList.killObject(av_obj);
+	}
+}
+// </FS:Ansariel> Derender
