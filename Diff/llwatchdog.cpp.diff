diff --git a/Source/indra/newview/llwatchdog.cpp b/Source/indra/newview/llwatchdog.cpp
index 4f582fc..a8f87e0 100644
--- a/Source/indra/newview/llwatchdog.cpp
+++ b/Source/indra/newview/llwatchdog.cpp
@@ -94,7 +94,8 @@ void LLWatchdogEntry::stop()
 }
 
 // LLWatchdogTimeout
-const std::string UNINIT_STRING = "uninitialized";
+// const std::string UNINIT_STRING = "uninitialized";
+const char *UNINIT_STRING = "uninitialized";
 
 LLWatchdogTimeout::LLWatchdogTimeout() : 
 	mTimeout(0.0f),
@@ -121,7 +122,10 @@ void LLWatchdogTimeout::setTimeout(F32 d)
 	mTimeout = d;
 }
 
-void LLWatchdogTimeout::start(const std::string& state) 
+// <FS:ND> Change from std::string to char const*, saving a lot of object construction/destruction per frame
+// void LLWatchdogTimeout::start(const std::string& state) 
+void LLWatchdogTimeout::start(const char *state) 
+// </FS:ND>
 {
 	// Order of operation is very impmortant here.
 	// After LLWatchdogEntry::start() is called
@@ -137,9 +141,12 @@ void LLWatchdogTimeout::stop()
 	mTimer.stop();
 }
 
-void LLWatchdogTimeout::ping(const std::string& state) 
+// <FS:ND> Change from std::string to char const*, saving a lot of object construction/destruction per frame
+// void LLWatchdogTimeout::ping(const std::string& state) 
+void LLWatchdogTimeout::ping(const char *state) 
+// </FS:ND>
 { 
-	if(!state.empty())
+	if(state)
 	{
 		mPingState = state;
 	}
