diff --git a/Source/indra/newview/growlmanager.cpp b/Source/indra/newview/growlmanager.cpp
index 46f1a5c..6847c5c 100644
--- a/Source/indra/newview/growlmanager.cpp
+++ b/Source/indra/newview/growlmanager.cpp
@@ -34,21 +34,18 @@
 
 #include "llagentdata.h"
 #include "llappviewer.h"
-#include "lldir.h"
-#include "llfile.h"
-#include "llfocusmgr.h"
 #include "llimview.h"
 #include "llnotifications.h"
-#include "llsd.h"
+#include "llscriptfloater.h"
 #include "llsdserialize.h"
 #include "llstartup.h"
+#include "llurlregistry.h" // for SLURL parsing
 #include "llviewercontrol.h"
 #include "llviewerwindow.h"
 #include "llwindow.h"
 
 #include "growlmanager.h"
 #include "growlnotifier.h"
-#include "llurlregistry.h" // for SLURL parsing
 
 // Platform-specific includes
 #ifdef LL_DARWIN
@@ -79,6 +76,24 @@ GrowlManager::GrowlManager() : LLEventTimer(GROWL_THROTTLE_CLEANUP_PERIOD)
 	LL_INFOS("GrowlManagerInit") << "Created generic GrowlNotifier." << LL_ENDL;
 #endif
 	
+#ifdef LL_WINDOWS
+	if (mNotifier)
+	{
+		// Need to call loadConfig for Windows first before we know if
+		// Growl is usable -Ansariel
+		loadConfig();
+		if (!mNotifier->isUsable())
+		{
+			LL_WARNS("GrowlManagerInit") << "Growl is unusable; bailing out." << LL_ENDL;
+			return;
+		}
+	}
+	else
+	{
+		LL_WARNS("GrowlManagerInit") << "Growl is unusable; bailing out." << LL_ENDL;
+		return;
+	}
+#else
 	// Don't do anything more if Growl isn't usable.
 	if( !mNotifier || !mNotifier->isUsable())
 	{
@@ -86,6 +101,9 @@ GrowlManager::GrowlManager() : LLEventTimer(GROWL_THROTTLE_CLEANUP_PERIOD)
 		return;
 	}
 
+	loadConfig();
+#endif
+
 	// Hook into LLNotifications...
 	// We hook into all of them, even though (at the time of writing) nothing uses "alert", so more notifications can be added easily.
 	LLNotificationChannel::buildChannel("GrowlNotifications", "Visible", &filterOldNotifications);
@@ -93,49 +111,68 @@ GrowlManager::GrowlManager() : LLEventTimer(GROWL_THROTTLE_CLEANUP_PERIOD)
 
 	// Also hook into IM notifications.
 	LLIMModel::instance().mNewMsgSignal.connect(&GrowlManager::onInstantMessage);
-	this->loadConfig();
+	
+	// Hook into script dialogs
+	LLScriptFloaterManager::instance().addNewObjectCallback(&GrowlManager::onScriptDialog);
 }
 
 void GrowlManager::loadConfig()
 {
 	std::string config_file = gDirUtilp->getExpandedFilename(LL_PATH_APP_SETTINGS, "growl_notifications.xml");
-	if(config_file == "")
+	if (config_file.empty())
 	{
 		LL_WARNS("GrowlConfig") << "Couldn't find growl_notifications.xml" << LL_ENDL;
 		return;
 	}
+
 	LL_INFOS("GrowlConfig") << "Loading growl notification config from " << config_file << LL_ENDL;
 	llifstream configs(config_file);
 	LLSD notificationLLSD;
 	std::set<std::string> notificationTypes;
 	notificationTypes.insert("Keyword Alert");
 	notificationTypes.insert(GROWL_IM_MESSAGE_TYPE);
-	if(configs.is_open())
+	if (configs.is_open())
 	{
 		LLSDSerialize::fromXML(notificationLLSD, configs);
-		for(LLSD::map_iterator itr = notificationLLSD.beginMap(); itr != notificationLLSD.endMap(); ++itr)
+		for (LLSD::map_iterator itr = notificationLLSD.beginMap(); itr != notificationLLSD.endMap(); ++itr)
 		{
 			GrowlNotification ntype;
 			ntype.growlName = itr->second.get("GrowlName").asString();
 			notificationTypes.insert(ntype.growlName);
 			
-			if(itr->second.has("GrowlTitle"))
-				ntype.growlTitle = itr->second.get("GrowlTitle").asString();			
-			if(itr->second.has("GrowlBody"))
+			if (itr->second.has("GrowlTitle"))
+			{
+				ntype.growlTitle = itr->second.get("GrowlTitle").asString();
+			}
+
+			if (itr->second.has("GrowlBody"))
+			{
 				ntype.growlBody = itr->second.get("GrowlBody").asString();
-			if(itr->second.has("UseDefaultTextForTitle"))
+			}
+
+			if (itr->second.has("UseDefaultTextForTitle"))
+			{
 				ntype.useDefaultTextForTitle = itr->second.get("UseDefaultTextForTitle").asBoolean();
+			}
 			else
+			{
 				ntype.useDefaultTextForTitle = false;
-			if(itr->second.has("UseDefaultTextForBody"))
+			}
+
+			if (itr->second.has("UseDefaultTextForBody"))
+			{
 				ntype.useDefaultTextForBody = itr->second.get("UseDefaultTextForBody").asBoolean();
+			}
 			else
+			{
 				ntype.useDefaultTextForBody = false;
-			if(ntype.useDefaultTextForBody == false && ntype.useDefaultTextForTitle == false && 
-			   ntype.growlBody == "" && ntype.growlTitle == "")
+			}
+
+			if (!ntype.useDefaultTextForBody && !ntype.useDefaultTextForTitle && ntype.growlBody.empty() && ntype.growlTitle.empty())
 			{
 				ntype.useDefaultTextForBody = true;
 			}
+
 			this->mNotifications[itr->first] = ntype;
 		}
 		configs.close();
@@ -152,18 +189,22 @@ void GrowlManager::loadConfig()
 void GrowlManager::notify(const std::string& notification_title, const std::string& notification_message, const std::string& notification_type)
 {
 	static LLCachedControl<bool> enabled(gSavedSettings, "FSEnableGrowl");
-	if(!enabled)
+	if (!enabled)
+	{
 		return;
+	}
 	
-	if(!shouldNotify())
+	if (!shouldNotify())
+	{
 		return;
+	}
 	
-	if(this->mNotifier->needsThrottle())
+	if (mNotifier->needsThrottle())
 	{
 		U64 now = LLTimer::getTotalTime();
-		if(mTitleTimers.find(notification_title) != mTitleTimers.end())
+		if (mTitleTimers.find(notification_title) != mTitleTimers.end())
 		{
-			if(mTitleTimers[notification_title] > now - GROWL_THROTTLE_TIME)
+			if (mTitleTimers[notification_title] > now - GROWL_THROTTLE_TIME)
 			{
 				LL_WARNS("GrowlNotify") << "Discarded notification with title '" << notification_title << "' - spam ._." << LL_ENDL;
 				mTitleTimers[notification_title] = now;
@@ -172,7 +213,7 @@ void GrowlManager::notify(const std::string& notification_title, const std::stri
 		}
 		mTitleTimers[notification_title] = now;
 	}
-	this->mNotifier->showNotification(notification_title, notification_message.substr(0, GROWL_MAX_BODY_LENGTH), notification_type);
+	mNotifier->showNotification(notification_title, notification_message.substr(0, GROWL_MAX_BODY_LENGTH), notification_type);
 }
 
 BOOL GrowlManager::tick()
@@ -183,33 +224,39 @@ BOOL GrowlManager::tick()
 
 bool GrowlManager::onLLNotification(const LLSD& notice)
 {
-	if(notice["sigtype"].asString() != "add")
+	if (notice["sigtype"].asString() != "add")
+	{
 		return false;
+	}
 	LLNotificationPtr notification = LLNotifications::instance().find(notice["id"].asUUID());
 	std::string name = notification->getName();
 	LLSD substitutions = notification->getSubstitutions();
-	if(gGrowlManager->mNotifications.find(name) != gGrowlManager->mNotifications.end())
+	if (gGrowlManager->mNotifications.find(name) != gGrowlManager->mNotifications.end())
 	{
 		GrowlNotification* growl_notification = &gGrowlManager->mNotifications[name];
 		std::string body = "";
 		std::string title = "";
-		if(growl_notification->useDefaultTextForTitle)
+		if (growl_notification->useDefaultTextForTitle)
+		{
 			title = notification->getMessage();
-		else if(growl_notification->growlTitle != "")
+		}
+		else if (!growl_notification->growlTitle.empty())
 		{
 			title = growl_notification->growlTitle;
 			LLStringUtil::format(title, substitutions);
 		}
-		if(growl_notification->useDefaultTextForBody)
+		if (growl_notification->useDefaultTextForBody)
+		{
 			body = notification->getMessage();
-		else if(growl_notification->growlBody != "")
+		}
+		else if (!growl_notification->growlBody.empty())
 		{
 			body = growl_notification->growlBody;
 			LLStringUtil::format(body, substitutions);
 		}
 		//TM:FS no need to log whats sent to growl
 		//LL_INFOS("GrowlLLNotification") << "Notice: " << title << ": " << body << LL_ENDL;
-		if(name == "ObjectGiveItem" || name == "ObjectGiveItemUnknownUser" || name == "UserGiveItem" || name == "SystemMessageTip")
+		if (name == "ObjectGiveItem" || name == "OwnObjectGiveItem" || name == "ObjectGiveItemUnknownUser" || name == "UserGiveItem" || name == "SystemMessageTip")
 		{
 			LLUrlMatch urlMatch;
 			LLWString newLine = utf8str_to_wstring(body);
@@ -238,15 +285,17 @@ return (pNotification->getDate().secondsSinceEpoch() >= LLDate::now().secondsSin
 void GrowlManager::onInstantMessage(const LLSD& im)
 {
 	LLIMModel::LLIMSession* session = LLIMModel::instance().findIMSession(im["session_id"]);
-	if(session->isP2PSessionType())
+	if (session->isP2PSessionType())
 	{
 		// Don't show messages from ourselves or the system.
 		LLUUID from_id = im["from_id"];
-		if(from_id == LLUUID::null || from_id == gAgentID)
+		if (from_id == LLUUID::null || from_id == gAgentID)
+		{
 			return;
+		}
 		std::string message = im["message"];
 		std::string prefix = message.substr(0, 4);
-		if(prefix == "/me " || prefix == "/me'")
+		if (prefix == "/me " || prefix == "/me'")
 		{
 			message = message.substr(3);
 		}
@@ -254,16 +303,54 @@ void GrowlManager::onInstantMessage(const LLSD& im)
 	}
 }
 
+//static
+void GrowlManager::onScriptDialog(const LLSD& data)
+{
+	LLNotificationPtr notification = LLNotifications::instance().find(data["notification_id"].asUUID());
+	std::string name = notification->getName();
+	LLSD payload = notification->getPayload();
+	LLSD substitutions = notification->getSubstitutions();
+
+	//LL_INFOS("GrowlLLNotification") << "Script dialog: name=" << name << " - payload=" << payload << " subs=" << substitutions << LL_ENDL;
+	if (gGrowlManager->mNotifications.find(name) != gGrowlManager->mNotifications.end())
+	{
+		GrowlNotification* growl_notification = &gGrowlManager->mNotifications[name];
+
+		std::string body = "";
+		std::string title = "";
+		if (growl_notification->useDefaultTextForTitle)
+		{
+			title = notification->getMessage();
+		}
+		else if (!growl_notification->growlTitle.empty())
+		{
+			title = growl_notification->growlTitle;
+			LLStringUtil::format(title, substitutions);
+		}
+
+		if (growl_notification->useDefaultTextForBody)
+		{
+			body = notification->getMessage();
+		}
+		else if (!growl_notification->growlBody.empty())
+		{
+			body = growl_notification->growlBody;
+			LLStringUtil::format(body, substitutions);
+		}
+
+		gGrowlManager->notify(title, body, growl_notification->growlName);
+	}
+}
 
 bool GrowlManager::shouldNotify()
 {
 	// This magic stolen from llappviewer.cpp. LLViewerWindow::getActive lies.
 	static LLCachedControl<bool> activated(gSavedSettings, "FSGrowlWhenActive");
-	if(LLStartUp::getStartupState() < STATE_STARTED)
+	if (LLStartUp::getStartupState() < STATE_STARTED)
 	{
 		return false;
 	}
-	return (activated || (!gViewerWindow->getWindow()->getVisible()  || !gFocusMgr.getAppHasFocus()));
+	return (activated || (!gViewerWindow->getWindow()->getVisible() || !gFocusMgr.getAppHasFocus()));
 }
 
 void GrowlManager::InitiateManager()
@@ -271,3 +358,7 @@ void GrowlManager::InitiateManager()
 	gGrowlManager = new GrowlManager();
 }
 
+bool GrowlManager::isUsable()
+{
+	return (gGrowlManager && gGrowlManager->mNotifier && gGrowlManager->mNotifier->isUsable());
+}
\ No newline at end of file
