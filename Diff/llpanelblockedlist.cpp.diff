diff --git a/Source/indra/newview/llpanelblockedlist.cpp b/Source/indra/newview/llpanelblockedlist.cpp
index d4a5696..73d0b6b 100644
--- a/Source/indra/newview/llpanelblockedlist.cpp
+++ b/Source/indra/newview/llpanelblockedlist.cpp
@@ -40,6 +40,9 @@
 #include "llfloatersidepanelcontainer.h"
 #include "llsidetraypanelcontainer.h"
 
+#include "llavataractions.h"
+#include "llviewercontrol.h"
+
 static LLRegisterPanelClassWrapper<LLPanelBlockedList> t_panel_blocked_list("panel_block_list_sidetray");
 
 //
@@ -57,6 +60,8 @@ LLPanelBlockedList::LLPanelBlockedList()
 	mCommitCallbackRegistrar.add("Block.ClickPick",			boost::bind(&LLPanelBlockedList::onPickBtnClick, this));
 	mCommitCallbackRegistrar.add("Block.ClickBlockByName",	boost::bind(&LLPanelBlockedList::onBlockByNameClick, this));
 	mCommitCallbackRegistrar.add("Block.ClickRemove",		boost::bind(&LLPanelBlockedList::onRemoveBtnClick, this));
+	// <FS:Ansariel> Profile button
+	mCommitCallbackRegistrar.add("Block.ClickProfile",		boost::bind(&LLPanelBlockedList::onProfileBtnClick, this));
 }
 
 LLPanelBlockedList::~LLPanelBlockedList()
@@ -68,6 +73,11 @@ BOOL LLPanelBlockedList::postBuild()
 {
 	mBlockedList = getChild<LLScrollListCtrl>("blocked");
 	mBlockedList->setCommitOnSelectionChange(TRUE);
+	// <FS:Ansariel> Profile button
+	mBlockedList->setCommitCallback(boost::bind(&LLPanelBlockedList::onSelectionChanged, this));
+	mBlockedList->setDoubleClickCallback(boost::bind(&LLPanelBlockedList::onProfileBtnClick, this));
+	mBlockedList->sortByColumn("item_name", TRUE);
+	mBlockedList->setSearchColumn(mBlockedList->getColumn("item_name")->mIndex);
 
 	// <FS:Zi> Make sure user can go back blocked user list if it's in a skin without
 	//         sidebar <Back button
@@ -93,7 +103,8 @@ BOOL LLPanelBlockedList::postBuild()
 
 void LLPanelBlockedList::draw()
 {
-	updateButtons();
+	// <FS:Ansariel> Only update if selection changes
+	//updateButtons();
 	LLPanel::draw();
 }
 
@@ -108,11 +119,22 @@ void LLPanelBlockedList::onOpen(const LLSD& key)
 void LLPanelBlockedList::selectBlocked(const LLUUID& mute_id)
 {
 	mBlockedList->selectByID(mute_id);
+	mBlockedList->scrollToShowSelected();
 }
 
 void LLPanelBlockedList::showPanelAndSelect(const LLUUID& idToSelect)
 {
-	LLFloaterSidePanelContainer::showPanel("people", "panel_block_list_sidetray", LLSD().with(BLOCKED_PARAM_NAME, idToSelect));
+	// <FS:Ansariel> Optional standalone blocklist floater
+	//LLFloaterSidePanelContainer::showPanel("people", "panel_block_list_sidetray", LLSD().with(BLOCKED_PARAM_NAME, idToSelect));
+	if (gSavedSettings.getBOOL("FSUseStandaloneBlocklistFloater"))
+	{
+		LLFloaterReg::showInstance("fs_blocklist", LLSD().with(BLOCKED_PARAM_NAME, idToSelect));
+	}
+	else
+	{
+		LLFloaterSidePanelContainer::showPanel("people", "panel_block_list_sidetray", LLSD().with(BLOCKED_PARAM_NAME, idToSelect));
+	}
+	// </FS:Ansariel>
 }
 
 
@@ -156,43 +178,135 @@ void LLPanelBlockedList::onBackBtnClick()
 
 void LLPanelBlockedList::onRemoveBtnClick()
 {
-	std::string name = mBlockedList->getSelectedItemLabel();
-	LLUUID id = mBlockedList->getStringUUIDSelectedItem();
-	LLMute mute(id, name);
+	//std::string name = mBlockedList->getSelectedItemLabel();
+	//LLUUID id = mBlockedList->getStringUUIDSelectedItem();
+	//LLMute mute(id, name);
+	//
+	//// <FS:Ansariel> Keep scroll position
+	//S32 scroll_pos = mBlockedList->getScrollPos();
+
+	//S32 last_selected = mBlockedList->getFirstSelectedIndex();
+	//if (LLMuteList::getInstance()->remove(mute))
+	//{
+	//	// Above removals may rebuild this dialog.
+	//	
+	//	if (last_selected == mBlockedList->getItemCount())
+	//	{
+	//		// we were on the last item, so select the last item again
+	//		mBlockedList->selectNthItem(last_selected - 1);
+	//	}
+	//	else
+	//	{
+	//		// else select the item after the last item previously selected
+	//		mBlockedList->selectNthItem(last_selected);
+	//	}
+	//	// <FS:Ansariel> Only update if selection changes
+	//	onSelectionChanged();
+
+	//	// <FS:Ansariel> Keep scroll position
+	//	mBlockedList->setScrollPos(scroll_pos);
+	//}
 	
+	// <FS:Ansariel> Allow bulk removals
+	S32 scroll_pos = mBlockedList->getScrollPos();
 	S32 last_selected = mBlockedList->getFirstSelectedIndex();
-	if (LLMuteList::getInstance()->remove(mute))
+
+	// Remove observer before bulk operation or it would refresh the
+	// list after each removal, sending us straight into a crash!
+	LLMuteList::getInstance()->removeObserver(this);
+
+	std::vector<LLScrollListItem*> selected_items = mBlockedList->getAllSelected();
+	for (std::vector<LLScrollListItem*>::iterator it = selected_items.begin(); it != selected_items.end(); it++)
 	{
-		// Above removals may rebuild this dialog.
-		
-		if (last_selected == mBlockedList->getItemCount())
-		{
-			// we were on the last item, so select the last item again
-			mBlockedList->selectNthItem(last_selected - 1);
-		}
-		else
-		{
-			// else select the item after the last item previously selected
-			mBlockedList->selectNthItem(last_selected);
-		}
+		std::string name = (*it)->getColumn(0)->getValue().asString();
+		LLUUID id = (*it)->getUUID();
+		LLMute mute(id, name);
+		LLMuteList::getInstance()->remove(mute);
+	}
+
+	LLMuteList::getInstance()->addObserver(this);
+	refreshBlockedList();
+
+	if (last_selected == mBlockedList->getItemCount())
+	{
+		// we were on the last item, so select the last item again
+		mBlockedList->selectNthItem(last_selected - 1);
+	}
+	else
+	{
+		// else select the item after the last item previously selected
+		mBlockedList->selectNthItem(last_selected);
 	}
+	onSelectionChanged();
+	mBlockedList->setScrollPos(scroll_pos);
+	// </FS:Ansariel>
 }
 
 void LLPanelBlockedList::onPickBtnClick()
 {
 	const BOOL allow_multiple = FALSE;
 	const BOOL close_on_select = TRUE;
-	/*LLFloaterAvatarPicker* picker = */LLFloaterAvatarPicker::show(boost::bind(&LLPanelBlockedList::callbackBlockPicked, this, _1, _2), allow_multiple, close_on_select);
+	// <FS:Ansariel> Standalone blocklist floater
+	/*LLFloaterAvatarPicker* picker = *///LLFloaterAvatarPicker::show(boost::bind(&LLPanelBlockedList::callbackBlockPicked, this, _1, _2), allow_multiple, close_on_select);
 
 	// *TODO: mantipov: should LLFloaterAvatarPicker be closed when panel is closed?
 	// old Floater dependency is not enable in panel
 	// addDependentFloater(picker);
+
+	// <FS:Ansariel> Standalone blocklist floater
+	if (gSavedSettings.getBOOL("FSUseStandaloneBlocklistFloater"))
+	{
+		LLFloaterAvatarPicker* picker = LLFloaterAvatarPicker::show(boost::bind(&LLPanelBlockedList::callbackBlockPicked, this, _1, _2), allow_multiple, close_on_select);
+		LLFloater* parent = dynamic_cast<LLFloater*>(getParent());
+		if (parent)
+		{
+			parent->addDependentFloater(picker);
+		}
+	}
+	else
+	{
+		LLFloaterAvatarPicker::show(boost::bind(&LLPanelBlockedList::callbackBlockPicked, this, _1, _2), allow_multiple, close_on_select);
+	}
+	// </FS:Ansariel>
 }
 
 void LLPanelBlockedList::onBlockByNameClick()
 {
-	LLFloaterGetBlockedObjectName::show(&LLPanelBlockedList::callbackBlockByName);
+	// <FS:Ansariel> Standalone blocklist floater
+	//LLFloaterGetBlockedObjectName::show(&LLPanelBlockedList::callbackBlockByName);
+	if (gSavedSettings.getBOOL("FSUseStandaloneBlocklistFloater"))
+	{
+		LLFloaterGetBlockedObjectName* picker = LLFloaterGetBlockedObjectName::show(&LLPanelBlockedList::callbackBlockByName);
+		LLFloater* parent = dynamic_cast<LLFloater*>(getParent());
+		if (parent)
+		{
+			parent->addDependentFloater(picker);
+		}
+	}
+	else
+	{
+		LLFloaterGetBlockedObjectName::show(&LLPanelBlockedList::callbackBlockByName);
+	}
+	// </FS:Ansariel>
+}
+
+// <FS:Ansariel> Profile button
+void LLPanelBlockedList::onSelectionChanged()
+{
+	updateButtons();
+	LLMute mute = LLMuteList::getInstance()->getMute(mBlockedList->getStringUUIDSelectedItem());
+	getChildView("Profile")->setEnabled(mBlockedList->getNumSelected() == 1 && mute.mID.notNull() && mute.mType == LLMute::AGENT);
+}
+
+void LLPanelBlockedList::onProfileBtnClick()
+{
+	LLMute mute = LLMuteList::getInstance()->getMute(mBlockedList->getStringUUIDSelectedItem());
+	if (mBlockedList->getNumSelected() == 1 && mute.mID.notNull() && mute.mType == LLMute::AGENT)
+	{
+		LLAvatarActions::showProfile(mute.mID);
+	}
 }
+// </FS:Ansariel>
 
 void LLPanelBlockedList::callbackBlockPicked(const uuid_vec_t& ids, const std::vector<LLAvatarName> names)
 {
