diff --git a/Source/indra/newview/llinventorypanel.cpp b/Source/indra/newview/llinventorypanel.cpp
index d2ca3a5..37a608c 100644
--- a/Source/indra/newview/llinventorypanel.cpp
+++ b/Source/indra/newview/llinventorypanel.cpp
@@ -44,6 +44,7 @@
 #include "llinventoryfunctions.h"
 #include "llinventorymodelbackgroundfetch.h"
 #include "llsidepanelinventory.h"
+#include "lltrans.h"
 #include "llviewerattachmenu.h"
 #include "llviewerfoldertype.h"
 #include "llvoavatarself.h"
@@ -191,8 +192,6 @@ void LLInventoryPanel::buildFolderView(const LLInventoryPanel::Params& params)
 
 void LLInventoryPanel::initFromParams(const LLInventoryPanel::Params& params)
 {
-	LLMemType mt(LLMemType::MTYPE_INVENTORY_POST_BUILD);
-
 	mCommitCallbackRegistrar.pushScope(); // registered as a widget; need to push callback scope ourselves
 	
 	buildFolderView(params);
@@ -431,8 +430,6 @@ void LLInventoryPanel::modelChanged(U32 mask)
 	static LLFastTimer::DeclareTimer FTM_REFRESH("Inventory Refresh");
 	LLFastTimer t2(FTM_REFRESH);
 
-	bool handled = false;
-
 	if (!mViewsInitialized) return;
 	
 	const LLInventoryModel* model = getModel();
@@ -458,7 +455,6 @@ void LLInventoryPanel::modelChanged(U32 mask)
 		// Empty out the display name for relabel.
 		if (mask & LLInventoryObserver::LABEL)
 		{
-			handled = true;
 			if (view_item)
 			{
 				// Request refresh on this item (also flags for filtering)
@@ -477,12 +473,11 @@ void LLInventoryPanel::modelChanged(U32 mask)
 		// Destroy and regenerate the UI.
 		if (mask & LLInventoryObserver::REBUILD)
 		{
-			handled = true;
 			if (model_item && view_item)
 			{
 				view_item->destroyView();
 			}
-			view_item = buildNewViews(item_id,0);
+			view_item = buildNewViews(item_id);
 			view_folder = dynamic_cast<LLFolderViewFolder *>(view_item);
 		}
 
@@ -517,15 +512,13 @@ void LLInventoryPanel::modelChanged(U32 mask)
 					LLInventoryObserver::ADD |
 					LLInventoryObserver::REMOVE))
 		{
-			handled = true;
-
 			//////////////////////////////
 			// ADD Operation
 			// Item exists in memory but a UI element hasn't been created for it.
 			if (model_item && !view_item)
 			{
 				// Add the UI element for this item.
-				buildNewViews(item_id,0);
+				buildNewViews(item_id);
 				// Select any newly created object that has the auto rename at top of folder root set.
 				if(mFolderRoot->getRoot()->needsAutoRename())
 				{
@@ -640,7 +633,7 @@ LLFolderViewItem* LLInventoryPanel::rebuildViewsFor(const LLUUID& id)
 		old_view->destroyView();
 	}
 
-	return buildNewViews(id,0);
+	return buildNewViews(id);
 }
 
 LLFolderView * LLInventoryPanel::createFolderView(LLInvFVBridge * bridge, bool useLabelSuffix)
@@ -708,14 +701,14 @@ LLFolderViewItem * LLInventoryPanel::createFolderViewItem(LLInvFVBridge * bridge
 	return LLUICtrlFactory::create<LLFolderViewItem>(params);
 }
 
-LLFolderViewItem* LLInventoryPanel::buildNewViews(const LLUUID& id, long aRecursionCount )
+LLFolderViewItem* LLInventoryPanel::buildNewViews(const LLUUID& id )
 {
  	LLInventoryObject const* objectp = gInventory.getObject(id);
  	LLUUID root_id = mFolderRoot->getListener()->getUUID();
  	LLFolderViewFolder* parent_folder = NULL;
 	LLFolderViewItem* itemp = NULL;
 	
- 	if (id == root_id)
+	if (id == root_id)
  	{
  		parent_folder = mFolderRoot;
  	}
@@ -749,8 +742,6 @@ LLFolderViewItem* LLInventoryPanel::buildNewViews(const LLUUID& id, long aRecurs
 					LLFolderViewFolder* folderp = createFolderViewFolder(new_listener);
 					if (folderp)
 					{
-						folderp->setPanel(this);
-						folderp->setFolderId( id );
 						folderp->setItemSortOrder(mFolderRoot->getSortOrder());
 					}
   					itemp = folderp;
@@ -781,22 +772,6 @@ LLFolderViewItem* LLInventoryPanel::buildNewViews(const LLUUID& id, long aRecurs
 		}
 	}
 
-	//  <ND> Subfolder JIT
- 	// FIRE-3615; FIRE-3616: For some panels we get a zero UUID for top level folders here. </ND>
-	// FIRE-3615: Disable this for now. It needs some serious rework.
-	// 	if( (id == getRootFolderID() || getRootFolderID().isNull() || id.isNull()) /*<ND/>: FIRE-3725, breaks worn tab on deeper nesting levels, remove for now: && aRecursionCount < 1*/ )
-		addSubItems( id, 0 );
-	// </ND>
-
-	return itemp;
-}
-
-// <ND> JIT subfolder processing
-void LLInventoryPanel::addSubItems(const LLUUID& id, long aRecursionCount)
-{
- 	LLInventoryObject const* objectp = gInventory.getObject(id);
- 	LLUUID root_id = mFolderRoot->getListener()->getUUID();
-
 	// If this is a folder, add the children of the folder and recursively add any 
 	// child folders.
 	if (id.isNull()
@@ -806,13 +781,7 @@ void LLInventoryPanel::addSubItems(const LLUUID& id, long aRecursionCount)
 		LLViewerInventoryCategory::cat_array_t* categories;
 		LLViewerInventoryItem::item_array_t* items;
 		mInventory->lockDirectDescendentArrays(id, categories, items);
-		LLFolderViewFolder *parent_folder(0);
-
-	 	if (id == root_id)
-	 		parent_folder = mFolderRoot;
-		else if( items && objectp )
-			parent_folder = (LLFolderViewFolder*)mFolderRoot->getItemByID(objectp->getParentUUID());
-
+		
 		if(categories)
 		{
 			for (LLViewerInventoryCategory::cat_array_t::const_iterator cat_iter = categories->begin();
@@ -820,9 +789,7 @@ void LLInventoryPanel::addSubItems(const LLUUID& id, long aRecursionCount)
 				 ++cat_iter)
 			{
 				const LLViewerInventoryCategory* cat = (*cat_iter);
-				//buildNewViews(cat->getUUID());  
-				if( !mFolderRoot->getItemByID( cat->getUUID() ) ) //ND
-					buildNewViews(cat->getUUID(), aRecursionCount+1);
+				buildNewViews(cat->getUUID());
 			}
 		}
 		
@@ -833,27 +800,13 @@ void LLInventoryPanel::addSubItems(const LLUUID& id, long aRecursionCount)
 				 ++item_iter)
 			{
 				const LLViewerInventoryItem* item = (*item_iter);
-				//buildNewViews(cat->getUUID());
-				if( !mFolderRoot->getItemByID( item->getUUID() ) ) //ND
-					buildNewViews(item->getUUID(), aRecursionCount+1 );
-			}
-		}
-		else if( items )
-		{
-			llwarns << "No parent folder for items; items:" << llendl;
-			for (LLViewerInventoryItem::item_array_t::const_iterator item_iter = items->begin();
-				 item_iter != items->end();
-				 ++item_iter)
-			{
-				const LLViewerInventoryItem* item = (*item_iter);
-				if( item )
-					llwarns << "    name: " << item->getName() << llendl;
+				buildNewViews(item->getUUID());
 			}
-			llwarns << "end of item enumeratin" << llendl;
-
 		}
 		mInventory->unlockDirectDescendentArrays(id);
 	}
+	
+	return itemp;
 }
 
 // bit of a hack to make sure the inventory is open.
@@ -1045,6 +998,7 @@ void LLInventoryPanel::doToSelected(const LLSD& userdata)
 
 void LLInventoryPanel::doCreate(const LLSD& userdata)
 {
+	reset_inventory_filter();
 	menu_create_inventory_item(mFolderRoot, LLFolderBridge::sSelf.get(), userdata);
 }
 
@@ -1053,7 +1007,6 @@ bool LLInventoryPanel::beginIMSession()
 	std::set<LLUUID> selected_items = mFolderRoot->getSelectionList();
 
 	std::string name;
-	static int session_num = 1;
 
 //	LLDynamicArray<LLUUID> members;
 // [RLVa:KB] - Checked: 2011-04-11 (RLVa-1.3.0h) | Added: RLVa-1.3.0h
@@ -1142,7 +1095,7 @@ bool LLInventoryPanel::beginIMSession()
 
 	if (name.empty())
 	{
-		name = llformat("Session %d", session_num++);
+		name = LLTrans::getString("conference-title");
 	}
 
 //	LLUUID session_id = gIMMgr->addSession(name, type, members[0], members);
