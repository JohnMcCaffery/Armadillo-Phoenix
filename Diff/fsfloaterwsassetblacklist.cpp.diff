diff --git a/Source/indra/newview/fsfloaterwsassetblacklist.cpp b/Source/indra/newview/fsfloaterwsassetblacklist.cpp
index ea44837..a6b12ae 100644
--- a/Source/indra/newview/fsfloaterwsassetblacklist.cpp
+++ b/Source/indra/newview/fsfloaterwsassetblacklist.cpp
@@ -20,17 +20,16 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  *
- * The Phoenix Viewer Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
- * http://www.phoenixviewer.com
+ * The Phoenix Firestorm Project, Inc., 1831 Oakwood Drive, Fairmont, Minnesota 56031-3225 USA
+ * http://www.firestormviewer.org
  * $/LicenseInfo$
  */
 
 #include "llviewerprecompiledheaders.h"
+
 #include "fsfloaterwsassetblacklist.h"
+
 #include "fswsassetblacklist.h"
-#include "llfloater.h"
-#include "lluuid.h"
-#include "llsd.h"
 #include "llscrolllistctrl.h"
 #include "llviewercontrol.h"
 
@@ -49,7 +48,7 @@ FSFloaterWSAssetBlacklist::~FSFloaterWSAssetBlacklist()
 	}
 }
 
-std::string FSFloaterWSAssetBlacklist::TypeToString(S32 type)
+std::string FSFloaterWSAssetBlacklist::getTypeString(S32 type)
 {
 	switch (type)
 	{
@@ -68,19 +67,17 @@ std::string FSFloaterWSAssetBlacklist::TypeToString(S32 type)
 	}
 }
 
-void FSFloaterWSAssetBlacklist::BuildBlacklist()
+void FSFloaterWSAssetBlacklist::buildBlacklist()
 {
-	typedef std::map<LLUUID, LLSD>::iterator it_type;
-	std::map<LLUUID,LLSD> data = FSWSAssetBlacklist::getInstance()->BlacklistData;
+	blacklist_data_t data = FSWSAssetBlacklist::instance().getBlacklistData();
 	
-	for(it_type iterator = data.begin(); iterator != data.end(); iterator++)
+	for (blacklist_data_t::const_iterator iterator = data.begin(); iterator != data.end(); ++iterator)
 	{
-			LLSD data = iterator->second;
-			addElementToList(iterator->first, iterator->second);
+		addElementToList(iterator->first, iterator->second);
 	}
 }
 
-void FSFloaterWSAssetBlacklist::addElementToList(LLUUID id, LLSD data)
+void FSFloaterWSAssetBlacklist::addElementToList(const LLUUID& id, const LLSD& data)
 {
 	LLSD element;
 	element["id"] = id;
@@ -92,7 +89,7 @@ void FSFloaterWSAssetBlacklist::addElementToList(LLUUID id, LLSD data)
 	element["columns"][1]["value"] = !data["asset_region"].asString().empty() ? data["asset_region"].asString() : getString("unknown_region");
 	element["columns"][2]["column"] = "type";
 	element["columns"][2]["type"] = "text";
-	element["columns"][2]["value"] = TypeToString(data["asset_type"].asInteger());
+	element["columns"][2]["value"] = getTypeString(data["asset_type"].asInteger());
 	element["columns"][3]["column"] = "date";
 	element["columns"][3]["type"] = "text";
 	element["columns"][3]["value"] = data["asset_date"].asString();
@@ -100,7 +97,7 @@ void FSFloaterWSAssetBlacklist::addElementToList(LLUUID id, LLSD data)
 	mResultList->addElement(element, ADD_BOTTOM);
 }
 
-void FSFloaterWSAssetBlacklist::removeElementFromList(LLUUID id)
+void FSFloaterWSAssetBlacklist::removeElementFromList(const LLUUID& id)
 {
 	mResultList->deleteSingleItem(mResultList->getItemIndex(id));
 }
@@ -109,7 +106,7 @@ void FSFloaterWSAssetBlacklist::removeElementFromList(LLUUID id)
 void FSFloaterWSAssetBlacklist::onOpen(const LLSD& key)
 {	
 	mResultList->clearRows();
-	BuildBlacklist();
+	buildBlacklist();
 }
 
 BOOL FSFloaterWSAssetBlacklist::postBuild()
@@ -129,12 +126,11 @@ BOOL FSFloaterWSAssetBlacklist::postBuild()
 
 void FSFloaterWSAssetBlacklist::onRemoveBtn()
 {
-	std::vector<LLScrollListItem*> list=mResultList->getAllSelected();
+	std::vector<LLScrollListItem*> list = mResultList->getAllSelected();
 
-	for (std::vector<LLScrollListItem*>::iterator it = list.begin(); it != list.end(); it++)
+	for (std::vector<LLScrollListItem*>::const_iterator it = list.begin(); it != list.end(); ++it)
 	{
-		LLScrollListItem* item = *it;
-		FSWSAssetBlacklist::getInstance()->removeItemFromBlacklist(item->getUUID());
+		FSWSAssetBlacklist::instance().removeItemFromBlacklist((*it)->getUUID());
 	}
 	
 	mResultList->deleteSelectedItems();
